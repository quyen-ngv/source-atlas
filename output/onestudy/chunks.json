[
  {
    "package": "com.edu.onestudy.annotations",
    "class_name": "CurrentUser",
    "full_class_name": "com.edu.onestudy.annotations.CurrentUser",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\annotations\\CurrentUser.java",
    "content": "@Target({ElementType.PARAMETER, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@AuthenticationPrincipal\npublic @interface CurrentUser {\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.annotations",
    "class_name": "LogsActivityAnnotation",
    "full_class_name": "com.edu.onestudy.annotations.LogsActivityAnnotation",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\annotations\\LogsActivityAnnotation.java",
    "content": "@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface LogsActivityAnnotation {\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.annotations",
    "class_name": "ValueOfEnum",
    "full_class_name": "com.edu.onestudy.annotations.ValueOfEnum",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\annotations\\ValueOfEnum.java",
    "content": "@Target(value = {METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})\n@Retention(RUNTIME)\n@Documented\n@Constraint(validatedBy = ValueOfEnumValidator.class)\npublic @interface ValueOfEnum {\n    Class<? extends Enum<?>> enumClass();\n    String message() default \"must be any of enum {enumClass}\";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "Constant",
    "full_class_name": "com.edu.onestudy.constant.Constant",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\Constant.java",
    "content": "public final class Constant {\n\n    public static final Integer COURSE_CODE_LENGTH = 6;\n\n    public static final Integer SIGNED_URL_EXPIRATION = 60 * 1000;\n\n    public static final String STORAGE_AWS = \"AWS_S3_NORMAL\";\n\n    public static final String STORAGE_GCP = \"STORAGE_GCP\";\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "Difficulty",
    "full_class_name": "com.edu.onestudy.constant.Difficulty",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\Difficulty.java",
    "content": "@Getter\npublic enum Difficulty {\n    BEGINNER(\"beginner\"),\n    INTERMEDIATE(\"intermediate\"),\n    ADVANCED(\"advanced\");\n\n    private final String value;\n\n    Difficulty(String value) {\n        this.value = value;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "ErrorConstant",
    "full_class_name": "com.edu.onestudy.constant.ErrorConstant",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\ErrorConstant.java",
    "content": "public class ErrorConstant {\n\n    private ErrorConstant() {}\n\n    \n                                                   \n          \n\n    public static final int SUCCESS = 200000;\n    public static final int SUCCESS_200 = 200;\n\n    \n                                                   \n          \n\n    public static final int INVALID_PARAMETERS = 4000001;\n\n    public static final int SYSTEM_CONFIGURATION_NOT_FOUND = 4004208;\n\n    public static final int TRANSACTION_NOT_FOUND = 4001210;\n\n    public static final int TRANSACTION_NOT_EXIST = 4001218;\n\n    public static final int TRANSACTION_MUST_NOT_REFUND = 4001212;\n\n    public static final int TRANSACTION_NOT_SUCCESS = 4001213;\n\n    public static final int TRANSACTION_NOT_ENOUGH_AMOUNT = 4001214;\n\n    public static final int HTTP_CONNECTION_ERROR  = 4009000;\n\n    public static final int NULL_META_DATA_RESPONSE  = 4009001;\n\n    \n                                                   \n          \n\n    public static final int UNAUTHORIZED = 4010001;\n    public static final int USERNAME_PASSWORD_WRONG = 4010002;\n\n    \n                                                   \n          \n\n    public static final int FORBIDDEN_ERROR = 4030001;\n\n    \n                                                    \n          \n\n    public static final int NOT_FOUND = 4040001;\n    public static final int QUIZ_NOT_FOUND = 4040002;\n    public static final int QUIZ_ATTEMPT_NOT_FOUND = 4040003;\n    public static final int QUIZ_ATTEMPT_SUBMITTED = 4040004;\n    public static final int QUESTION_DOES_NOT_BELONG_TO_QUIZ = 4040005;\n    public static final int QUESTION_NOT_FOUND = 4040006;\n    public static final int QUIZ_ATTEMPT_NOT_BELONG_TO_USER = 4040007;\n    public static final int QUIZ_TIME_LIMIT_EXCEEDED = 4040008;\n    public static final int QUIZ_NOT_SAVED = 4040009;\n    public static final int GET_PRONUNCIATION_SAMPLE_ERROR = 4040010;\n    public static final int GET_PRONUNCIATION_ACCURACY_ERROR = 4040011;\n\n                                    \n    public static final int INVALID_VA_NUMBER = 40010525;\n\n    \n                                                   \n          \n\n    public static final int INTERNAL_SERVER_ERROR = 5001001;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.constant.ErrorConstant.ErrorConstant()",
        "body": "private ErrorConstant() {}",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "PronunciationLevel",
    "full_class_name": "com.edu.onestudy.constant.PronunciationLevel",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\PronunciationLevel.java",
    "content": "@Getter\npublic enum PronunciationLevel {\n    HARD(\"3\"),\n    MEDIUM(\"2\"),\n    EASY(\"1\"),\n    RANDOM(\"0\"),\n    ;\n\n    private final String value;\n\n    PronunciationLevel(String value) {\n        this.value = value;\n    }\n\n    public static PronunciationLevel fromLevel(String level) {\n        for (PronunciationLevel pronunciationLevel : values()) {\n            if (pronunciationLevel.getValue().equals(level)) {\n                return pronunciationLevel;\n            }\n        }\n        throw new IllegalArgumentException(\"Unknown level: \" + level);\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "QuestionType",
    "full_class_name": "com.edu.onestudy.constant.QuestionType",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\QuestionType.java",
    "content": "@Getter\npublic enum QuestionType {\n    MULTIPLE_CHOICE(\"multiple-choice\"),\n    PRONUNCIATION(\"pronunciation\"),\n    FILL_IN_THE_BLANK(\"fill-in-the-blank\"),\n    TRUE_FALSE(\"true-false\"),\n    LISTENING(\"listening\");\n\n    private final String value;\n\n    QuestionType(String value) {\n        this.value = value;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "QuizNavigationMode",
    "full_class_name": "com.edu.onestudy.constant.QuizNavigationMode",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\QuizNavigationMode.java",
    "content": "@Getter\npublic enum QuizNavigationMode {\n    SEQUENTIAL(\"sequential\"),\n    BACK_ONLY(\"back-only\"),\n    FREE_NAVIGATION(\"free-navigation\");\n\n    private final String value;\n\n    QuizNavigationMode(String value) {\n        this.value = value;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "QuizStatus",
    "full_class_name": "com.edu.onestudy.constant.QuizStatus",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\QuizStatus.java",
    "content": "public enum QuizStatus {\n    DRAFT,\n    PUBLIC,\n    PRIVATE\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "Symbol",
    "full_class_name": "com.edu.onestudy.constant.Symbol",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\Symbol.java",
    "content": "public class Symbol {\n    public static final String BACK_SLASH = \"\\\\\";\n    public static final String B_SLASH = \"/\";\n    public static final String ARRAY_OF_OBJECTS_START = \"[{\";\n    public static final String UNDERSCORE = \"_\";\n    public static final String COLON = \":\";\n    public static final String COMMA = \",\";\n    public static final String COMMA_SPACE= \", \";\n    public static final char PLUS = '+';\n    public static final char MINUS = '-';\n    public static final String EQUAL = \"=\";\n    public static final String VN_CURRENCY = \"đồng\";\n    public static final String SPACE = \" \";\n    public static final String AT_SIGN = \"@\";\n    public static final String LOGICAL_AND = \"&&\";\n    public static final String OPEN_BRACKET = \"[\";\n    public static final String CLOSE_BRACKET = \"]\";\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "RequestKeyConstant",
    "full_class_name": "com.edu.onestudy.constant.RequestKeyConstant",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\RequestKeyConstant.java",
    "content": "public class RequestKeyConstant {\n\n    private RequestKeyConstant() {}\n\n    public static final String REQUEST_ID = \"request_id\";\n\n    public static final String THREAD_REQUEST_ID = \"requestId\";\n\n    public static final String REQUEST_PARAMETERS = \"request_parameters\";\n\n    public static final String REQUEST_BODY = \"request_body\";\n\n    public static final String URI = \"uri\";\n\n    public static final String X_REQUEST_ID = \"X-Request-ID\";\n\n    public static final String CONTENT_TYPE = \"Content-Type\";\n\n    public static final String USER_AGENT = \"User-Agent\";\n\n    public static final String X_API_KEY = \"x-api-key\";\n\n    public static final String X_API_SECRET = \"x-api-secret\";\n\n    public static final String API_KEY = \"api_key\";\n\n    public static final String API_SECRET = \"api_secret\";\n\n    public static final String AUTHORIZATION = \"Authorization\";\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.constant.RequestKeyConstant.RequestKeyConstant()",
        "body": "private RequestKeyConstant() {}",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "BaseCreateUpdateResponse",
    "full_class_name": "com.edu.onestudy.dto.BaseCreateUpdateResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\BaseCreateUpdateResponse.java",
    "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class BaseCreateUpdateResponse {\n\n    private String id;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "UserRole",
    "full_class_name": "com.edu.onestudy.constant.UserRole",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\UserRole.java",
    "content": "public enum UserRole {\n    USER,\n    ADMIN\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "UrlConstant",
    "full_class_name": "com.edu.onestudy.constant.UrlConstant",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\UrlConstant.java",
    "content": "public class UrlConstant {\n\n    private UrlConstant() {}\n\n    public static final String HEALTH_CHECK_URL = \"/actuator/health\";\n\n    public enum TransactionLogClientServiceApi {\n        GET_TRANSACTION(\"internal/transaction-history/v1/transactions/\"),\n        GET_LIST_TRANSACTION(\"internal/transaction-history/v1/transaction-filters\"),\n        ;\n\n        private String value;\n\n        private TransactionLogClientServiceApi(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.constant.UrlConstant.UrlConstant()",
        "body": "private UrlConstant() {}",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.constant",
    "class_name": "TransactionLogClientServiceApi",
    "full_class_name": "com.edu.onestudy.constant.UrlConstant.TransactionLogClientServiceApi",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\constant\\UrlConstant.java",
    "content": "public enum TransactionLogClientServiceApi {\n        GET_TRANSACTION(\"internal/transaction-history/v1/transactions/\"),\n        GET_LIST_TRANSACTION(\"internal/transaction-history/v1/transaction-filters\"),\n        ;\n\n        private String value;\n\n        private TransactionLogClientServiceApi(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.edu.onestudy.constant.UrlConstant"
    ],
    "is_nested": true,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "BasicCreationResponse",
    "full_class_name": "com.edu.onestudy.dto.BasicCreationResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\BasicCreationResponse.java",
    "content": "@Data\n@Builder\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicCreationResponse {\n\n    private String id;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "ErrorViolation",
    "full_class_name": "com.edu.onestudy.dto.ErrorViolation",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\ErrorViolation.java",
    "content": "@Data\n@Accessors(chain = true)\n@AllArgsConstructor\n@NoArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@SuperBuilder\npublic class ErrorViolation {\n\n    private String field;\n\n    private String code;\n\n    private String description;\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "FillInBlanks",
    "full_class_name": "com.edu.onestudy.entity.FillInBlanks",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\FillInBlanks.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class FillInBlanks {\n\n    private List<String> correctBlanks;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "LeaderboardEntry",
    "full_class_name": "com.edu.onestudy.entity.LeaderboardEntry",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\LeaderboardEntry.java",
    "content": "@Entity\n@Table(name = \"leaderboard\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@IdClass(LeaderboardEntryId.class)\npublic class LeaderboardEntry {\n\n    @Id\n    @Column(name = \"quiz_id\", nullable = false)\n    private UUID quizId;\n\n    @Id\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n    @Column(name = \"score\", precision = 5, scale = 2)\n    private BigDecimal score;\n\n    @Column(name = \"completion_time\")\n    private Integer completionTime;\n\n    @Column(name = \"accuracy\", precision = 3, scale = 2)\n    private BigDecimal accuracy;\n\n    @Column(name = \"attempts\")\n    private Integer attempts;\n\n    @Column(name = \"last_attempt\")\n    private LocalDateTime lastAttempt;\n\n    @Column(name = \"rank\")\n    private Integer rank;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Transient\n    private Quiz quiz;\n\n    @Transient\n    private User user;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy",
    "class_name": "OneStudyApplication",
    "full_class_name": "com.edu.onestudy.OneStudyApplication",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\OneStudyApplication.java",
    "content": "@SpringBootApplication\n@PropertySource(value = \"classpath:errors.properties\", encoding = \"UTF-8\")\n@ComponentScan(\"com.edu\")\n@EnableCaching\n@EnableAspectJAutoProxy\n@EnableFeignClients(basePackages = \"com.edu.onestudy.thirdparty\")\npublic class OneStudyApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(OneStudyApplication.class, args);\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.OneStudyApplication.main(String[] args)",
        "body": "public static void main(String[] args) {\n        SpringApplication.run(OneStudyApplication.class, args);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "Question",
    "full_class_name": "com.edu.onestudy.entity.Question",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\Question.java",
    "content": "@Entity\n@Table(name = \"questions\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Question {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @Column(name = \"id\")\n    private UUID id;\n\n    @Column(name = \"quiz_id\")\n    private UUID quizId;\n\n    @Column(name = \"type\")\n    private String type;\n\n    @Column(name = \"text\")\n    private String text;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"options\", columnDefinition = \"jsonb\")\n    private List<QuestionOption> options;\n\n    @Column(name = \"pronunciation_text\")\n    private String pronunciationText;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"fill_in_blanks\", columnDefinition = \"jsonb\")\n    private List<String> correctBlanks;\n\n    @Column(name = \"true_false_answer\")\n    private Boolean trueFalseAnswer;\n\n    @Column(name = \"audio_url\")\n    private String audioUrl;\n\n    @Column(name = \"image_url\")\n    private String imageUrl;\n\n    @Column(name = \"max_listening_time\")\n    private Integer maxListeningTime;\n\n    @Column(name = \"correct_answer\", columnDefinition = \"text[]\")\n    @Type(ListArrayType.class)\n    private List<String> correctAnswer = new ArrayList<>();\n\n    @Column(name = \"explanation\")\n    private String explanation;\n\n    @Column(name = \"points\")\n    private Integer points;\n\n    @Column(name = \"time_limit\")\n    private Integer timeLimit;\n\n    @Column(name = \"difficulty\")\n    private String difficulty;\n\n    @Column(name = \"category\")\n    private String category;\n\n    @Column(name = \"accept_rate\")\n    private Integer acceptRate;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Transient\n    private Quiz quiz;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "QuestionOption",
    "full_class_name": "com.edu.onestudy.entity.QuestionOption",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\QuestionOption.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuestionOption {\n\n    private UUID id;\n\n    private Boolean isCorrect;\n\n    private String text;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "Quiz",
    "full_class_name": "com.edu.onestudy.entity.Quiz",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\Quiz.java",
    "content": "@Entity\n@Table(name = \"quizzes\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Quiz {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"title\")\n    private String title;\n\n    @Column(name = \"description\")\n    private String description;\n\n    @Column(name = \"category\")\n    private String category;\n\n    @Column(name = \"difficulty\")\n    private String difficulty;\n\n    @Column(name = \"duration\")\n    private Integer duration;\n\n    @Column(name = \"question_count\")\n    private Integer questionCount = 0;\n\n    @Column(name = \"tags\", columnDefinition = \"text[]\")\n    @Type(ListArrayType.class)\n    private List<String> tags = new ArrayList<>();\n\n    @Column(name = \"status\")\n    @Enumerated(EnumType.STRING)\n    private QuizStatus status;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Column(name = \"author_id\") \n    private UUID authorId;\n\n    @Transient\n    private User author;\n\n    @Column(name = \"rating\", precision = 3, scale = 2)\n    private BigDecimal rating = BigDecimal.valueOf(0.00);\n\n    @Column(name = \"attempts\")\n    private Integer attempts = 0;\n\n    @Column(name = \"passing_score\")\n    private Integer passingScore;\n\n    @Column(name = \"navigation_mode\")\n    private String navigationMode;\n\n    @Column(name = \"has_timer\")\n    private Boolean hasTimer = false;\n\n    @Column(name = \"time_limit\")\n    private Integer timeLimit;\n\n    @Column(name = \"warning_time\")\n    private Integer warningTime;\n\n    @Column(name = \"allow_question_picker\")\n    private Boolean allowQuestionPicker = false;\n\n    @Column(name = \"shuffle_questions\")\n    private Boolean shuffleQuestions = false;\n\n    @Column(name = \"shuffle_answers\")\n    private Boolean shuffleAnswers = false;\n\n    @Column(name = \"show_progress\")\n    private Boolean showProgress = false;\n\n    @Column(name = \"allow_pause\")\n    private Boolean allowPause = false;\n\n    @Column(name = \"max_attempts\")\n    private Integer maxAttempts;\n\n    @Transient\n    private Set<Question> questions;\n\n    @Transient\n    private Set<QuizAttempt> quizAttempts;\n\n    @Transient\n    private Set<User> savedByUsers;\n\n    @Transient\n    private Set<LeaderboardEntry> leaderboardEntries;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "QuizAnswer",
    "full_class_name": "com.edu.onestudy.entity.QuizAnswer",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\QuizAnswer.java",
    "content": "@Entity\n@Table(name = \"quiz_answers\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuizAnswer {\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"quiz_attempt_id\", nullable = false)\n    private UUID quizAttemptId;\n\n    @Column(name = \"question_id\", nullable = false)\n    private UUID questionId;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"selected_answers\", columnDefinition = \"jsonb\")\n    private List<QuestionOption> selectedAnswers;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"fill_in_blanks_answers\", columnDefinition = \"jsonb\")\n    private List<String> fillInBlanksAnswers;\n\n    @Column(name = \"answer_text\")\n    private String answerText;\n\n    @Column(name = \"is_correct\")\n    private boolean isCorrect;\n\n    @Column(name = \"score_achieved\")\n    private Integer scoreAchieved;\n\n    @Column(name = \"time_taken\")\n    private Integer timeTaken;\n\n    @Column(name = \"audio_url\")\n    private String audioUrl;\n\n    @CreationTimestamp\n    @Column(name = \"answered_at\")\n    private LocalDateTime answeredAt;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "QuizAttempt",
    "full_class_name": "com.edu.onestudy.entity.QuizAttempt",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\QuizAttempt.java",
    "content": "@Entity\n@Table(name = \"quiz_attempts\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class QuizAttempt {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"quiz_id\", nullable = false)\n    private UUID quizId;\n\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n    @Transient\n    private Quiz quiz;\n\n    @Transient\n    private User user;\n\n    @Transient\n    private List<QuizAnswer> answers;\n\n    @Column(name = \"score\", precision = 5, scale = 2)\n    private BigDecimal score;\n\n    @Column(name = \"total_questions\")\n    private Integer totalQuestions;\n\n    @Column(name = \"correct_answers\")\n    private Integer correctAnswers;\n\n    @Column(name = \"time_spent\")\n    private Long timeSpent;\n\n    @Column(name = \"completed_at\")\n    private LocalDateTime completedAt;\n\n    @Column(name = \"passed\")\n    private Boolean passed;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @Column(name = \"created_at\")\n    @CreationTimestamp\n    private LocalDateTime createdAt;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "Resource",
    "full_class_name": "com.edu.onestudy.entity.Resource",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\Resource.java",
    "content": "@Entity\n@Table(name = \"resources\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Resource {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\")\n    private UUID id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"path\")\n    private String path; \n\n    @Column(name = \"url\")\n    private String url;\n\n    @Column(name = \"owner_id\")\n    private UUID ownerId; \n\n    @Column(name = \"extension\")\n    private String extension; \n\n    @Column(name = \"size_bytes\")\n    private Long sizeBytes;\n\n    @Column(name = \"cloud_id\")\n    private String cloudId; \n\n    @Column(name = \"uploaded_at\")\n    private LocalDateTime uploadedAt;\n\n    @Column(name = \"last_modified_at\")\n    private LocalDateTime lastModifiedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n    @JdbcTypeCode(SqlTypes.JSON)\n    @Column(name = \"metadata\", columnDefinition = \"jsonb\")\n    private String metadata;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "User",
    "full_class_name": "com.edu.onestudy.entity.User",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\User.java",
    "content": "@Entity\n@Table(name = \"users\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false, nullable = false)\n    private UUID id;\n\n    @Column(name = \"username\", nullable = false, unique = true)\n    private String username;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @Column(name = \"email\", nullable = false, unique = true)\n    private String email;\n\n    @Column(name = \"avatar\")\n    private String avatar;\n\n    @CreationTimestamp\n    @Column(name = \"joined_at\")\n    private LocalDateTime joinedAt;\n\n    @Column(name = \"last_login_at\")\n    private LocalDateTime lastLoginAt;\n\n    @Column(name = \"is_active\")\n    private Boolean isActive = true;\n\n    @Column(name = \"role\", nullable = false)\n    @Enumerated(EnumType.STRING)\n    private UserRole role;\n\n    @Transient\n    private UserCredential credentials;\n\n    @Transient\n    private Set<Quiz> createdQuizzes;\n\n    @Transient\n    private Set<QuizAttempt> quizAttempts;\n\n    @Transient\n    private Set<Quiz> savedQuizzes;\n\n    @Transient\n    private Set<LeaderboardEntry> leaderboardEntries;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "UserCredential",
    "full_class_name": "com.edu.onestudy.entity.UserCredential",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\UserCredential.java",
    "content": "@Entity\n@Table(name = \"user_credentials\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class UserCredential {\n\n    @Id\n    @Column(name = \"user_id\", updatable = false, nullable = false)\n    private UUID userId;\n\n    @Transient\n    private User user;\n\n    @Column(name = \"password_hash\", nullable = false)\n    private String passwordHash;\n\n    @CreationTimestamp\n    @Column(name = \"last_password_change_at\")\n    private LocalDateTime lastPasswordChangeAt;\n\n    @Column(name = \"failed_login_attempts\")\n    private Integer failedLoginAttempts = 0;\n\n    @Column(name = \"locked_until\")\n    private LocalDateTime lockedUntil;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "UserSavedQuiz",
    "full_class_name": "com.edu.onestudy.entity.UserSavedQuiz",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\UserSavedQuiz.java",
    "content": "@Entity\n@Table(name = \"user_saved_quizzes\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@IdClass(UserSavedQuizId.class)\npublic class UserSavedQuiz {\n\n    @Id\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n    @Id\n    @Column(name = \"quiz_id\", nullable = false)\n    private UUID quizId;\n\n    @Transient\n    private User user;\n    @Transient\n    private Quiz quiz;\n\n    @CreationTimestamp\n    @Column(name = \"saved_at\", updatable = false)\n    private LocalDateTime savedAt;\n\n    @Column(name = \"deleted_at\")\n    private LocalDateTime deletedAt;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "BasicRequestList",
    "full_class_name": "com.edu.onestudy.dto.BasicRequestList",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\BasicRequestList.java",
    "content": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@SuperBuilder\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicRequestList extends BasicRequest {\n\n    private static final long serialVersionUID = -2411435498386121564L;\n\n    @NotNull(message = \"page_index must not be null!\")\n    private Long pageIndex;\n\n    private Long pageStart;\n\n    @NotNull(message = \"page_size must not be null!\")\n    private Long pageSize;\n\n    private Long totalItems;\n\n    public BasicRequestList(Long totalItems, String requestId) {\n        this.setTotalItems(totalItems);\n        this.setRequestId(requestId);\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.dto.BasicRequestList.BasicRequestList(Long totalItems, String requestId)",
        "body": "public BasicRequestList(Long totalItems, String requestId) {\n        this.setTotalItems(totalItems);\n        this.setRequestId(requestId);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BasicRequestList.setTotalItems(Long totalItems)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BasicRequest.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "BasicRequest",
    "full_class_name": "com.edu.onestudy.dto.BasicRequest",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\BasicRequest.java",
    "content": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@SuperBuilder\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicRequest implements Serializable {\n\n    private static final long serialVersionUID = 1606619939033520333L;\n\n    private String requestId;\n\n    private String uri;\n\n    private String opsUserEmail;\n\n    private String opsUserId;\n\n    private String opsUsername;\n\n    private List<String> manageMerchants;\n\n    private List<String> branchCodes;\n\n    public boolean isValidByManageMerchants(String merchantCode) {\n        if (StringUtils.isBlank(merchantCode)) {\n            return true;\n        }\n\n        return new HashSet<>(manageMerchants).contains(merchantCode);\n    }\n\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.dto.BasicRequest.isValidByManageMerchants(String merchantCode)",
        "body": "public boolean isValidByManageMerchants(String merchantCode) {\n        if (StringUtils.isBlank(merchantCode)) {\n            return true;\n        }\n\n        return new HashSet<>(manageMerchants).contains(merchantCode);\n    }",
        "method_calls": [
          {
            "name": "io.micrometer.common.util.StringUtils.isBlank(@Nullable String string)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.isValidByManageMerchants(String merchantCode)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "Meta",
    "full_class_name": "com.edu.onestudy.dto.Meta",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\Meta.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@SuperBuilder\npublic class Meta {\n\n    private Integer code;\n\n    private Long pageIndex;\n\n    private Long pageSize;\n\n    private Long totalItems;\n\n    private List<ErrorViolation> errors;\n\n    private String message;\n\n    private String requestId;\n\n\n    public Meta(String requestId, int code, Long pageIndex, Long pageSize, long totalItems) {\n        this.requestId = requestId;\n        this.code = code;\n        this.pageSize = pageSize;\n        this.pageIndex = pageIndex;\n        this.totalItems = totalItems;\n    }\n\n\n    public Meta(String requestId, int code, String message) {\n        this.requestId = requestId;\n        this.code = code;\n        this.message = message;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.dto.Meta.Meta(String requestId, int code, Long pageIndex, Long pageSize, long totalItems)",
        "body": "public Meta(String requestId, int code, Long pageIndex, Long pageSize, long totalItems) {\n        this.requestId = requestId;\n        this.code = code;\n        this.pageSize = pageSize;\n        this.pageIndex = pageIndex;\n        this.totalItems = totalItems;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Long pageSize",
          "Integer code",
          "String requestId",
          "Long totalItems",
          "Long pageIndex"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.Meta.Meta(String requestId, int code, String message)",
        "body": "public Meta(String requestId, int code, String message) {\n        this.requestId = requestId;\n        this.code = code;\n        this.message = message;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String requestId",
          "String message",
          "Integer code"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "LeaderboardEntryId",
    "full_class_name": "com.edu.onestudy.entity.LeaderboardEntryId",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\LeaderboardEntryId.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class LeaderboardEntryId implements Serializable {\n    private UUID quizId;\n    private UUID userId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        LeaderboardEntryId that = (LeaderboardEntryId) o;\n        return Objects.equals(quizId, that.quizId) &&\n                Objects.equals(userId, that.userId);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(quizId, userId);\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.entity.LeaderboardEntryId.equals(Object o)",
        "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        LeaderboardEntryId that = (LeaderboardEntryId) o;\n        return Objects.equals(quizId, that.quizId) &&\n                Objects.equals(userId, that.userId);\n    }",
        "method_calls": [],
        "used_types": [
          "com.edu.onestudy.entity.LeaderboardEntryId"
        ],
        "field_access": [
          "UUID userId",
          "UUID quizId"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.equals(Object o)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.entity.LeaderboardEntryId.hashCode()",
        "body": "@Override\n    public int hashCode() {\n        return Objects.hash(quizId, userId);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.hashCode()"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.config",
    "class_name": "AwsS3Config",
    "full_class_name": "com.edu.onestudy.config.AwsS3Config",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\config\\AwsS3Config.java",
    "content": "@Configuration\npublic class AwsS3Config {\n    @Value(\"${aws.accessKey}\")\n    private String accessKey;\n\n    @Value(\"${aws.secretKey}\")\n    private String secretKey;\n\n    @Value(\"${aws.region}\")\n    private String region;\n\n    @Bean\n    public S3Client getS3Client() {\n        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);\n\n        return S3Client.builder()\n                .region(Region.of(region))\n                .credentialsProvider(StaticCredentialsProvider.create(credentials))\n                .build();\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.config.AwsS3Config.getS3Client()",
        "body": "@Bean\n    public S3Client getS3Client() {\n        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);\n\n        return S3Client.builder()\n                .region(Region.of(region))\n                .credentialsProvider(StaticCredentialsProvider.create(credentials))\n                .build();\n    }",
        "method_calls": [
          {
            "name": "software.amazon.awssdk.auth.credentials.AwsBasicCredentials.create(String accessKeyId, String secretAccessKey)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.S3Client.builder()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.awscore.client.builder.AwsClientBuilder.region(Region region)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.regions.Region.of(String value)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.awscore.client.builder.AwsClientBuilder.credentialsProvider(AwsCredentialsProvider credentialsProvider)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.auth.credentials.StaticCredentialsProvider.create(AwsCredentials credentials)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.utils.builder.SdkBuilder.build()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.auth-2.25.10.jar\\software.amazon.awssdk.auth.credentials\\AwsBasicCredentials.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.entity",
    "class_name": "UserSavedQuizId",
    "full_class_name": "com.edu.onestudy.entity.UserSavedQuizId",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\entity\\UserSavedQuizId.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class UserSavedQuizId implements Serializable {\n    private UUID userId;\n    private UUID quizId;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        UserSavedQuizId that = (UserSavedQuizId) o;\n        return Objects.equals(userId, that.userId) &&\n                Objects.equals(quizId, that.quizId);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(userId, quizId);\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.entity.UserSavedQuizId.equals(Object o)",
        "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        UserSavedQuizId that = (UserSavedQuizId) o;\n        return Objects.equals(userId, that.userId) &&\n                Objects.equals(quizId, that.quizId);\n    }",
        "method_calls": [],
        "used_types": [
          "com.edu.onestudy.entity.UserSavedQuizId"
        ],
        "field_access": [
          "UUID userId",
          "UUID quizId"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.equals(Object o)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.entity.UserSavedQuizId.hashCode()",
        "body": "@Override\n    public int hashCode() {\n        return Objects.hash(userId, quizId);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.hashCode()"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.mapper",
    "class_name": "PronunciationMapper",
    "full_class_name": "com.edu.onestudy.mapper.PronunciationMapper",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\mapper\\PronunciationMapper.java",
    "content": "@Mapper(componentModel = \"spring\")\npublic interface PronunciationMapper {\n\n    @Mapping(target = \"transcript\", source = \"customText\")\n    GetSampleRequest toSampleRequest(GetSampleRequestDto req);\n\n    GetPronunciationSampleResponseDto toGetPronunciationSampleResponseDto(GetSampleResponse response);\n\n    PronunciationAccuracyRequest toPronunciationAccuracyRequest(PronunciationAccuracyRequestDto req);\n\n    PronunciationAccuracyResponseDto toPronunciationAccuracyResponseDto(PronunciationAccuracyResponse response);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.mapper.PronunciationMapper.toSampleRequest(GetSampleRequestDto req)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.PronunciationMapper.toGetPronunciationSampleResponseDto(GetSampleResponse response)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.PronunciationMapper.toPronunciationAccuracyRequest(PronunciationAccuracyRequestDto req)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.PronunciationMapper.toPronunciationAccuracyResponseDto(PronunciationAccuracyResponse response)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.mapper",
    "class_name": "QuestionMapper",
    "full_class_name": "com.edu.onestudy.mapper.QuestionMapper",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\mapper\\QuestionMapper.java",
    "content": "@Mapper(componentModel = \"spring\")\npublic interface QuestionMapper {\n\n    Question questionDtoToQuestion(QuestionDto dto);\n\n    @Mapping(target = \"createdAt\", ignore = true)\n    @Mapping(target = \"id\", ignore = true)\n    void updateQuestionFromDto(QuestionDto dto, @MappingTarget Question entity);\n\n    QuestionOption optionDtoToOption(OptionDto dto);\n\n    void updateOptionFromDto(OptionDto dto, @MappingTarget QuestionOption entity);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.mapper.QuestionMapper.questionDtoToQuestion(QuestionDto dto)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.QuestionMapper.updateQuestionFromDto(QuestionDto dto, @MappingTarget Question entity)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.QuestionMapper.optionDtoToOption(OptionDto dto)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.QuestionMapper.updateOptionFromDto(OptionDto dto, @MappingTarget QuestionOption entity)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.mapper",
    "class_name": "QuizMapper",
    "full_class_name": "com.edu.onestudy.mapper.QuizMapper",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\mapper\\QuizMapper.java",
    "content": "@Mapper(componentModel = \"spring\")\npublic interface QuizMapper {\n\n    Quiz createQuizDtoToQuiz(CreateQuizDto request);\n\n    @Mapping(target = \"createdAt\", ignore = true)\n    @Mapping(target = \"id\", ignore = true)\n    void updateQuizFromDto(CreateQuizDto dto, @MappingTarget Quiz entity);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.mapper.QuizMapper.createQuizDtoToQuiz(CreateQuizDto request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.QuizMapper.updateQuizFromDto(CreateQuizDto dto, @MappingTarget Quiz entity)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.mapper",
    "class_name": "UserMapper",
    "full_class_name": "com.edu.onestudy.mapper.UserMapper",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\mapper\\UserMapper.java",
    "content": "@Mapper(componentModel = \"spring\")\npublic interface UserMapper {\n\n    User authRegisterRequestToUser(AuthRegisterRequest request);\n\n    AuthProfileResponse userToAuthProfileResponse(User user);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.mapper.UserMapper.authRegisterRequestToUser(AuthRegisterRequest request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.mapper.UserMapper.userToAuthProfileResponse(User user)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "QuestionRepository",
    "full_class_name": "com.edu.onestudy.repository.QuestionRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\QuestionRepository.java",
    "content": "public interface QuestionRepository {\n\n    Question save(Question question);\n\n    Optional<Question> findById(String id);\n\n    List<Question> findByQuizId(String quizId);\n\n    void saveAll(List<Question> questions);\n\n    void deleteAll(List<Question> questions);\n\n    Integer countByQuizId(String quizId);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.QuestionRepository.save(Question question)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuestionRepository.findById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuestionRepository.findByQuizId(String quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuestionRepository.saveAll(List<Question> questions)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuestionRepository.deleteAll(List<Question> questions)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuestionRepository.countByQuizId(String quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "QuizAnswerRepository",
    "full_class_name": "com.edu.onestudy.repository.QuizAnswerRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\QuizAnswerRepository.java",
    "content": "public interface QuizAnswerRepository {\n\n    QuizAnswer save(QuizAnswer answer);\n\n    void saveAll(List<QuizAnswer> answers);\n\n    Optional<QuizAnswer> findById(String id);\n\n    List<QuizAnswer> findByQuizAttemptId(String attemptId);\n\n    void delete(QuizAnswer oldAnswer);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.QuizAnswerRepository.save(QuizAnswer answer)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAnswerRepository.saveAll(List<QuizAnswer> answers)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAnswerRepository.findById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAnswerRepository.findByQuizAttemptId(String attemptId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAnswerRepository.delete(QuizAnswer oldAnswer)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "QuizAttemptRepository",
    "full_class_name": "com.edu.onestudy.repository.QuizAttemptRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\QuizAttemptRepository.java",
    "content": "public interface QuizAttemptRepository {\n\n    QuizAttempt save(QuizAttempt attempt);\n\n    Optional<QuizAttempt> findById(String id);\n\n    List<QuizAttempt> findAll();\n\n    List<QuizAttempt> findByUserId(UUID id);\n\n    List<QuizAttempt> findByQuizId(String id);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.QuizAttemptRepository.save(QuizAttempt attempt)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAttemptRepository.findById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAttemptRepository.findAll()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAttemptRepository.findByUserId(UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizAttemptRepository.findByQuizId(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "QuizRepository",
    "full_class_name": "com.edu.onestudy.repository.QuizRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\QuizRepository.java",
    "content": "public interface QuizRepository {\n\n    void save(Quiz quiz);\n\n    Optional<Quiz> findById(String id);\n\n    List<Quiz> findAll();\n\n    List<Quiz> findByUserId(UUID id);\n\n    List<Quiz> findByIdIn(Set<String> quizId);\n\n    List<Quiz> findAllPublic();\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.QuizRepository.save(Quiz quiz)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizRepository.findAll()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizRepository.findByUserId(UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizRepository.findByIdIn(Set<String> quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.QuizRepository.findAllPublic()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "ResourceRepository",
    "full_class_name": "com.edu.onestudy.repository.ResourceRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\ResourceRepository.java",
    "content": "public interface ResourceRepository {\n\n    Resource save(Resource resource);\n\n    Resource findById(String id);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.ResourceRepository.save(Resource resource)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.ResourceRepository.findById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "SavedQuizRepository",
    "full_class_name": "com.edu.onestudy.repository.SavedQuizRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\SavedQuizRepository.java",
    "content": "public interface SavedQuizRepository {\n\n    void saveQuiz(String quizId, String userId);\n\n    List<UserSavedQuiz> findAllByUserId(String userId);\n\n    void deleteByQuizIdAndUserId(String quizId, String userId);\n\n    boolean existsByQuizIdAndUserId(String quizId, String userId);\n\n    List<UserSavedQuiz> findAllByQuizId(String quizId);\n\n    void update(UserSavedQuiz savedQuiz);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.SavedQuizRepository.saveQuiz(String quizId, String userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.SavedQuizRepository.findAllByUserId(String userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.SavedQuizRepository.deleteByQuizIdAndUserId(String quizId, String userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.SavedQuizRepository.existsByQuizIdAndUserId(String quizId, String userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.SavedQuizRepository.findAllByQuizId(String quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.SavedQuizRepository.update(UserSavedQuiz savedQuiz)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository",
    "class_name": "UserRepository",
    "full_class_name": "com.edu.onestudy.repository.UserRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\UserRepository.java",
    "content": "public interface UserRepository {\n\n    Optional<User> getUserById(String userId);\n\n    Optional<User> getByUsername(String username);\n\n    Optional<User> getByUsernameForAuth(String username);\n\n    User persist(User user);\n\n    List<User> getByUserIdList(List<UUID> studentIds);\n\n    List<BasicUserDto> basicSearch(String keyword);\n\n    Optional<User> getByEmail(String username);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.UserRepository.getUserById(String userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.UserRepository.getByUsername(String username)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.UserRepository.getByUsernameForAuth(String username)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.UserRepository.persist(User user)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.UserRepository.getByUserIdList(List<UUID> studentIds)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.UserRepository.basicSearch(String keyword)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.UserRepository.getByEmail(String username)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.config",
    "class_name": "StringListConverter",
    "full_class_name": "com.edu.onestudy.config.StringListConverter",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\config\\StringListConverter.java",
    "content": "@Converter\npublic class StringListConverter implements AttributeConverter<List<String>, String> {\n\n    private static final String SPLIT_CHAR = \",\"; \n\n    @Override\n    public String convertToDatabaseColumn(List<String> stringList) {\n        if (stringList == null || stringList.isEmpty()) {\n            return null;\n        }\n        \n        \n        \n        \n        \n        \n        return \"{\" + String.join(SPLIT_CHAR, stringList) + \"}\";\n    }\n\n    @Override\n    public List<String> convertToEntityAttribute(String string) {\n        if (string == null || string.isEmpty()) {\n            return null;\n        }\n        \n        String cleanedString = string.replaceAll(\"^\\\\{|\\\\}$\", \"\");\n        return Arrays.asList(cleanedString.split(SPLIT_CHAR));\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.jakarta.persistence-api-3.1.0.jar\\jakarta.persistence\\AttributeConverter.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.config.StringListConverter.convertToDatabaseColumn(List<String> stringList)",
        "body": "@Override\n    public String convertToDatabaseColumn(List<String> stringList) {\n        if (stringList == null || stringList.isEmpty()) {\n            return null;\n        }\n        \n        \n        \n        \n        \n        \n        return \"{\" + String.join(SPLIT_CHAR, stringList) + \"}\";\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.jakarta.persistence-api-3.1.0.jar\\jakarta.persistence\\AttributeConverter.class.convertToDatabaseColumn(List<String> stringList)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.config.StringListConverter.convertToEntityAttribute(String string)",
        "body": "@Override\n    public List<String> convertToEntityAttribute(String string) {\n        if (string == null || string.isEmpty()) {\n            return null;\n        }\n        \n        String cleanedString = string.replaceAll(\"^\\\\{|\\\\}$\", \"\");\n        return Arrays.asList(cleanedString.split(SPLIT_CHAR));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.jakarta.persistence-api-3.1.0.jar\\jakarta.persistence\\AttributeConverter.class.convertToEntityAttribute(String string)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.exception",
    "class_name": "BusinessError",
    "full_class_name": "com.edu.onestudy.exception.BusinessError",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\exception\\BusinessError.java",
    "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@SuperBuilder\npublic class BusinessError implements Serializable {\n\n    private static final long serialVersionUID = 2405172041950251807L;\n\n    private int code;\n\n    private String message;\n\n    private HttpStatus httpStatus;\n\n    private Object data;\n\n    public BusinessError(int code, HttpStatus httpStatus) {\n        this.code = code;\n        this.httpStatus = httpStatus;\n    }\n\n    public BusinessError(int code) {\n        this.code = code;\n    }\n\n    public BusinessError(int code, HttpStatus httpStatus, Object data) {\n        this.code = code;\n        this.httpStatus = httpStatus;\n        this.data = data;\n    }\n\n    public BusinessError(int code, Object data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    public BusinessError(int code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public BusinessError(int code, String message, HttpStatus httpStatus) {\n        this.code = code;\n        this.message = message;\n        this.httpStatus = httpStatus;\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.exception.BusinessError.BusinessError(int code, HttpStatus httpStatus)",
        "body": "public BusinessError(int code, HttpStatus httpStatus) {\n        this.code = code;\n        this.httpStatus = httpStatus;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "int code",
          "HttpStatus httpStatus"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessError(int code, HttpStatus httpStatus)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessError.BusinessError(int code)",
        "body": "public BusinessError(int code) {\n        this.code = code;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "int code"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessError(int code)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessError.BusinessError(int code, HttpStatus httpStatus, Object data)",
        "body": "public BusinessError(int code, HttpStatus httpStatus, Object data) {\n        this.code = code;\n        this.httpStatus = httpStatus;\n        this.data = data;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "int code",
          "Object data",
          "HttpStatus httpStatus"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessError(int code, HttpStatus httpStatus, Object data)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessError.BusinessError(int code, Object data)",
        "body": "public BusinessError(int code, Object data) {\n        this.code = code;\n        this.data = data;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "int code",
          "Object data"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessError(int code, Object data)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessError.BusinessError(int code, String message)",
        "body": "public BusinessError(int code, String message) {\n        this.code = code;\n        this.message = message;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "int code",
          "String message"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessError(int code, String message)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessError.BusinessError(int code, String message, HttpStatus httpStatus)",
        "body": "public BusinessError(int code, String message, HttpStatus httpStatus) {\n        this.code = code;\n        this.message = message;\n        this.httpStatus = httpStatus;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "int code",
          "String message",
          "HttpStatus httpStatus"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessError(int code, String message, HttpStatus httpStatus)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.exception",
    "class_name": "BusinessException",
    "full_class_name": "com.edu.onestudy.exception.BusinessException",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\exception\\BusinessException.java",
    "content": "@Getter\n@Builder\npublic class BusinessException extends RuntimeException implements Serializable {\n\n    private static final long serialVersionUID = 1905122041950251207L;\n\n    private final BusinessError error;\n\n    public BusinessException(int code, String message, HttpStatus status) {\n        super(message);\n        this.error = new BusinessError(code, message, status);\n    }\n\n    public BusinessException(int code, HttpStatus status) {\n        this.error = new BusinessError(code, status);\n    }\n\n    public BusinessException(int code) {\n        this.error = new BusinessError(code);\n    }\n\n    public BusinessException(int code, Object data) {\n        this.error = new BusinessError(code, data);\n    }\n\n    public BusinessException(int code, String message) {\n        this.error = new BusinessError(code, message);\n    }\n\n    public BusinessException(BusinessError error) {\n        super(error.getMessage());\n        this.error = error;\n    }\n\n    public BusinessException(BusinessError error, String message) {\n        super(message);\n        this.error = error;\n    }\n\n    public BusinessException(BusinessError error, String message, Throwable cause) {\n        super(message, cause);\n        this.error = error;\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(int code, String message, HttpStatus status)",
        "body": "public BusinessException(int code, String message, HttpStatus status) {\n        super(message);\n        this.error = new BusinessError(code, message, status);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(int code, String message, HttpStatus status)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(int code, HttpStatus status)",
        "body": "public BusinessException(int code, HttpStatus status) {\n        this.error = new BusinessError(code, status);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(int code, HttpStatus status)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(int code)",
        "body": "public BusinessException(int code) {\n        this.error = new BusinessError(code);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(int code)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(int code, Object data)",
        "body": "public BusinessException(int code, Object data) {\n        this.error = new BusinessError(code, data);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(int code, Object data)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(int code, String message)",
        "body": "public BusinessException(int code, String message) {\n        this.error = new BusinessError(code, message);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(int code, String message)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(BusinessError error)",
        "body": "public BusinessException(BusinessError error) {\n        super(error.getMessage());\n        this.error = error;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.exception.BusinessError.getMessage()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(BusinessError error)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(BusinessError error, String message)",
        "body": "public BusinessException(BusinessError error, String message) {\n        super(message);\n        this.error = error;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(BusinessError error, String message)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.BusinessException.BusinessException(BusinessError error, String message, Throwable cause)",
        "body": "public BusinessException(BusinessError error, String message, Throwable cause) {\n        super(message, cause);\n        this.error = error;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BusinessError error"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.java.base\\java.io\\Serializable.class.BusinessException(BusinessError error, String message, Throwable cause)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.security",
    "class_name": "BeanConfig",
    "full_class_name": "com.edu.onestudy.security.BeanConfig",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\security\\BeanConfig.java",
    "content": "@Configuration\npublic class BeanConfig {\n\n    private final UserRepository userRepository;\n\n    public BeanConfig(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        return new AppUserDetailsService(userRepository);\n    }\n\n    @Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider daoAuthProvider = new DaoAuthenticationProvider();\n        daoAuthProvider.setUserDetailsService(userDetailsService());\n        daoAuthProvider.setPasswordEncoder(passwordEncoder());\n\n        return daoAuthProvider;\n    }\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.security.BeanConfig.BeanConfig(UserRepository userRepository)",
        "body": "public BeanConfig(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "UserRepository userRepository"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.BeanConfig.userDetailsService()",
        "body": "@Bean\n    public UserDetailsService userDetailsService() {\n        return new AppUserDetailsService(userRepository);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.BeanConfig.authenticationProvider()",
        "body": "@Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider daoAuthProvider = new DaoAuthenticationProvider();\n        daoAuthProvider.setUserDetailsService(userDetailsService());\n        daoAuthProvider.setPasswordEncoder(passwordEncoder());\n\n        return daoAuthProvider;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.BeanConfig.userDetailsService()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.BeanConfig.passwordEncoder()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.authentication.dao\\DaoAuthenticationProvider.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.BeanConfig.authenticationManager(AuthenticationConfiguration config)",
        "body": "@Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.BeanConfig.passwordEncoder()",
        "body": "@Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.security",
    "class_name": "JwtAuthenticationEntryPoint",
    "full_class_name": "com.edu.onestudy.security.JwtAuthenticationEntryPoint",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\security\\JwtAuthenticationEntryPoint.java",
    "content": "@Component\n@Slf4j\npublic class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        log.error(\"Unauthorized error: {}\", authException.getMessage());\n\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\n        final Map<String, Object> body = new HashMap<>();\n        body.put(\"status\", HttpServletResponse.SC_UNAUTHORIZED);\n        body.put(\"error\", \"Unauthorized\");\n        body.put(\"message\", authException.getMessage());\n        body.put(\"path\", request.getServletPath());\n\n\n\n        final ObjectMapper mapper = new ObjectMapper();\n        mapper.writeValue(response.getOutputStream(), body);\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.spring-security-web-6.5.0.jar\\org.springframework.security.web\\AuthenticationEntryPoint.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.security.JwtAuthenticationEntryPoint.commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)",
        "body": "@Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        log.error(\"Unauthorized error: {}\", authException.getMessage());\n\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\n        final Map<String, Object> body = new HashMap<>();\n        body.put(\"status\", HttpServletResponse.SC_UNAUTHORIZED);\n        body.put(\"error\", \"Unauthorized\");\n        body.put(\"message\", authException.getMessage());\n        body.put(\"path\", request.getServletPath());\n\n\n\n        final ObjectMapper mapper = new ObjectMapper();\n        mapper.writeValue(response.getOutputStream(), body);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jackson-databind-2.19.0.jar\\com.fasterxml.jackson.databind\\ObjectMapper.class"
        ],
        "field_access": [
          "String APPLICATION_JSON_VALUE = \"application/json\"",
          "int SC_UNAUTHORIZED = 401"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-web-6.5.0.jar\\org.springframework.security.web\\AuthenticationEntryPoint.class.commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.filter",
    "class_name": "ApiKeyVerifyRequestWrapper",
    "full_class_name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\filter\\ApiKeyVerifyRequestWrapper.java",
    "content": "public class ApiKeyVerifyRequestWrapper extends HttpServletRequestWrapper {\n\n    private final String body; \n\n    public ApiKeyVerifyRequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n        StringBuilder stringBuilder = new StringBuilder();\n        BufferedReader bufferedReader = null;\n        try (InputStream inputStream = request.getInputStream()) { \n            if (inputStream != null) {\n                \n                bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n                char[] charBuffer = new char[128];\n                int bytesRead;\n                while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {\n                    stringBuilder.append(charBuffer, 0, bytesRead);\n                }\n            }\n        } finally {\n            \n            \n            \n            \n        }\n        body = stringBuilder.toString();\n    }\n\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        \n        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return byteArrayInputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                \n                return byteArrayInputStream.available() == 0;\n            }\n\n            @Override\n            public boolean isReady() {\n                \n                return true; \n            }\n\n            @Override\n            public void setReadListener(ReadListener listener) {\n                \n                \n                \n                \n                \n                \n                \n                \n            }\n        };\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        \n        return new BufferedReader(new InputStreamReader(this.getInputStream(), StandardCharsets.UTF_8));\n    }\n\n    public String getBody() {\n        return body;\n    }\n\n    \n    \n\n    @Override\n    public String getContentType() {\n        String contentType = super.getContentType();\n        \n        \n        return contentType == null ? MediaType.APPLICATION_JSON_VALUE : contentType;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.ApiKeyVerifyRequestWrapper(HttpServletRequest request)",
        "body": "public ApiKeyVerifyRequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n        StringBuilder stringBuilder = new StringBuilder();\n        BufferedReader bufferedReader = null;\n        try (InputStream inputStream = request.getInputStream()) { \n            if (inputStream != null) {\n                \n                bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n                char[] charBuffer = new char[128];\n                int bytesRead;\n                while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {\n                    stringBuilder.append(charBuffer, 0, bytesRead);\n                }\n            }\n        } finally {\n            \n            \n            \n            \n        }\n        body = stringBuilder.toString();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Charset UTF_8"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.getInputStream()",
        "body": "@Override\n    public ServletInputStream getInputStream() throws IOException {\n        \n        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));\n\n        return new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return byteArrayInputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                \n                return byteArrayInputStream.available() == 0;\n            }\n\n            @Override\n            public boolean isReady() {\n                \n                return true; \n            }\n\n            @Override\n            public void setReadListener(ReadListener listener) {\n                \n                \n                \n                \n                \n                \n                \n                \n            }\n        };\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet\\ReadListener.class"
        ],
        "field_access": [
          "Charset UTF_8"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.getReader()",
        "body": "@Override\n    public BufferedReader getReader() throws IOException {\n        \n        return new BufferedReader(new InputStreamReader(this.getInputStream(), StandardCharsets.UTF_8));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.getInputStream()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "Charset UTF_8"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.getBody()",
        "body": "public String getBody() {\n        return body;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.getContentType()",
        "body": "@Override\n    public String getContentType() {\n        String contentType = super.getContentType();\n        \n        \n        return contentType == null ? MediaType.APPLICATION_JSON_VALUE : contentType;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String APPLICATION_JSON_VALUE = \"application/json\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "AuthService",
    "full_class_name": "com.edu.onestudy.service.AuthService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\AuthService.java",
    "content": "public interface AuthService {\n\n    AuthLoginResponse login(AuthLoginRequest request);\n\n    AuthRegisterResponse register(AuthRegisterRequest request);\n\n    AuthProfileResponse getAuthProfile(String email);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.AuthService.login(AuthLoginRequest request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.AuthService.register(AuthRegisterRequest request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.AuthService.getAuthProfile(String email)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "AppUserDetailsService",
    "full_class_name": "com.edu.onestudy.service.AppUserDetailsService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\AppUserDetailsService.java",
    "content": "@Service\n@Slf4j\npublic class AppUserDetailsService implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    public AppUserDetailsService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.getByUsernameForAuth(username).orElseThrow(() -> new BusinessException(ErrorConstant.UNAUTHORIZED));\n\n        return UserPrincipal.from(user);\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetailsService.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.AppUserDetailsService.AppUserDetailsService(UserRepository userRepository)",
        "body": "public AppUserDetailsService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "UserRepository userRepository"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetailsService.class.AppUserDetailsService(UserRepository userRepository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.AppUserDetailsService.loadUserByUsername(String username)",
        "body": "@Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.getByUsernameForAuth(username).orElseThrow(() -> new BusinessException(ErrorConstant.UNAUTHORIZED));\n\n        return UserPrincipal.from(user);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.UserRepository.getByUsernameForAuth(String username)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.from(User user)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.User"
        ],
        "field_access": [
          "int UNAUTHORIZED = 4010001"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetailsService.class.loadUserByUsername(String username)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "PronunciationService",
    "full_class_name": "com.edu.onestudy.service.PronunciationService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\PronunciationService.java",
    "content": "public interface PronunciationService {\n\n    GetPronunciationSampleResponseDto getSample(GetSampleRequestDto request);\n\n    PronunciationAccuracyResponseDto getAccuracy(PronunciationAccuracyRequestDto request);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.PronunciationService.getSample(GetSampleRequestDto request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.PronunciationService.getAccuracy(PronunciationAccuracyRequestDto request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "QuestionService",
    "full_class_name": "com.edu.onestudy.service.QuestionService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\QuestionService.java",
    "content": "public interface QuestionService {\n\n    BaseCreateUpdateResponse createQuestion(QuestionDto request, UUID authorId);\n\n    BaseCreateUpdateResponse updateQuestion(QuestionDto request);\n\n    List<Question> getAllQuestions();\n\n    List<Question> getMyQuestions(UUID id);\n\n    Question getById(String id);\n\n    void deleteQuestion(String id);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.QuestionService.createQuestion(QuestionDto request, UUID authorId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuestionService.updateQuestion(QuestionDto request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuestionService.getAllQuestions()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuestionService.getMyQuestions(UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuestionService.getById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuestionService.deleteQuestion(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "QuizService",
    "full_class_name": "com.edu.onestudy.service.QuizService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\QuizService.java",
    "content": "public interface QuizService {\n\n    BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId);\n\n    BaseCreateUpdateResponse updateQuiz(CreateQuizDto request);\n\n    List<Quiz> getAllPublicQuizzes();\n\n    List<Quiz> getMyQuizzes(UUID id);\n\n    Quiz getById(String id);\n\n    void deleteQuiz(String id);\n\n    BaseCreateUpdateResponse startQuiz(String quizId, UUID userId);\n\n    BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id);\n\n    List<Quiz> getMyQuizAttempts(String string);\n\n    QuizAttempt getAttempt(String attemptId, UUID userId);\n\n    void submitQuizComplete(String attemptId, UUID id);\n\n    Quiz getQuizStatsById(String id);\n\n    void saveQuiz(String quizId, UUID userId);\n\n    List<Quiz> getSavedQuizzes(UUID userId);\n\n    void unsaveQuiz(String quizId, UUID userId);\n\n    List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.QuizService.createQuiz(CreateQuizDto request, UUID authorId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.updateQuiz(CreateQuizDto request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getAllPublicQuizzes()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getMyQuizzes(UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.deleteQuiz(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.startQuiz(String quizId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getMyQuizAttempts(String string)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getAttempt(String attemptId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.submitQuizComplete(String attemptId, UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getQuizStatsById(String id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.saveQuiz(String quizId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getSavedQuizzes(UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.unsaveQuiz(String quizId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.QuizService.getUserSavedQuiz(String quizId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "ResourceService",
    "full_class_name": "com.edu.onestudy.service.ResourceService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\ResourceService.java",
    "content": "public interface ResourceService {\n\n    Resource uploadResource(MultipartFile file, UUID requesterId);\n\n    GetResourceResponse getResource(String id, UUID requesterId);\n\n    File downloadResourceFromUrl(String url);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.ResourceService.uploadResource(MultipartFile file, UUID requesterId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.ResourceService.getResource(String id, UUID requesterId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.ResourceService.downloadResourceFromUrl(String url)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.security",
    "class_name": "UserPrincipal",
    "full_class_name": "com.edu.onestudy.security.UserPrincipal",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\security\\UserPrincipal.java",
    "content": "@Getter\n@Builder\n@Slf4j\n@ToString\npublic class UserPrincipal implements UserDetails {\n    private UUID id;\n    private String username;\n    private String email;\n    private String password;\n    private List<String> roles;\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities(){\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .toList();\n    }\n    public UserPrincipal(UUID id, String username, String email, String password, List<String> roles) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.password = password;\n        this.roles = roles;\n    }\n\n    public static UserPrincipal from(User user) {\n        return UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash())\n                .roles(List.of(user.getRole().toString()))\n                .build();\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.security.UserPrincipal.getAuthorities()",
        "body": "@Override\n    public Collection<? extends GrantedAuthority> getAuthorities(){\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .toList();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.getAuthorities()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipal(UUID id, String username, String email, String password, List<String> roles)",
        "body": "public UserPrincipal(UUID id, String username, String email, String password, List<String> roles) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.password = password;\n        this.roles = roles;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "UUID id",
          "String password",
          "List<String> roles",
          "String email",
          "String username"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.UserPrincipal(UUID id, String username, String email, String password, List<String> roles)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.from(User user)",
        "body": "public static UserPrincipal from(User user) {\n        return UserPrincipal.builder()\n                .id(UUID.fromString(user.getId().toString()))\n                .username(user.getUsername())\n                .email(user.getEmail())\n                .password(user.getCredentials().getPasswordHash())\n                .roles(List.of(user.getRole().toString()))\n                .build();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.UserPrincipal.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipalBuilder.id(UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipalBuilder.username(String username)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getUsername()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipalBuilder.email(String email)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getEmail()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipalBuilder.password(String password)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getCredentials()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserCredential.getPasswordHash()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipalBuilder.roles(List<String> roles)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getRole()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.UserPrincipalBuilder.build()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.from(User user)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.getPassword()",
        "body": "@Override\n    public String getPassword() {\n        return password;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.getPassword()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.getUsername()",
        "body": "@Override\n    public String getUsername() {\n        return username;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.getUsername()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.isAccountNonExpired()",
        "body": "@Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.isAccountNonExpired()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.isAccountNonLocked()",
        "body": "@Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.isAccountNonLocked()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.isCredentialsNonExpired()",
        "body": "@Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.isCredentialsNonExpired()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.UserPrincipal.isEnabled()",
        "body": "@Override\n    public boolean isEnabled() {\n        return true;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core.userdetails\\UserDetails.class.isEnabled()"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.utils",
    "class_name": "FileUtils",
    "full_class_name": "com.edu.onestudy.utils.FileUtils",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\utils\\FileUtils.java",
    "content": "@Slf4j\npublic class FileUtils {\n\n    public static String convertToBase64(File file) {\n        try {\n            byte[] fileContent = Files.readAllBytes(file.toPath());\n            return Base64.getEncoder().encodeToString(fileContent);\n        } catch (Exception e) {\n            log.warn(\"failed to convert file to Base64: {}\", e.getMessage());\n            return null;\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.utils.FileUtils.convertToBase64(File file)",
        "body": "public static String convertToBase64(File file) {\n        try {\n            byte[] fileContent = Files.readAllBytes(file.toPath());\n            return Base64.getEncoder().encodeToString(fileContent);\n        } catch (Exception e) {\n            log.warn(\"failed to convert file to Base64: {}\", e.getMessage());\n            return null;\n        }\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.security",
    "class_name": "JwtFilter",
    "full_class_name": "com.edu.onestudy.security.JwtFilter",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\security\\JwtFilter.java",
    "content": "@Component\n@Slf4j\npublic class JwtFilter extends OncePerRequestFilter {\n\n    private final JwtProvider jwtProvider;\n    private final UserDetailsService userDetailsService;\n\n    private static final String[] PUBLIC_URLS = {\n            \"/api/v1/pub/.*\",\n    };\n\n    public JwtFilter(JwtProvider jwtProvider, UserDetailsService userDetailsService) {\n        this.jwtProvider = jwtProvider;\n        this.userDetailsService = userDetailsService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        final String requestURI = request.getRequestURI();\n\n        boolean isPublicUrl = Arrays.stream(PUBLIC_URLS)\n                .anyMatch(requestURI::matches);\n\n        if (isPublicUrl) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        final String authorizationHeader = request.getHeader(\"Authorization\");\n        String jwt = null;\n        String username = null;\n\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\n            jwt = authorizationHeader.substring(7);\n            try {\n                username = jwtProvider.extractUsername(jwt);\n            } catch (ExpiredJwtException ex) {\n                log.warn(\"JWT token is expired: {}\", ex.getMessage());\n            } catch (MalformedJwtException ex) {\n                log.warn(\"JWT token is malformed: {}\", ex.getMessage());\n            } catch (SignatureException ex) {\n                log.warn(\"JWT signature is invalid: {}\", ex.getMessage());\n            } catch (IllegalArgumentException ex) {\n                log.warn(\"Unable to get JWT Token or JWT claims string is empty: {}\", ex.getMessage());\n            } catch (Exception ex) {\n                log.error(\"An unexpected error occurred during JWT token processing: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            try {\n                UserPrincipal userDetails = (UserPrincipal) this.userDetailsService.loadUserByUsername(username);\n\n                if (jwtProvider.isTokenValid(jwt, userDetails)) {\n                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\n                            userDetails,\n                            null,\n                            userDetails.getAuthorities()\n                    );\n\n                    authToken.setDetails(\n                            new WebAuthenticationDetailsSource().buildDetails(request)\n                    );\n\n                    SecurityContextHolder.getContext().setAuthentication(authToken);\n                } else {\n                    log.warn(\"Invalid JWT token for user: {}\", username);\n                }\n            } catch (Exception ex) {\n                log.error(\"Error authenticating user with JWT: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.security.JwtFilter.JwtFilter(JwtProvider jwtProvider, UserDetailsService userDetailsService)",
        "body": "public JwtFilter(JwtProvider jwtProvider, UserDetailsService userDetailsService) {\n        this.jwtProvider = jwtProvider;\n        this.userDetailsService = userDetailsService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JwtProvider jwtProvider",
          "UserDetailsService userDetailsService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)",
        "body": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        final String requestURI = request.getRequestURI();\n\n        boolean isPublicUrl = Arrays.stream(PUBLIC_URLS)\n                .anyMatch(requestURI::matches);\n\n        if (isPublicUrl) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        final String authorizationHeader = request.getHeader(\"Authorization\");\n        String jwt = null;\n        String username = null;\n\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\n            jwt = authorizationHeader.substring(7);\n            try {\n                username = jwtProvider.extractUsername(jwt);\n            } catch (ExpiredJwtException ex) {\n                log.warn(\"JWT token is expired: {}\", ex.getMessage());\n            } catch (MalformedJwtException ex) {\n                log.warn(\"JWT token is malformed: {}\", ex.getMessage());\n            } catch (SignatureException ex) {\n                log.warn(\"JWT signature is invalid: {}\", ex.getMessage());\n            } catch (IllegalArgumentException ex) {\n                log.warn(\"Unable to get JWT Token or JWT claims string is empty: {}\", ex.getMessage());\n            } catch (Exception ex) {\n                log.error(\"An unexpected error occurred during JWT token processing: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            try {\n                UserPrincipal userDetails = (UserPrincipal) this.userDetailsService.loadUserByUsername(username);\n\n                if (jwtProvider.isTokenValid(jwt, userDetails)) {\n                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\n                            userDetails,\n                            null,\n                            userDetails.getAuthorities()\n                    );\n\n                    authToken.setDetails(\n                            new WebAuthenticationDetailsSource().buildDetails(request)\n                    );\n\n                    SecurityContextHolder.getContext().setAuthentication(authToken);\n                } else {\n                    log.warn(\"Invalid JWT token for user: {}\", username);\n                }\n            } catch (Exception ex) {\n                log.error(\"Error authenticating user with JWT: {}\", ex.getMessage(), ex);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.extractUsername(String token)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.isTokenValid(String token, UserPrincipal userDetails)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getAuthorities()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.authentication\\UsernamePasswordAuthenticationToken.class",
          "com.edu.onestudy.security.UserPrincipal"
        ],
        "field_access": [
          "UserDetailsService userDetailsService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.filter",
    "class_name": "AppCorsFilter",
    "full_class_name": "com.edu.onestudy.filter.AppCorsFilter",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\filter\\AppCorsFilter.java",
    "content": "@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\n@Slf4j \npublic class AppCorsFilter implements Filter {\n\n    \n    \n    \n    \n    private final MultipartResolver multipartResolver;\n\n    \n    \n    \n    \n    public AppCorsFilter(MultipartResolver multipartResolver) {\n        this.multipartResolver = multipartResolver;\n    }\n\n    \n    \n    public AppCorsFilter() {\n        \n        \n        \n        \n        this.multipartResolver = new StandardServletMultipartResolver();\n    }\n\n\n    @Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse response = (HttpServletResponse) res;\n        HttpServletRequest request = (HttpServletRequest) req;\n\n        \n        if (request.getRequestURI().contains(HEALTH_CHECK_URL)) {\n            chain.doFilter(req, res);\n            return;\n        }\n\n        \n        String requestId = UUID.randomUUID().toString(); \n        ThreadContext.put(THREAD_REQUEST_ID, requestId); \n\n        try {\n            \n            boolean isMultipart = multipartResolver.isMultipart(request); \n\n            if (isMultipart) {\n                \n                MultipartHttpServletRequest multipartRequest = multipartResolver.resolveMultipart(request);\n\n                \n                String headerRequestId = multipartRequest.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); \n                }\n\n                \n                multipartRequest.setAttribute(REQUEST_BODY, multipartRequest);\n                multipartRequest.setAttribute(REQUEST_ID, requestId);\n\n                chain.doFilter(multipartRequest, response);\n\n            } else {\n                \n                ApiKeyVerifyRequestWrapper requestWrapper = new ApiKeyVerifyRequestWrapper(request);\n\n                \n                String headerRequestId = requestWrapper.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); \n                }\n\n                \n                JSONObject dataRequest = new JSONObject();\n                String requestBodyString = requestWrapper.getBody();\n                if (!ObjectUtils.isEmpty(requestBodyString)) {\n                    try {\n                        JSONParser parser = new JSONParser();\n                        dataRequest = (JSONObject) parser.parse(requestBodyString);\n                    } catch (ParseException e) {\n                        log.warn(\"Failed to parse request body as JSON for URI: {}. Body: {}\", request.getRequestURI(), requestBodyString, e);\n                        \n                        \n                    }\n                }\n\n                \n                dataRequest.put(REQUEST_ID, requestId);\n                request.setAttribute(REQUEST_ID, requestId); \n\n                dataRequest.put(API_KEY, requestWrapper.getHeader(API_KEY));\n                request.setAttribute(API_KEY, requestWrapper.getHeader(API_KEY));\n\n                dataRequest.put(API_SECRET, requestWrapper.getHeader(API_SECRET));\n                request.setAttribute(API_SECRET, requestWrapper.getHeader(API_SECRET));\n\n                \n                \n                \n                dataRequest.put(URI, request.getRequestURI());\n                request.setAttribute(URI, request.getRequestURI()); \n\n                request.setAttribute(REQUEST_PARAMETERS, request.getParameterMap()); \n                request.setAttribute(REQUEST_BODY, dataRequest); \n\n                \n                \n                \n                \n                \n                \n                \n                \n                \n\n                chain.doFilter(requestWrapper, response);\n            }\n        } catch (IOException | ServletException e) {\n            log.error(\"Filter processing error for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); \n        } catch (Throwable e) { \n            log.error(\"An unexpected error occurred in filter for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        } finally {\n            \n            ThreadContext.clearAll();\n        }\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet\\Filter.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.filter.AppCorsFilter.AppCorsFilter(MultipartResolver multipartResolver)",
        "body": "public AppCorsFilter(MultipartResolver multipartResolver) {\n        this.multipartResolver = multipartResolver;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "MultipartResolver multipartResolver"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet\\Filter.class.AppCorsFilter(MultipartResolver multipartResolver)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.filter.AppCorsFilter.AppCorsFilter()",
        "body": "public AppCorsFilter() {\n        \n        \n        \n        \n        this.multipartResolver = new StandardServletMultipartResolver();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "MultipartResolver multipartResolver"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet\\Filter.class.AppCorsFilter()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.filter.AppCorsFilter.doFilter(ServletRequest req, ServletResponse res, FilterChain chain)",
        "body": "@Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse response = (HttpServletResponse) res;\n        HttpServletRequest request = (HttpServletRequest) req;\n\n        \n        if (request.getRequestURI().contains(HEALTH_CHECK_URL)) {\n            chain.doFilter(req, res);\n            return;\n        }\n\n        \n        String requestId = UUID.randomUUID().toString(); \n        ThreadContext.put(THREAD_REQUEST_ID, requestId); \n\n        try {\n            \n            boolean isMultipart = multipartResolver.isMultipart(request); \n\n            if (isMultipart) {\n                \n                MultipartHttpServletRequest multipartRequest = multipartResolver.resolveMultipart(request);\n\n                \n                String headerRequestId = multipartRequest.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); \n                }\n\n                \n                multipartRequest.setAttribute(REQUEST_BODY, multipartRequest);\n                multipartRequest.setAttribute(REQUEST_ID, requestId);\n\n                chain.doFilter(multipartRequest, response);\n\n            } else {\n                \n                ApiKeyVerifyRequestWrapper requestWrapper = new ApiKeyVerifyRequestWrapper(request);\n\n                \n                String headerRequestId = requestWrapper.getHeader(X_REQUEST_ID);\n                if (!ObjectUtils.isEmpty(headerRequestId)) {\n                    requestId = headerRequestId;\n                    ThreadContext.put(THREAD_REQUEST_ID, requestId); \n                }\n\n                \n                JSONObject dataRequest = new JSONObject();\n                String requestBodyString = requestWrapper.getBody();\n                if (!ObjectUtils.isEmpty(requestBodyString)) {\n                    try {\n                        JSONParser parser = new JSONParser();\n                        dataRequest = (JSONObject) parser.parse(requestBodyString);\n                    } catch (ParseException e) {\n                        log.warn(\"Failed to parse request body as JSON for URI: {}. Body: {}\", request.getRequestURI(), requestBodyString, e);\n                        \n                        \n                    }\n                }\n\n                \n                dataRequest.put(REQUEST_ID, requestId);\n                request.setAttribute(REQUEST_ID, requestId); \n\n                dataRequest.put(API_KEY, requestWrapper.getHeader(API_KEY));\n                request.setAttribute(API_KEY, requestWrapper.getHeader(API_KEY));\n\n                dataRequest.put(API_SECRET, requestWrapper.getHeader(API_SECRET));\n                request.setAttribute(API_SECRET, requestWrapper.getHeader(API_SECRET));\n\n                \n                \n                \n                dataRequest.put(URI, request.getRequestURI());\n                request.setAttribute(URI, request.getRequestURI()); \n\n                request.setAttribute(REQUEST_PARAMETERS, request.getParameterMap()); \n                request.setAttribute(REQUEST_BODY, dataRequest); \n\n                \n                \n                \n                \n                \n                \n                \n                \n                \n\n                chain.doFilter(requestWrapper, response);\n            }\n        } catch (IOException | ServletException e) {\n            log.error(\"Filter processing error for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); \n        } catch (Throwable e) { \n            log.error(\"An unexpected error occurred in filter for URI: {}\", request.getRequestURI(), e);\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        } finally {\n            \n            ThreadContext.clearAll();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper.getBody()",
            "params": []
          },
          {
            "name": "org.json.simple.parser.JSONParser.parse(String s)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.json-simple-1.1.1.jar\\org.json.simple\\JSONObject.class",
          "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet.http\\HttpServletRequest.class",
          "F:\\_side_projects\\source_atlas\\.contents.json-simple-1.1.1.jar\\org.json.simple.parser\\JSONParser.class",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.2.7.jar\\org.springframework.web.multipart\\MultipartHttpServletRequest.class",
          "com.edu.onestudy.filter.ApiKeyVerifyRequestWrapper",
          "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet.http\\HttpServletResponse.class"
        ],
        "field_access": [
          "int SC_INTERNAL_SERVER_ERROR = 500"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.tomcat-embed-core-10.1.41.jar\\jakarta.servlet\\Filter.class.doFilter(ServletRequest req, ServletResponse res, FilterChain chain)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.security",
    "class_name": "JwtProvider",
    "full_class_name": "com.edu.onestudy.security.JwtProvider",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\security\\JwtProvider.java",
    "content": "@Component\n@Slf4j\npublic class JwtProvider {\n    @Value(\"${security.jwt.secret}\")\n    private String secretKey;\n\n    @Value(\"${security.jwt.access-token-expiration}\")\n    private long accessTokenExpired;\n\n    @Value(\"${security.jwt.refresh-token-expiration}\")\n    private long refreshTokenExpired;\n\n    public String extractUsername(String token) {\n        Claims claims = extractAllClaims(token);\n        return claims.getSubject();\n    }\n\n    private <T> T extractClaims(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().\n                parseClaimsJws(token).\n                getBody();\n    }\n\n    private Key getSignInKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretKey);\n        return Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    public String generateAccessToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, accessTokenExpired);\n    }\n\n    public String generateRefreshToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, refreshTokenExpired);\n    }\n\n    public String generateToken(\n            Map<String, Object> extractClaims,\n            UserPrincipal userDetails,\n            long maxAge\n    ) {\n\n        return Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge))\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n    private String buildScope(UserPrincipal user) {\n        StringJoiner stringJoiner = new StringJoiner(\" \");\n\n        if (!CollectionUtils.isEmpty(user.getRoles()))\n            user.getRoles().forEach(role -> {\n                stringJoiner.add(\"ROLE_\" + role);\n            });\n\n        return stringJoiner.toString();\n    }\n\n    public boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    private Date extractExpiration(String token) {\n        return extractClaims(token, Claims::getExpiration);\n    }\n\n    public boolean isTokenValid(String token, UserPrincipal userDetails) {\n        final String username = extractUsername(token);\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.security.JwtProvider.extractUsername(String token)",
        "body": "public String extractUsername(String token) {\n        Claims claims = extractAllClaims(token);\n        return claims.getSubject();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.extractAllClaims(String token)",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.Claims.getSubject()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jjwt-api-0.11.5.jar\\io.jsonwebtoken\\Claims.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.extractClaims(String token, Function<Claims, T> claimsResolver)",
        "body": "private <T> T extractClaims(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.extractAllClaims(String token)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jjwt-api-0.11.5.jar\\io.jsonwebtoken\\Claims.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.extractAllClaims(String token)",
        "body": "private Claims extractAllClaims(String token) {\n        return Jwts.\n                parserBuilder().\n                setSigningKey(getSignInKey()).\n                build().\n                parseClaimsJws(token).\n                getBody();\n    }",
        "method_calls": [
          {
            "name": "io.jsonwebtoken.Jwts.parserBuilder()",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtParserBuilder.setSigningKey(Key key)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.getSignInKey()",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtParserBuilder.build()",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtParser.parseClaimsJws(String claimsJws)",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.Jwt.getBody()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.getSignInKey()",
        "body": "private Key getSignInKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretKey);\n        return Keys.hmacShaKeyFor(keyBytes);\n    }",
        "method_calls": [
          {
            "name": "io.jsonwebtoken.security.Keys.hmacShaKeyFor(byte[] bytes)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "Decoder<String, byte[]> BASE64"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.generateAccessToken(Authentication authentication)",
        "body": "public String generateAccessToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, accessTokenExpired);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.generateToken(Map<String, Object> extractClaims, UserPrincipal userDetails, long maxAge)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.security.UserPrincipal"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.generateRefreshToken(Authentication authentication)",
        "body": "public String generateRefreshToken(Authentication authentication) {\n        UserPrincipal userDetails = (UserPrincipal) authentication.getPrincipal();\n        return generateToken(new HashMap<>(), userDetails, refreshTokenExpired);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.generateToken(Map<String, Object> extractClaims, UserPrincipal userDetails, long maxAge)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.security.UserPrincipal"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.generateToken(\n            Map<String, Object> extractClaims,\n            UserPrincipal userDetails,\n            long maxAge\n    )",
        "body": "public String generateToken(\n            Map<String, Object> extractClaims,\n            UserPrincipal userDetails,\n            long maxAge\n    ) {\n\n        return Jwts.builder()\n                .setClaims(extractClaims)\n                .setSubject(userDetails.getUsername())\n                .claim(\"id\", userDetails.getId())\n                .claim(\"username\", userDetails.getUsername())\n                .claim(\"email\", userDetails.getEmail())\n                .claim(\"roles\", userDetails.getRoles())\n                .claim(\"authorities\", userDetails.getAuthorities())\n                .claim(\"scope\", buildScope(userDetails))\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + maxAge))\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }",
        "method_calls": [
          {
            "name": "io.jsonwebtoken.Jwts.builder()",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.setClaims(Map<String, ?> claims)",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.setSubject(String sub)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getUsername()",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.claim(String name, Object value)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getEmail()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getRoles()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getAuthorities()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.buildScope(UserPrincipal user)",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.setIssuedAt(Date iat)",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.setExpiration(Date exp)",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.signWith(Key key, SignatureAlgorithm alg)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.getSignInKey()",
            "params": []
          },
          {
            "name": "io.jsonwebtoken.JwtBuilder.compact()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "HS256"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.buildScope(UserPrincipal user)",
        "body": "private String buildScope(UserPrincipal user) {\n        StringJoiner stringJoiner = new StringJoiner(\" \");\n\n        if (!CollectionUtils.isEmpty(user.getRoles()))\n            user.getRoles().forEach(role -> {\n                stringJoiner.add(\"ROLE_\" + role);\n            });\n\n        return stringJoiner.toString();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getRoles()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.isTokenExpired(String token)",
        "body": "public boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.extractExpiration(String token)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.extractExpiration(String token)",
        "body": "private Date extractExpiration(String token) {\n        return extractClaims(token, Claims::getExpiration);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.extractClaims(String token, Function<Claims, Date> claimsResolver)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.security.JwtProvider.isTokenValid(String token, UserPrincipal userDetails)",
        "body": "public boolean isTokenValid(String token, UserPrincipal userDetails) {\n        final String username = extractUsername(token);\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.security.JwtProvider.extractUsername(String token)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getUsername()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.isTokenExpired(String token)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.utils",
    "class_name": "JsonUtils",
    "full_class_name": "com.edu.onestudy.utils.JsonUtils",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\utils\\JsonUtils.java",
    "content": "public class JsonUtils {\n\n    private JsonUtils() {}\n\n    public static <T> T getGenericObject(Object input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.convertValue(input, clazz);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public static  <T> T getEntityFromJsonStr(String input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.readValue(input, clazz);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    public static String convertObjectToString(Object obj) throws JsonProcessingException {\n        return new ObjectMapper().writeValueAsString(obj);\n    }\n\n    public static String toJsonString(Object input) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            return objectMapper.writeValueAsString(input);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n\n    public static <T> T readObject(String input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(input, clazz);\n    }\n\n    public static <T> T  readListObject(Object input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(objectMapper.writeValueAsString(input),\n                objectMapper.getTypeFactory().constructCollectionType(List.class, clazz));\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.utils.JsonUtils.JsonUtils()",
        "body": "private JsonUtils() {}",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.JsonUtils.getGenericObject(Object input, Class<T> clazz)",
        "body": "public static <T> T getGenericObject(Object input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.convertValue(input, clazz);\n        } catch (Exception e) {\n            return null;\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jackson-databind-2.19.0.jar\\com.fasterxml.jackson.databind\\ObjectMapper.class"
        ],
        "field_access": [
          "FAIL_ON_UNKNOWN_PROPERTIES",
          "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.JsonUtils.getEntityFromJsonStr(String input, Class<T> clazz)",
        "body": "public static  <T> T getEntityFromJsonStr(String input, Class<T> clazz) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n            return objectMapper.readValue(input, clazz);\n        } catch (IOException e) {\n            return null;\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jackson-databind-2.19.0.jar\\com.fasterxml.jackson.databind\\ObjectMapper.class"
        ],
        "field_access": [
          "FAIL_ON_UNKNOWN_PROPERTIES",
          "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.JsonUtils.convertObjectToString(Object obj)",
        "body": "public static String convertObjectToString(Object obj) throws JsonProcessingException {\n        return new ObjectMapper().writeValueAsString(obj);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.JsonUtils.toJsonString(Object input)",
        "body": "public static String toJsonString(Object input) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n            return objectMapper.writeValueAsString(input);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jackson-databind-2.19.0.jar\\com.fasterxml.jackson.databind\\ObjectMapper.class"
        ],
        "field_access": [
          "FAIL_ON_UNKNOWN_PROPERTIES"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.JsonUtils.readObject(String input, Class<T> clazz)",
        "body": "public static <T> T readObject(String input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(input, clazz);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jackson-databind-2.19.0.jar\\com.fasterxml.jackson.databind\\ObjectMapper.class"
        ],
        "field_access": [
          "FAIL_ON_UNKNOWN_PROPERTIES"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.JsonUtils.readListObject(Object input, Class<T> clazz)",
        "body": "public static <T> T  readListObject(Object input, Class<T> clazz) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper.readValue(objectMapper.writeValueAsString(input),\n                objectMapper.getTypeFactory().constructCollectionType(List.class, clazz));\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.jackson-databind-2.19.0.jar\\com.fasterxml.jackson.databind\\ObjectMapper.class"
        ],
        "field_access": [
          "FAIL_ON_UNKNOWN_PROPERTIES"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.annotations.handler",
    "class_name": "ValueOfEnumValidator",
    "full_class_name": "com.edu.onestudy.annotations.handler.ValueOfEnumValidator",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\annotations\\handler\\ValueOfEnumValidator.java",
    "content": "public class ValueOfEnumValidator implements ConstraintValidator<ValueOfEnum, CharSequence> {\n    private List<String> acceptedValues;\n\n    @Override\n    public void initialize(ValueOfEnum annotation) {\n        acceptedValues = Stream.of(annotation.enumClass().getEnumConstants())\n                .map(Enum::name)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public boolean isValid(CharSequence value, ConstraintValidatorContext context) {\n        if (value == null) {\n            return true;\n        }\n\n        return acceptedValues.contains(value.toString());\n    }\n}",
    "implements": [
      "F:\\_side_projects\\source_atlas\\.contents.jakarta.validation-api-3.0.2.jar\\jakarta.validation\\ConstraintValidator.class"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.annotations.handler.ValueOfEnumValidator.initialize(ValueOfEnum annotation)",
        "body": "@Override\n    public void initialize(ValueOfEnum annotation) {\n        acceptedValues = Stream.of(annotation.enumClass().getEnumConstants())\n                .map(Enum::name)\n                .collect(Collectors.toList());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.annotations.ValueOfEnum.enumClass()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.jakarta.validation-api-3.0.2.jar\\jakarta.validation\\ConstraintValidator.class.initialize(ValueOfEnum annotation)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.annotations.handler.ValueOfEnumValidator.isValid(CharSequence value, ConstraintValidatorContext context)",
        "body": "@Override\n    public boolean isValid(CharSequence value, ConstraintValidatorContext context) {\n        if (value == null) {\n            return true;\n        }\n\n        return acceptedValues.contains(value.toString());\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.jakarta.validation-api-3.0.2.jar\\jakarta.validation\\ConstraintValidator.class.isValid(CharSequence value, ConstraintValidatorContext context)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.external",
    "class_name": "QuestionController",
    "full_class_name": "com.edu.onestudy.controller.external.QuestionController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\external\\QuestionController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/questions\")\npublic class QuestionController {\n\n\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.utils",
    "class_name": "FunctionHelper",
    "full_class_name": "com.edu.onestudy.utils.FunctionHelper",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\utils\\FunctionHelper.java",
    "content": "public class FunctionHelper {\n    public static String[] getNullPropertyNames (Object source, String... ignorePropertyNames) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>(Arrays.stream(ignorePropertyNames).toList());\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size() + ignorePropertyNames.length];\n        return emptyNames.toArray(result);\n    }\n    public static String[] getNullPropertyNames (Object source) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>();\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size()];\n        return emptyNames.toArray(result);\n    }\n\n    public static String generateRandomString(int length) {\n        String ALPHA_NUMERIC_STRING = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n        StringBuilder builder = new StringBuilder();\n        while (length-- != 0) {\n            int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());\n            builder.append(ALPHA_NUMERIC_STRING.charAt(character));\n        }\n        return builder.toString();\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.utils.FunctionHelper.getNullPropertyNames(Object source, String... ignorePropertyNames)",
        "body": "public static String[] getNullPropertyNames (Object source, String... ignorePropertyNames) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>(Arrays.stream(ignorePropertyNames).toList());\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size() + ignorePropertyNames.length];\n        return emptyNames.toArray(result);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-beans-6.2.7.jar\\org.springframework.beans\\BeanWrapper.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.FunctionHelper.getNullPropertyNames(Object source)",
        "body": "public static String[] getNullPropertyNames (Object source) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>();\n        for(java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) emptyNames.add(pd.getName());\n        }\n\n        String[] result = new String[emptyNames.size()];\n        return emptyNames.toArray(result);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-beans-6.2.7.jar\\org.springframework.beans\\BeanWrapper.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.FunctionHelper.generateRandomString(int length)",
        "body": "public static String generateRandomString(int length) {\n        String ALPHA_NUMERIC_STRING = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n        StringBuilder builder = new StringBuilder();\n        while (length-- != 0) {\n            int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());\n            builder.append(ALPHA_NUMERIC_STRING.charAt(character));\n        }\n        return builder.toString();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.external",
    "class_name": "AuthController",
    "full_class_name": "com.edu.onestudy.controller.external.AuthController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\external\\AuthController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/auth\")\n@Slf4j\npublic class AuthController {\n\n    private final BaseService baseService;\n\n    private final AuthService authService;\n\n    public AuthController(BaseService baseService, AuthService authService) {\n        this.baseService = baseService;\n        this.authService = authService;\n    }\n\n    @GetMapping(\"/me\")\n    public BaseResponse<AuthProfileResponse> whoAmI(@CurrentUser UserPrincipal requester) {\n        return baseService.ofSucceeded(authService.getAuthProfile(requester.getId().toString()));\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.external.AuthController.AuthController(BaseService baseService, AuthService authService)",
        "body": "public AuthController(BaseService baseService, AuthService authService) {\n        this.baseService = baseService;\n        this.authService = authService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "AuthService authService",
          "BaseService baseService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.external.AuthController.whoAmI(@CurrentUser UserPrincipal requester)",
        "body": "@GetMapping(\"/me\")\n    public BaseResponse<AuthProfileResponse> whoAmI(@CurrentUser UserPrincipal requester) {\n        return baseService.ofSucceeded(authService.getAuthProfile(requester.getId().toString()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(AuthProfileResponse data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.AuthService.getAuthProfile(String email)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/auth/me",
            "produces": "",
            "consumes": ""
          }
        ]
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.external",
    "class_name": "UserController",
    "full_class_name": "com.edu.onestudy.controller.external.UserController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\external\\UserController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/users\")\npublic class UserController {\n\n    private final BaseService baseService;\n\n    public UserController(BaseService baseService) {\n        this.baseService = baseService;\n    }\n\n    @PutMapping\n    public BaseResponse<?> uploadResource(\n            @CurrentUser UserPrincipal requester\n    ) {\n        \n        return baseService.ofSucceeded(null);\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.external.UserController.UserController(BaseService baseService)",
        "body": "public UserController(BaseService baseService) {\n        this.baseService = baseService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BaseService baseService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.external.UserController.uploadResource(\n            @CurrentUser UserPrincipal requester\n    )",
        "body": "@PutMapping\n    public BaseResponse<?> uploadResource(\n            @CurrentUser UserPrincipal requester\n    ) {\n        \n        return baseService.ofSucceeded(null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.external",
    "class_name": "ResourceController",
    "full_class_name": "com.edu.onestudy.controller.external.ResourceController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\external\\ResourceController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/resources\")\npublic class ResourceController {\n\n    private final BaseService baseService;\n\n    private final ResourceService resourceService;\n\n    public ResourceController(BaseService baseService, ResourceService resourceService) {\n        this.baseService = baseService;\n        this.resourceService = resourceService;\n    }\n\n    @PostMapping()\n    public BaseResponse<Resource> uploadResource(\n            @CurrentUser UserPrincipal requester,\n            @RequestParam(\"file\") MultipartFile file\n    ) {\n        return baseService.ofSucceeded(resourceService.uploadResource(file, requester.getId()));\n    }\n\n    @GetMapping(\"/{id}\")\n    public BaseResponse<GetResourceResponse> getResource(\n            @CurrentUser UserPrincipal requester,\n            @PathVariable String id\n    ) {\n        return baseService.ofSucceeded(resourceService.getResource(id, requester.getId()));\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.external.ResourceController.ResourceController(BaseService baseService, ResourceService resourceService)",
        "body": "public ResourceController(BaseService baseService, ResourceService resourceService) {\n        this.baseService = baseService;\n        this.resourceService = resourceService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "ResourceService resourceService",
          "BaseService baseService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.external.ResourceController.uploadResource(\n            @CurrentUser UserPrincipal requester,\n            @RequestParam(\"file\") MultipartFile file\n    )",
        "body": "@PostMapping()\n    public BaseResponse<Resource> uploadResource(\n            @CurrentUser UserPrincipal requester,\n            @RequestParam(\"file\") MultipartFile file\n    ) {\n        return baseService.ofSucceeded(resourceService.uploadResource(file, requester.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Resource data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.ResourceService.uploadResource(MultipartFile file, UUID requesterId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/resources",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.ResourceController.getResource(\n            @CurrentUser UserPrincipal requester,\n            @PathVariable String id\n    )",
        "body": "@GetMapping(\"/{id}\")\n    public BaseResponse<GetResourceResponse> getResource(\n            @CurrentUser UserPrincipal requester,\n            @PathVariable String id\n    ) {\n        return baseService.ofSucceeded(resourceService.getResource(id, requester.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(GetResourceResponse data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.ResourceService.getResource(String id, UUID requesterId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/resources/{id}",
            "produces": "",
            "consumes": ""
          }
        ]
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.pub",
    "class_name": "AuthPubController",
    "full_class_name": "com.edu.onestudy.controller.pub.AuthPubController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\pub\\AuthPubController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/pub/auth\")\n@Slf4j\npublic class AuthPubController {\n\n    private final BaseService baseService;\n\n    private final AuthService authService;\n\n    public AuthPubController(BaseService baseService, AuthService authService) {\n        this.baseService = baseService;\n        this.authService = authService;\n    }\n\n    @PostMapping(\"/login\")\n    @LogsActivityAnnotation\n    public BaseResponse<AuthLoginResponse> login(@Valid @RequestBody AuthLoginRequest request) {\n        return baseService.ofSucceeded(authService.login(request));\n    }\n\n    @PostMapping(\"/register\")\n    public BaseResponse<AuthRegisterResponse> register(@Valid @RequestBody AuthRegisterRequest request) {\n        return baseService.ofSucceeded(authService.register(request));\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.pub.AuthPubController.AuthPubController(BaseService baseService, AuthService authService)",
        "body": "public AuthPubController(BaseService baseService, AuthService authService) {\n        this.baseService = baseService;\n        this.authService = authService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "AuthService authService",
          "BaseService baseService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.pub.AuthPubController.login(@Valid @RequestBody AuthLoginRequest request)",
        "body": "@PostMapping(\"/login\")\n    @LogsActivityAnnotation\n    public BaseResponse<AuthLoginResponse> login(@Valid @RequestBody AuthLoginRequest request) {\n        return baseService.ofSucceeded(authService.login(request));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(AuthLoginResponse data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.AuthService.login(AuthLoginRequest request)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/pub/auth/login",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.pub.AuthPubController.register(@Valid @RequestBody AuthRegisterRequest request)",
        "body": "@PostMapping(\"/register\")\n    public BaseResponse<AuthRegisterResponse> register(@Valid @RequestBody AuthRegisterRequest request) {\n        return baseService.ofSucceeded(authService.register(request));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.AuthService.register(AuthRegisterRequest request)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/pub/auth/register",
            "produces": "",
            "consumes": ""
          }
        ]
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service",
    "class_name": "BaseService",
    "full_class_name": "com.edu.onestudy.service.BaseService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\BaseService.java",
    "content": "@Service\n@Slf4j\npublic class BaseService {\n\n    @Autowired\n    protected Environment env;\n\n    @Value(\"${spring.application.name}\")\n    protected String appName;\n\n    @Autowired\n    protected ObjectMapper objectMapper;\n\n    @Autowired\n    protected HttpServletRequest httpServletRequest;\n\n    @Autowired\n    protected HttpServletResponse httpServletResponse;\n\n    public String getMessage(String key) {\n        try {\n            String result = env.getProperty(key);\n            return ObjectUtils.isEmpty(result) ? key : result;\n        } catch (Exception e) {\n            return key;\n        }\n    }\n\n    public String getMessage(int code) {\n        return getMessage(String.valueOf(code));\n    }\n\n    public String getMessage(BusinessError error) {\n        return ObjectUtils.isEmpty(error.getMessage()) ? getMessage(error.getCode()) : error.getMessage();\n    }\n\n    public Object getRequestValue(String key) {\n        return getRequestValue(key, Object.class);\n    }\n\n    public <T> T getRequestValue(String key, Class<T> clazz) {\n        return clazz.cast(httpServletRequest.getAttribute(key));\n    }\n\n    public String getRequestStringValue(String key) {\n        return getRequestValue(key, String.class);\n    }\n\n    public String getRequestId() {\n        return getRequestValue(RequestKeyConstant.REQUEST_ID).toString();\n    }\n\n    public Object getRequestBody() {\n        return getRequestValue(RequestKeyConstant.REQUEST_BODY);\n    }\n\n    public <T> BaseResponse<T> ofSucceeded(T data) {\n        return BaseResponse.ofSucceeded(getRequestId(), data);\n    }\n\n    public <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        return BaseResponse.ofGetListSucceeded(data, requestList);\n    }\n\n    public <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return BaseResponse.ofFailed(getRequestId(), exception, data);\n    }\n\n    public <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, data);\n    }\n\n    public <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors, data);\n    }\n\n    public BaseResponse ofFailed(BusinessException exception) {\n        return BaseResponse.ofFailed(getRequestId(), exception);\n    }\n\n    public BaseResponse ofFailed(BusinessError error, String message) {\n        return BaseResponse.ofFailed(getRequestId(), error, message);\n    }\n\n    public BaseResponse ofFailed(BusinessError error) {\n        return BaseResponse.ofFailed(getRequestId(), error, getMessage(error));\n    }\n\n    public BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors);\n    }\n\n    public BaseResponse ofFailed(int errorCode) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode));\n    }\n\n    public <T> BaseResponse<T> ofFailed(int errorCode, T data) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode), data);\n    }\n\n    public BusinessError getBusinessError(int errorCode) {\n        return BusinessError.builder()\n                .code(errorCode)\n                .message(getMessage(errorCode))\n                .build();\n    }\n\n    public HttpHeaders getHeaders() {\n        HttpHeaders headers = new HttpHeaders();\n        Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String headerName = headerNames.nextElement();\n            String headerValue = httpServletRequest.getHeader(headerName);\n            headers.add(headerName, headerValue);\n        }\n        return headers;\n    }\n\n    public int getErrorCode(String errorCode, int errorCodeDefault) {\n        try {\n            return Integer.parseInt(errorCode);\n        } catch (NumberFormatException e) {\n            return errorCodeDefault;\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.BaseService.getMessage(String key)",
        "body": "public String getMessage(String key) {\n        try {\n            String result = env.getProperty(key);\n            return ObjectUtils.isEmpty(result) ? key : result;\n        } catch (Exception e) {\n            return key;\n        }\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getMessage(int code)",
        "body": "public String getMessage(int code) {\n        return getMessage(String.valueOf(code));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(String key)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getMessage(BusinessError error)",
        "body": "public String getMessage(BusinessError error) {\n        return ObjectUtils.isEmpty(error.getMessage()) ? getMessage(error.getCode()) : error.getMessage();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.exception.BusinessError.getMessage()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(int code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getCode()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getRequestValue(String key)",
        "body": "public Object getRequestValue(String key) {\n        return getRequestValue(key, Object.class);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestValue(String key, Class<Object> clazz)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getRequestValue(String key, Class<T> clazz)",
        "body": "public <T> T getRequestValue(String key, Class<T> clazz) {\n        return clazz.cast(httpServletRequest.getAttribute(key));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getRequestStringValue(String key)",
        "body": "public String getRequestStringValue(String key) {\n        return getRequestValue(key, String.class);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestValue(String key, Class<String> clazz)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getRequestId()",
        "body": "public String getRequestId() {\n        return getRequestValue(RequestKeyConstant.REQUEST_ID).toString();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestValue(String key)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "String REQUEST_ID = \"request_id\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getRequestBody()",
        "body": "public Object getRequestBody() {\n        return getRequestValue(RequestKeyConstant.REQUEST_BODY);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestValue(String key)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "String REQUEST_BODY = \"request_body\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofSucceeded(T data)",
        "body": "public <T> BaseResponse<T> ofSucceeded(T data) {\n        return BaseResponse.ofSucceeded(getRequestId(), data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(String requestId, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofGetListSucceeded(T data, BasicRequestList requestList)",
        "body": "public <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        return BaseResponse.ofGetListSucceeded(data, requestList);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofGetListSucceeded(T data, BasicRequestList requestList)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessException exception, T data)",
        "body": "public <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return BaseResponse.ofFailed(getRequestId(), exception, data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessException exception, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message, T data)",
        "body": "public <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data)",
        "body": "public <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors, data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessException exception)",
        "body": "public BaseResponse ofFailed(BusinessException exception) {\n        return BaseResponse.ofFailed(getRequestId(), exception);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessException exception)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message)",
        "body": "public BaseResponse ofFailed(BusinessError error, String message) {\n        return BaseResponse.ofFailed(getRequestId(), error, message);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error)",
        "body": "public BaseResponse ofFailed(BusinessError error) {\n        return BaseResponse.ofFailed(getRequestId(), error, getMessage(error));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(BusinessError error)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message, List<ErrorViolation> errors)",
        "body": "public BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        return BaseResponse.ofFailed(getRequestId(), error, message, errors);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(int errorCode)",
        "body": "public BaseResponse ofFailed(int errorCode) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.ofFailed(int errorCode, T data)",
        "body": "public <T> BaseResponse<T> ofFailed(int errorCode, T data) {\n        return BaseResponse.ofFailed(getRequestId(), getBusinessError(errorCode), data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
        "body": "public BusinessError getBusinessError(int errorCode) {\n        return BusinessError.builder()\n                .code(errorCode)\n                .message(getMessage(errorCode))\n                .build();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.exception.BusinessError.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.BusinessErrorBuilder.code(int code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.BusinessErrorBuilder.message(String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(int code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.BusinessErrorBuilder.build()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getHeaders()",
        "body": "public HttpHeaders getHeaders() {\n        HttpHeaders headers = new HttpHeaders();\n        Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String headerName = headerNames.nextElement();\n            String headerValue = httpServletRequest.getHeader(headerName);\n            headers.add(headerName, headerValue);\n        }\n        return headers;\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.2.7.jar\\org.springframework.http\\HttpHeaders.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.BaseService.getErrorCode(String errorCode, int errorCodeDefault)",
        "body": "public int getErrorCode(String errorCode, int errorCodeDefault) {\n        try {\n            return Integer.parseInt(errorCode);\n        } catch (NumberFormatException e) {\n            return errorCodeDefault;\n        }\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.auth",
    "class_name": "AuthLoginRequest",
    "full_class_name": "com.edu.onestudy.dto.auth.AuthLoginRequest",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\auth\\AuthLoginRequest.java",
    "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AuthLoginRequest {\n\n    @NotBlank\n    String username;\n\n    @NotBlank\n    String password;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.auth",
    "class_name": "AuthLoginResponse",
    "full_class_name": "com.edu.onestudy.dto.auth.AuthLoginResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\auth\\AuthLoginResponse.java",
    "content": "public record AuthLoginResponse(String accessToken, String refreshToken) {\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.auth",
    "class_name": "AuthProfileResponse",
    "full_class_name": "com.edu.onestudy.dto.auth.AuthProfileResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\auth\\AuthProfileResponse.java",
    "content": "@AllArgsConstructor\n@Data\npublic class AuthProfileResponse {\n\n    private String email;\n\n    private String username;\n\n    private String firstName;\n\n    private String lastName;\n\n    private String phoneNumber;\n\n    private String gender;\n\n    private String role;\n\n    private String avatar;\n\n    private Boolean isVerified;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.auth",
    "class_name": "AuthRegisterRequest",
    "full_class_name": "com.edu.onestudy.dto.auth.AuthRegisterRequest",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\auth\\AuthRegisterRequest.java",
    "content": "@Data\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AuthRegisterRequest {\n\n    @NotBlank(message = \"Username is required\")\n    String username;\n\n    @NotBlank(message = \"Email is required\")\n    @Email(message = \"Email is invalid\")\n    String email;\n\n    @NotBlank(message = \"Password is required\")\n    String password;\n\n    @NotBlank(message = \"Name is required\")\n    String name;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.auth",
    "class_name": "AuthRegisterResponse",
    "full_class_name": "com.edu.onestudy.dto.auth.AuthRegisterResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\auth\\AuthRegisterResponse.java",
    "content": "@AllArgsConstructor\n@Data\npublic class AuthRegisterResponse {\n    private String id;\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.pronunciation",
    "class_name": "GetPronunciationSampleResponseDto",
    "full_class_name": "com.edu.onestudy.dto.pronunciation.GetPronunciationSampleResponseDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\pronunciation\\GetPronunciationSampleResponseDto.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GetPronunciationSampleResponseDto {\n\n    private String ipaTranscript;\n\n    private String realTranscript;\n\n    private String transcriptTranslation;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.pronunciation",
    "class_name": "GetSampleRequestDto",
    "full_class_name": "com.edu.onestudy.dto.pronunciation.GetSampleRequestDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\pronunciation\\GetSampleRequestDto.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GetSampleRequestDto {\n\n    @NotNull\n    private PronunciationLevel level;\n\n    private String customText;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.pronunciation",
    "class_name": "PronunciationAccuracyRequestDto",
    "full_class_name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyRequestDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\pronunciation\\PronunciationAccuracyRequestDto.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class PronunciationAccuracyRequestDto {\n\n    private String base64Audio;\n\n    private String text;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.pronunciation",
    "class_name": "PronunciationAccuracyResponseDto",
    "full_class_name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyResponseDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\pronunciation\\PronunciationAccuracyResponseDto.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class PronunciationAccuracyResponseDto {\n\n    private String startTime;\n\n    private String endTime;\n\n    private String ipaScript;\n\n    private String isLetterCorrectAllWords;\n\n    private String matchedTranscripts;\n\n    private String matchedTranscriptsIpa;\n\n    private String pairAccuracyCategory;\n\n    private Integer pronunciationAccuracy;\n\n    private String realTranscript;\n\n    private String realTranscripts;\n\n    private String realTranscriptsIpa;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.quiz",
    "class_name": "CreateQuizDto",
    "full_class_name": "com.edu.onestudy.dto.quiz.CreateQuizDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\quiz\\CreateQuizDto.java",
    "content": "@Data\npublic class CreateQuizDto {\n\n    private String id;\n\n    private String title;\n\n    private String description;\n\n    private List<QuestionDto> questions;\n\n    private LocalDateTime createdAt;\n\n    private LocalDateTime updatedAt;\n\n    private Integer totalPoints;\n\n    private String difficulty;\n\n    private Integer estimatedDuration;\n\n    private List<String> tags;\n\n    private Boolean isPublic;\n\n    private Integer version;\n\n    private QuizNavigationMode navigationMode;\n\n    private Boolean hasTimer;\n\n    private Integer timeLimit;\n\n    private Integer warningTime;\n\n    private Boolean allowQuestionPicker;\n\n    private Boolean shuffleQuestions;\n\n    private Boolean shuffleAnswers;\n\n    private Boolean showProgress;\n\n    private Boolean allowPause;\n\n    private Integer maxAttempts;\n\n    private Integer passingScore;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.quiz",
    "class_name": "OptionDto",
    "full_class_name": "com.edu.onestudy.dto.quiz.OptionDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\quiz\\OptionDto.java",
    "content": "@Data\npublic class OptionDto {\n\n    private UUID id;\n\n    private String text;\n\n    private Boolean isCorrect;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.quiz",
    "class_name": "QuestionDto",
    "full_class_name": "com.edu.onestudy.dto.quiz.QuestionDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\quiz\\QuestionDto.java",
    "content": "@Data\npublic class QuestionDto {\n\n    private String id;\n\n    private QuestionType type;\n\n    private String text;\n\n    private List<OptionDto> options;\n\n    private String pronunciationText;\n\n    private List<String> correctBlanks;\n\n    private Boolean trueFalseAnswer;\n\n    private String audioUrl;\n\n    private String imageUrl;\n\n    private Integer maxListeningTime;\n\n    private int points;\n\n    private Difficulty difficulty;\n\n    private Integer acceptRate;\n\n    private String category;\n\n    private LocalDateTime createdAt;\n\n    private LocalDateTime updatedAt;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.quiz",
    "class_name": "StartQuizResponse",
    "full_class_name": "com.edu.onestudy.dto.quiz.StartQuizResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\quiz\\StartQuizResponse.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class StartQuizResponse {\n\n    private String quizAttemptId;\n\n    private String quizId;\n\n    private String userId;\n\n    private LocalDateTime startedAt;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.quiz",
    "class_name": "SubmitAnswerRequest",
    "full_class_name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\quiz\\SubmitAnswerRequest.java",
    "content": "@Data\npublic class SubmitAnswerRequest {\n\n    private String questionId;\n\n    private List<String> selectedOptions;\n\n    private List<String> fillInBlanksAnswers;\n\n    private String answerText;\n\n    private Boolean userAnswerTrueFalse;\n\n    private Integer timeTaken;\n\n    private String audioUrl;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.resource",
    "class_name": "GetResourceResponse",
    "full_class_name": "com.edu.onestudy.dto.resource.GetResourceResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\resource\\GetResourceResponse.java",
    "content": "@Data\n@Builder\npublic class GetResourceResponse {\n\n    private String url;\n\n    private String name;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto.user",
    "class_name": "BasicUserDto",
    "full_class_name": "com.edu.onestudy.dto.user.BasicUserDto",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\user\\BasicUserDto.java",
    "content": "@Data\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\npublic class BasicUserDto {\n\n    private UUID id;\n\n    private String username;\n\n    private String email;\n\n    private String firstName;\n\n    private String lastName;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaQuestionRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaQuestionRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaQuestionRepository.java",
    "content": "@Repository\npublic interface JpaQuestionRepository extends JpaRepository<Question, UUID> {\n\n     List<Question> findByQuizId(UUID quizId);\n\n     Integer countByQuizId(UUID quizId);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuestionRepository.findByQuizId(UUID quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuestionRepository.countByQuizId(UUID quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaQuizAnswerRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaQuizAnswerRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaQuizAnswerRepository.java",
    "content": "public interface JpaQuizAnswerRepository extends JpaRepository<QuizAnswer, UUID> {\n    List<QuizAnswer> findByQuizAttemptId(UUID quizAttemptId);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuizAnswerRepository.findByQuizAttemptId(UUID quizAttemptId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaQuizAttemptRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaQuizAttemptRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaQuizAttemptRepository.java",
    "content": "@Repository\npublic interface JpaQuizAttemptRepository extends JpaRepository<QuizAttempt, UUID> {\n\n    List<QuizAttempt> findByUserId(UUID id);\n\n    List<QuizAttempt> findByQuizId(UUID quizId);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuizAttemptRepository.findByUserId(UUID id)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuizAttemptRepository.findByQuizId(UUID quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaQuizRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaQuizRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaQuizRepository.java",
    "content": "@Repository\npublic interface JpaQuizRepository extends JpaRepository<Quiz, UUID> {\n    List<Quiz> findByAuthorId(UUID authorId);\n\n    List<Quiz> findByIdIn(Collection<UUID> ids);\n\n    List<Quiz> findByStatus(QuizStatus status);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuizRepository.findByAuthorId(UUID authorId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuizRepository.findByIdIn(Collection<UUID> ids)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaQuizRepository.findByStatus(QuizStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaResourceRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaResourceRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaResourceRepository.java",
    "content": "public interface JpaResourceRepository extends JpaRepository<Resource, UUID> {\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaSavedQuizRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaSavedQuizRepository.java",
    "content": "@Repository\npublic interface JpaSavedQuizRepository extends JpaRepository<UserSavedQuiz,  UUID> {\n    List<UserSavedQuiz> findByUserId(UUID userId);\n\n    void deleteByQuizIdAndUserId(UUID quizId, UUID userId);\n\n    boolean existsByQuizIdAndUserId(UUID quizId, UUID userId);\n\n    List<UserSavedQuiz> findAllByQuizId(UUID quizId);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.findByUserId(UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.deleteByQuizIdAndUserId(UUID quizId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.existsByQuizIdAndUserId(UUID quizId, UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.findAllByQuizId(UUID quizId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaUserCredentialRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaUserCredentialRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaUserCredentialRepository.java",
    "content": "@Repository\npublic interface JpaUserCredentialRepository extends JpaRepository<UserCredential, UUID> {\n\n    UserCredential findByUserId(UUID userId);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaUserCredentialRepository.findByUserId(UUID userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "JpaUserRepository",
    "full_class_name": "com.edu.onestudy.repository.impl.JpaUserRepository",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\JpaUserRepository.java",
    "content": "@Repository\npublic interface JpaUserRepository extends JpaRepository<User, UUID> {\n\n    Optional<User> findByUsername(String username);\n\n    List<User> findAllByIdIn(List<UUID> userIds);\n\n    Optional<User> findByEmail(String email);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.JpaUserRepository.findByUsername(String username)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaUserRepository.findAllByIdIn(List<UUID> userIds)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.JpaUserRepository.findByEmail(String email)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.pub",
    "class_name": "QuizPubController",
    "full_class_name": "com.edu.onestudy.controller.pub.QuizPubController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\pub\\QuizPubController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/pub/quizzes\")\npublic class QuizPubController {\n\n    private final QuizService quizService;\n\n    public QuizPubController(QuizService quizService) {\n        this.quizService = quizService;\n    }\n\n    @GetMapping\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getAllQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return BaseResponse.ofSucceeded(quizService.getAllPublicQuizzes());\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.pub.QuizPubController.QuizPubController(QuizService quizService)",
        "body": "public QuizPubController(QuizService quizService) {\n        this.quizService = quizService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "QuizService quizService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.pub.QuizPubController.getAllQuizzes(@CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getAllQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return BaseResponse.ofSucceeded(quizService.getAllPublicQuizzes());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(List<Quiz> data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getAllPublicQuizzes()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.pub",
    "class_name": "PronunciationController",
    "full_class_name": "com.edu.onestudy.controller.pub.PronunciationController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\pub\\PronunciationController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/pub/pronunciations\")\npublic class PronunciationController {\n\n    private final BaseService baseService;\n\n    private final PronunciationService pronunciationService;\n\n    public PronunciationController(BaseService baseService, PronunciationService pronunciationService) {\n        this.baseService = baseService;\n        this.pronunciationService = pronunciationService;\n    }\n\n    @GetMapping(\"/samples\")\n    public BaseResponse<Object> getSamplePronunciations(GetSampleRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getSample(request));\n    }\n\n    @PostMapping(\"/accuracy\")\n    public BaseResponse<Object> getAccuracy(@RequestBody PronunciationAccuracyRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getAccuracy(request));\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.pub.PronunciationController.PronunciationController(BaseService baseService, PronunciationService pronunciationService)",
        "body": "public PronunciationController(BaseService baseService, PronunciationService pronunciationService) {\n        this.baseService = baseService;\n        this.pronunciationService = pronunciationService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "PronunciationService pronunciationService",
          "BaseService baseService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.pub.PronunciationController.getSamplePronunciations(GetSampleRequestDto request)",
        "body": "@GetMapping(\"/samples\")\n    public BaseResponse<Object> getSamplePronunciations(GetSampleRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getSample(request));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.PronunciationService.getSample(GetSampleRequestDto request)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/pub/pronunciations/samples",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.pub.PronunciationController.getAccuracy(@RequestBody PronunciationAccuracyRequestDto request)",
        "body": "@PostMapping(\"/accuracy\")\n    public BaseResponse<Object> getAccuracy(@RequestBody PronunciationAccuracyRequestDto request) {\n        return baseService.ofSucceeded(pronunciationService.getAccuracy(request));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.PronunciationService.getAccuracy(PronunciationAccuracyRequestDto request)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/pub/pronunciations/accuracy",
            "produces": "",
            "consumes": ""
          }
        ]
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "QuizAnswerRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\QuizAnswerRepositoryImpl.java",
    "content": "@Repository\npublic class QuizAnswerRepositoryImpl implements QuizAnswerRepository {\n\n    private final JpaQuizAnswerRepository repository;\n\n    public QuizAnswerRepositoryImpl(JpaQuizAnswerRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public QuizAnswer save(QuizAnswer answer) {\n        return repository.save(answer);\n    }\n\n    @Override\n    public void saveAll(List<QuizAnswer> answers) {\n        repository.saveAll(answers);\n    }\n\n    @Override\n    public Optional<QuizAnswer> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    public List<QuizAnswer> findByQuizAttemptId(String attemptId) {\n        return repository.findByQuizAttemptId(UUID.fromString(attemptId));\n    }\n\n    @Override\n    public void delete(QuizAnswer oldAnswer) {\n        repository.delete(oldAnswer);\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.QuizAnswerRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl.QuizAnswerRepositoryImpl(JpaQuizAnswerRepository repository)",
        "body": "public QuizAnswerRepositoryImpl(JpaQuizAnswerRepository repository) {\n        this.repository = repository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaQuizAnswerRepository repository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAnswerRepository.QuizAnswerRepositoryImpl(JpaQuizAnswerRepository repository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl.save(QuizAnswer answer)",
        "body": "@Override\n    public QuizAnswer save(QuizAnswer answer) {\n        return repository.save(answer);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAnswerRepository.save(QuizAnswer answer)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl.saveAll(List<QuizAnswer> answers)",
        "body": "@Override\n    public void saveAll(List<QuizAnswer> answers) {\n        repository.saveAll(answers);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAnswerRepository.saveAll(List<QuizAnswer> answers)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl.findById(String id)",
        "body": "@Override\n    public Optional<QuizAnswer> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAnswerRepository.findById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl.findByQuizAttemptId(String attemptId)",
        "body": "@Override\n    public List<QuizAnswer> findByQuizAttemptId(String attemptId) {\n        return repository.findByQuizAttemptId(UUID.fromString(attemptId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuizAnswerRepository.findByQuizAttemptId(UUID quizAttemptId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAnswerRepository.findByQuizAttemptId(String attemptId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAnswerRepositoryImpl.delete(QuizAnswer oldAnswer)",
        "body": "@Override\n    public void delete(QuizAnswer oldAnswer) {\n        repository.delete(oldAnswer);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAnswerRepository.delete(QuizAnswer oldAnswer)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "QuestionRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\QuestionRepositoryImpl.java",
    "content": "@Repository\npublic class QuestionRepositoryImpl implements QuestionRepository {\n\n    private final JpaQuestionRepository repository;\n\n    public QuestionRepositoryImpl(JpaQuestionRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public Question save(Question question) {\n        return repository.save(question);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Optional<Question> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<Question> findByQuizId(String quizId) {\n        return repository.findByQuizId(UUID.fromString(quizId));\n    }\n\n    @Override\n    public void saveAll(List<Question> questions) {\n        repository.saveAll(questions);\n    }\n\n    @Override\n    public void deleteAll(List<Question> questions) {\n        repository.deleteAll(questions);\n    }\n\n    @Override\n    public Integer countByQuizId(String quizId) {\n        return repository.countByQuizId(UUID.fromString(quizId));\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.QuestionRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.QuestionRepositoryImpl(JpaQuestionRepository repository)",
        "body": "public QuestionRepositoryImpl(JpaQuestionRepository repository) {\n        this.repository = repository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaQuestionRepository repository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.QuestionRepositoryImpl(JpaQuestionRepository repository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.save(Question question)",
        "body": "@Override\n    public Question save(Question question) {\n        return repository.save(question);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.save(Question question)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.findById(String id)",
        "body": "@Override\n    @Transactional(readOnly = true)\n    public Optional<Question> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.findById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.findByQuizId(String quizId)",
        "body": "@Override\n    @Transactional(readOnly = true)\n    public List<Question> findByQuizId(String quizId) {\n        return repository.findByQuizId(UUID.fromString(quizId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuestionRepository.findByQuizId(UUID quizId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.findByQuizId(String quizId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.saveAll(List<Question> questions)",
        "body": "@Override\n    public void saveAll(List<Question> questions) {\n        repository.saveAll(questions);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.saveAll(List<Question> questions)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.deleteAll(List<Question> questions)",
        "body": "@Override\n    public void deleteAll(List<Question> questions) {\n        repository.deleteAll(questions);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.deleteAll(List<Question> questions)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuestionRepositoryImpl.countByQuizId(String quizId)",
        "body": "@Override\n    public Integer countByQuizId(String quizId) {\n        return repository.countByQuizId(UUID.fromString(quizId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuestionRepository.countByQuizId(UUID quizId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuestionRepository.countByQuizId(String quizId)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "QuizAttemptRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\QuizAttemptRepositoryImpl.java",
    "content": "@Repository\npublic class QuizAttemptRepositoryImpl implements QuizAttemptRepository {\n\n    private final JpaQuizAttemptRepository jpaQuizAttemptRepository;\n\n    public QuizAttemptRepositoryImpl(JpaQuizAttemptRepository jpaQuizAttemptRepository) {\n        this.jpaQuizAttemptRepository = jpaQuizAttemptRepository;\n    }\n\n    @Override\n    public QuizAttempt save(QuizAttempt attempt) {\n        return jpaQuizAttemptRepository.save(attempt);\n    }\n\n    @Override\n    public Optional<QuizAttempt> findById(String id) {\n        return jpaQuizAttemptRepository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    public List<QuizAttempt> findAll() {\n        return jpaQuizAttemptRepository.findAll();\n    }\n\n    @Override\n    public List<QuizAttempt> findByUserId(UUID id) {\n        return jpaQuizAttemptRepository.findByUserId(id);\n    }\n\n    @Override\n    public List<QuizAttempt> findByQuizId(String id) {\n        return jpaQuizAttemptRepository.findByQuizId(UUID.fromString(id));\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.QuizAttemptRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl.QuizAttemptRepositoryImpl(JpaQuizAttemptRepository jpaQuizAttemptRepository)",
        "body": "public QuizAttemptRepositoryImpl(JpaQuizAttemptRepository jpaQuizAttemptRepository) {\n        this.jpaQuizAttemptRepository = jpaQuizAttemptRepository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaQuizAttemptRepository jpaQuizAttemptRepository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAttemptRepository.QuizAttemptRepositoryImpl(JpaQuizAttemptRepository jpaQuizAttemptRepository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl.save(QuizAttempt attempt)",
        "body": "@Override\n    public QuizAttempt save(QuizAttempt attempt) {\n        return jpaQuizAttemptRepository.save(attempt);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAttemptRepository.save(QuizAttempt attempt)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl.findById(String id)",
        "body": "@Override\n    public Optional<QuizAttempt> findById(String id) {\n        return jpaQuizAttemptRepository.findById(UUID.fromString(id));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAttemptRepository.findById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl.findAll()",
        "body": "@Override\n    public List<QuizAttempt> findAll() {\n        return jpaQuizAttemptRepository.findAll();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAttemptRepository.findAll()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl.findByUserId(UUID id)",
        "body": "@Override\n    public List<QuizAttempt> findByUserId(UUID id) {\n        return jpaQuizAttemptRepository.findByUserId(id);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuizAttemptRepository.findByUserId(UUID id)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAttemptRepository.findByUserId(UUID id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizAttemptRepositoryImpl.findByQuizId(String id)",
        "body": "@Override\n    public List<QuizAttempt> findByQuizId(String id) {\n        return jpaQuizAttemptRepository.findByQuizId(UUID.fromString(id));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuizAttemptRepository.findByQuizId(UUID quizId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizAttemptRepository.findByQuizId(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "ResourceRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.ResourceRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\ResourceRepositoryImpl.java",
    "content": "@Repository\npublic class ResourceRepositoryImpl implements ResourceRepository {\n\n    private final JpaResourceRepository repository;\n\n    public ResourceRepositoryImpl(JpaResourceRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public Resource save(Resource resource) {\n        return repository.save(resource);\n    }\n\n    @Override\n    public Resource findById(String id) {\n        return repository.findById(UUID.fromString(id)).orElse(null);\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.ResourceRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.ResourceRepositoryImpl.ResourceRepositoryImpl(JpaResourceRepository repository)",
        "body": "public ResourceRepositoryImpl(JpaResourceRepository repository) {\n        this.repository = repository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaResourceRepository repository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.ResourceRepository.ResourceRepositoryImpl(JpaResourceRepository repository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.ResourceRepositoryImpl.save(Resource resource)",
        "body": "@Override\n    public Resource save(Resource resource) {\n        return repository.save(resource);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.ResourceRepository.save(Resource resource)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.ResourceRepositoryImpl.findById(String id)",
        "body": "@Override\n    public Resource findById(String id) {\n        return repository.findById(UUID.fromString(id)).orElse(null);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.ResourceRepository.findById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "QuizRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\QuizRepositoryImpl.java",
    "content": "@Repository\npublic class QuizRepositoryImpl implements QuizRepository {\n\n    private final JpaQuizRepository repository;\n\n    public QuizRepositoryImpl(JpaQuizRepository repository) {\n        this.repository = repository;\n    }\n\n    @Override\n    public void save(Quiz quiz) {\n        repository.save(quiz);\n    }\n\n    @Override\n    public Optional<Quiz> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }\n\n    @Override\n    public List<Quiz> findAll() {\n        return repository.findAll();\n    }\n\n    @Override\n    public List<Quiz> findByUserId(UUID id) {\n        return repository.findByAuthorId(id);\n    }\n\n    @Override\n    public List<Quiz> findByIdIn(Set<String> quizId) {\n        return repository.findByIdIn(quizId.stream()\n                .map(UUID::fromString)\n                .toList());\n    }\n\n    @Override\n    public List<Quiz> findAllPublic() {\n        return repository.findByStatus(QuizStatus.PUBLIC);\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.QuizRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.QuizRepositoryImpl(JpaQuizRepository repository)",
        "body": "public QuizRepositoryImpl(JpaQuizRepository repository) {\n        this.repository = repository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaQuizRepository repository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.QuizRepositoryImpl(JpaQuizRepository repository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.save(Quiz quiz)",
        "body": "@Override\n    public void save(Quiz quiz) {\n        repository.save(quiz);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.save(Quiz quiz)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.findById(String id)",
        "body": "@Override\n    public Optional<Quiz> findById(String id) {\n        return repository.findById(UUID.fromString(id));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.findById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.findAll()",
        "body": "@Override\n    public List<Quiz> findAll() {\n        return repository.findAll();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.findAll()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.findByUserId(UUID id)",
        "body": "@Override\n    public List<Quiz> findByUserId(UUID id) {\n        return repository.findByAuthorId(id);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuizRepository.findByAuthorId(UUID authorId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.findByUserId(UUID id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.findByIdIn(Set<String> quizId)",
        "body": "@Override\n    public List<Quiz> findByIdIn(Set<String> quizId) {\n        return repository.findByIdIn(quizId.stream()\n                .map(UUID::fromString)\n                .toList());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuizRepository.findByIdIn(Collection<UUID> ids)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.findByIdIn(Set<String> quizId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.QuizRepositoryImpl.findAllPublic()",
        "body": "@Override\n    public List<Quiz> findAllPublic() {\n        return repository.findByStatus(QuizStatus.PUBLIC);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaQuizRepository.findByStatus(QuizStatus status)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "PUBLIC"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.QuizRepository.findAllPublic()"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.utils",
    "class_name": "Utils",
    "full_class_name": "com.edu.onestudy.utils.Utils",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\utils\\Utils.java",
    "content": "public class Utils {\n\n    private static final String REGEX_FILTER_KEY =\n            \"[ : ]+((?=\\\\[)\\\\[[^]]*\\\\]|(?=\\\\{)\\\\{[^\\\\}]*\\\\}|\\\\\\\"[^\\\"]*\\\\\\\"|(\\\\d+(\\\\.\\\\d+)?))\";\n    private static final Logger log = LoggerFactory.getLogger(Utils.class);\n\n    static List<String> redactKeys = Collections.unmodifiableList(Arrays.asList(\n            \"api_key\", \"apiKey\", \"api_secret\", \"apiSecret\", \"otp\", \"pin\", \"access_token\", \"accessToken\", \"full_name\",\n            \"fullName\", \"phone_number\", \"phoneNumber\", \"email\", \"mobile_number\", \"mobileNumber\", \"email_address\", \"emailAddress\",\n            \"email_preference\", \"emailReference\", \"authorization\", \"verified_token\", \"verifiedToken\", \"x-api-secret\", \"xApiSecret\",\n            \"x-api-key\", \"xApiKey\", \"Authorization\", \"partner\", \"client_id\", \"clientId\", \"public_key\", \"publicKey\",\n            \"private_key\", \"privateKey\", \"x-public-key\", \"xPublicKey\", \"x-private-key\", \"xPrivateKey\", \"newrelic\",\n            \"refresh_token\", \"refreshToken\", \"password\", \"passcode\"));\n\n    public static long genAutoId(String key) {\n        if (StringUtils.isBlank(key)) {\n            key = UUID.randomUUID().toString();\n        }\n        byte[] bytes = key.getBytes(StandardCharsets.UTF_8);\n        long h = MurmurHash3.hash64(bytes);\n        return Math.abs(h);\n    }\n\n\n    public static String redact(@NonNull String string) {\n        try {\n            for (String key : redactKeys) {\n                Matcher matcher = Pattern.compile(String.format(\"\\\"%s\\\"%s\", key, REGEX_FILTER_KEY)).matcher(string);\n                if (matcher.find() && matcher.group(1) != null) {\n                    String group = matcher.group(1);\n                    if (!ObjectUtils.isEmpty(group.trim()) && !\"\\\"\\\"\".equals(group)) {\n                        string = string.replace(group, \"\\\"**********\\\"\");\n                    }\n                }\n            }\n            return string;\n        } catch (Exception e) {\n            return string;\n        }\n    }\n\n    public static <T> Map<String, T> convertListToMap(List<T> list, Function<T, String> keyExtractor) {\n        return list.stream().collect(Collectors.toMap(keyExtractor, Function.identity(), (oldVal, newVal) -> newVal));\n    }\n\n    public static String convertDateToyyyyMMdd(Long input){\n        String pattern = \"yyyyMMdd\";\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);\n        Date date = new Date(input);\n        return simpleDateFormat.format(date);\n    }\n\n    public static boolean isMatchRegex(String str, String regex) {\n        try {\n            if (str == null || regex == null) {\n                return false;\n            }\n\n            Pattern pattern = Pattern.compile(regex);\n            Matcher matcher = pattern.matcher(str);\n\n            return matcher.matches();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return false;\n        }\n\n    }\n\n\n    public static String[] getBlankProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }\n\n    public static String[] getExistedProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }\n\n    public static <T extends Enum<T>> T enumOf(Class<T> enumType, String value) {\n        return Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value))\n                .findFirst()\n                .orElse(null);\n    }\n\n    public static LocalDateTime stringToLocalDateTime(String dateOfBirth) {\n        if (StringUtils.isBlank(dateOfBirth)) {\n            return null;\n        }\n        return LocalDateTime.parse(dateOfBirth);\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.utils.Utils.genAutoId(String key)",
        "body": "public static long genAutoId(String key) {\n        if (StringUtils.isBlank(key)) {\n            key = UUID.randomUUID().toString();\n        }\n        byte[] bytes = key.getBytes(StandardCharsets.UTF_8);\n        long h = MurmurHash3.hash64(bytes);\n        return Math.abs(h);\n    }",
        "method_calls": [
          {
            "name": "io.micrometer.common.util.StringUtils.isBlank(@Nullable String string)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "Charset UTF_8"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.redact(@NonNull String string)",
        "body": "public static String redact(@NonNull String string) {\n        try {\n            for (String key : redactKeys) {\n                Matcher matcher = Pattern.compile(String.format(\"\\\"%s\\\"%s\", key, REGEX_FILTER_KEY)).matcher(string);\n                if (matcher.find() && matcher.group(1) != null) {\n                    String group = matcher.group(1);\n                    if (!ObjectUtils.isEmpty(group.trim()) && !\"\\\"\\\"\".equals(group)) {\n                        string = string.replace(group, \"\\\"**********\\\"\");\n                    }\n                }\n            }\n            return string;\n        } catch (Exception e) {\n            return string;\n        }\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.convertListToMap(List<T> list, Function<T, String> keyExtractor)",
        "body": "public static <T> Map<String, T> convertListToMap(List<T> list, Function<T, String> keyExtractor) {\n        return list.stream().collect(Collectors.toMap(keyExtractor, Function.identity(), (oldVal, newVal) -> newVal));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.convertDateToyyyyMMdd(Long input)",
        "body": "public static String convertDateToyyyyMMdd(Long input){\n        String pattern = \"yyyyMMdd\";\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);\n        Date date = new Date(input);\n        return simpleDateFormat.format(date);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.isMatchRegex(String str, String regex)",
        "body": "public static boolean isMatchRegex(String str, String regex) {\n        try {\n            if (str == null || regex == null) {\n                return false;\n            }\n\n            Pattern pattern = Pattern.compile(regex);\n            Matcher matcher = pattern.matcher(str);\n\n            return matcher.matches();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return false;\n        }\n\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.getBlankProperties(Object obj)",
        "body": "public static String[] getBlankProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        return value == null || (value instanceof String && StringUtils.isBlank((String) value));\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }",
        "method_calls": [
          {
            "name": "io.micrometer.common.util.StringUtils.isBlank(@Nullable String string)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.getExistedProperties(Object obj)",
        "body": "public static String[] getExistedProperties(Object obj) {\n        return Arrays.stream(obj.getClass().getDeclaredFields())\n                .filter(f -> {\n                    f.setAccessible(true);\n                    try {\n                        Object value = f.get(obj);\n                        if (value instanceof String) {\n                            return !StringUtils.isBlank((String) value);\n                        }\n                        return value != null;\n                    } catch (IllegalAccessException e) {\n                        return true;\n                    }\n                })\n                .map(Field::getName)\n                .toArray(String[]::new);\n    }",
        "method_calls": [
          {
            "name": "io.micrometer.common.util.StringUtils.isBlank(@Nullable String string)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.enumOf(Class<T> enumType, String value)",
        "body": "public static <T extends Enum<T>> T enumOf(Class<T> enumType, String value) {\n        return Arrays.stream(enumType.getEnumConstants())\n                .filter(e -> e.name().equalsIgnoreCase(value))\n                .findFirst()\n                .orElse(null);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.utils.Utils.stringToLocalDateTime(String dateOfBirth)",
        "body": "public static LocalDateTime stringToLocalDateTime(String dateOfBirth) {\n        if (StringUtils.isBlank(dateOfBirth)) {\n            return null;\n        }\n        return LocalDateTime.parse(dateOfBirth);\n    }",
        "method_calls": [
          {
            "name": "io.micrometer.common.util.StringUtils.isBlank(@Nullable String string)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "SavedQuizRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\SavedQuizRepositoryImpl.java",
    "content": "@Repository\npublic class SavedQuizRepositoryImpl implements SavedQuizRepository {\n\n    private final JpaSavedQuizRepository jpaSavedQuizRepository;\n\n    public SavedQuizRepositoryImpl(JpaSavedQuizRepository jpaSavedQuizRepository) {\n        this.jpaSavedQuizRepository = jpaSavedQuizRepository;\n    }\n\n    @Override\n    public void saveQuiz(String quizId, String userId) {\n        UserSavedQuiz savedQuiz = new UserSavedQuiz();\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setQuizId(UUID.fromString(quizId));\n        savedQuiz.setUserId(UUID.fromString(userId));\n        jpaSavedQuizRepository.save(savedQuiz);\n    }\n\n    @Override\n    public List<UserSavedQuiz> findAllByUserId(String userId) {\n        return jpaSavedQuizRepository.findByUserId(UUID.fromString(userId));\n    }\n\n    @Override\n    public void deleteByQuizIdAndUserId(String quizId, String userId) {\n        jpaSavedQuizRepository.deleteByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }\n\n    @Override\n    public boolean existsByQuizIdAndUserId(String quizId, String userId) {\n        return jpaSavedQuizRepository.existsByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }\n\n    @Override\n    public List<UserSavedQuiz> findAllByQuizId(String quizId) {\n        return jpaSavedQuizRepository.findAllByQuizId(UUID.fromString(quizId));\n    }\n\n    @Override\n    public void update(UserSavedQuiz savedQuiz) {\n        jpaSavedQuizRepository.save(savedQuiz);\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.SavedQuizRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.SavedQuizRepositoryImpl(JpaSavedQuizRepository jpaSavedQuizRepository)",
        "body": "public SavedQuizRepositoryImpl(JpaSavedQuizRepository jpaSavedQuizRepository) {\n        this.jpaSavedQuizRepository = jpaSavedQuizRepository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaSavedQuizRepository jpaSavedQuizRepository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.SavedQuizRepositoryImpl(JpaSavedQuizRepository jpaSavedQuizRepository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.saveQuiz(String quizId, String userId)",
        "body": "@Override\n    public void saveQuiz(String quizId, String userId) {\n        UserSavedQuiz savedQuiz = new UserSavedQuiz();\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setQuizId(UUID.fromString(quizId));\n        savedQuiz.setUserId(UUID.fromString(userId));\n        jpaSavedQuizRepository.save(savedQuiz);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.setSavedAt(LocalDateTime savedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.setQuizId(UUID quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.setUserId(UUID userId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserSavedQuiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.saveQuiz(String quizId, String userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.findAllByUserId(String userId)",
        "body": "@Override\n    public List<UserSavedQuiz> findAllByUserId(String userId) {\n        return jpaSavedQuizRepository.findByUserId(UUID.fromString(userId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.findByUserId(UUID userId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.findAllByUserId(String userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.deleteByQuizIdAndUserId(String quizId, String userId)",
        "body": "@Override\n    public void deleteByQuizIdAndUserId(String quizId, String userId) {\n        jpaSavedQuizRepository.deleteByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.deleteByQuizIdAndUserId(UUID quizId, UUID userId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.deleteByQuizIdAndUserId(String quizId, String userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.existsByQuizIdAndUserId(String quizId, String userId)",
        "body": "@Override\n    public boolean existsByQuizIdAndUserId(String quizId, String userId) {\n        return jpaSavedQuizRepository.existsByQuizIdAndUserId(UUID.fromString(quizId), UUID.fromString(userId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.existsByQuizIdAndUserId(UUID quizId, UUID userId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.existsByQuizIdAndUserId(String quizId, String userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.findAllByQuizId(String quizId)",
        "body": "@Override\n    public List<UserSavedQuiz> findAllByQuizId(String quizId) {\n        return jpaSavedQuizRepository.findAllByQuizId(UUID.fromString(quizId));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaSavedQuizRepository.findAllByQuizId(UUID quizId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.findAllByQuizId(String quizId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.SavedQuizRepositoryImpl.update(UserSavedQuiz savedQuiz)",
        "body": "@Override\n    public void update(UserSavedQuiz savedQuiz) {\n        jpaSavedQuizRepository.save(savedQuiz);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.SavedQuizRepository.update(UserSavedQuiz savedQuiz)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.controller.external",
    "class_name": "QuizController",
    "full_class_name": "com.edu.onestudy.controller.external.QuizController",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\controller\\external\\QuizController.java",
    "content": "@RestController\n@RequestMapping(\"/api/v1/quizzes\")\npublic class QuizController {\n\n    private final QuizService quizService;\n\n    private final BaseService baseService;\n\n    public QuizController(QuizService quizService, BaseService baseService) {\n        this.quizService = quizService;\n        this.baseService = baseService;\n    }\n\n    @PostMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> createQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.createQuiz(request, currentUser.getId()));\n    }\n\n    @PutMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> updateQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.updateQuiz(request));\n    }\n\n    @GetMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getById(id));\n    }\n\n    @GetMapping(\"/{id}/stats\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizStatsById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getQuizStatsById(id));\n    }\n\n    @GetMapping(\"/my\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getMyQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizzes(currentUser.getId()));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<?> deleteQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.deleteQuiz(id);\n        return baseService.ofSucceeded(null);\n    }\n\n    @PostMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> saveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.saveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }\n\n    @DeleteMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> unsaveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.unsaveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }\n\n    @GetMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<UserSavedQuiz>> getListUserSavedQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getUserSavedQuiz(id, currentUser.getId()));\n    }\n\n    @GetMapping(\"/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getSavedQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getSavedQuizzes(currentUser.getId()));\n    }\n\n    @PostMapping(\"/{id}/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<?> attemptQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.startQuiz(id, currentUser.getId()));\n    }\n\n    @GetMapping(\"/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getQuizAttempts(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizAttempts(currentUser.getId().toString()));\n    }\n\n    @GetMapping(\"/attempts/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<QuizAttempt> getQuizAttempt(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getAttempt(id, currentUser.getId()));\n    }\n\n    @PostMapping(\"/attempts/{attempt_id}/submit-question\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizQuestion(@PathVariable String attempt_id, @RequestBody SubmitAnswerRequest request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.submitQuizQuestion(attempt_id, request, currentUser.getId()));\n    }\n\n    @PostMapping(\"/attempts/{attempt_id}/complete\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizComplete(@PathVariable String attempt_id, @CurrentUser UserPrincipal currentUser) {\n        quizService.submitQuizComplete(attempt_id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.controller.external.QuizController.QuizController(QuizService quizService, BaseService baseService)",
        "body": "public QuizController(QuizService quizService, BaseService baseService) {\n        this.quizService = quizService;\n        this.baseService = baseService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "QuizService quizService",
          "BaseService baseService"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.createQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser)",
        "body": "@PostMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> createQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.createQuiz(request, currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(BaseCreateUpdateResponse data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.createQuiz(CreateQuizDto request, UUID authorId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.updateQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser)",
        "body": "@PutMapping\n    @LogsActivityAnnotation\n    BaseResponse<?> updateQuiz(@RequestBody CreateQuizDto request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.updateQuiz(request));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.QuizService.updateQuiz(CreateQuizDto request)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getQuizById(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getById(id));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Quiz data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getById(String id)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/{id}",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getQuizStatsById(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/{id}/stats\")\n    @LogsActivityAnnotation\n    BaseResponse<Quiz> getQuizStatsById(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getQuizStatsById(id));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Quiz data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getQuizStatsById(String id)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/{id}/stats",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getMyQuizzes(@CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/my\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getMyQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizzes(currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(List<Quiz> data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getMyQuizzes(UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/my",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.deleteQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@DeleteMapping(\"/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<?> deleteQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.deleteQuiz(id);\n        return baseService.ofSucceeded(null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.QuizService.deleteQuiz(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "DELETE",
            "path": "/api/v1/quizzes/{id}",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.saveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@PostMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> saveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.saveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.QuizService.saveQuiz(String quizId, UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/quizzes/{id}/save",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.unsaveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@DeleteMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<?> unsaveQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        quizService.unsaveQuiz(id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.QuizService.unsaveQuiz(String quizId, UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "DELETE",
            "path": "/api/v1/quizzes/{id}/save",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getListUserSavedQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/{id}/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<UserSavedQuiz>> getListUserSavedQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getUserSavedQuiz(id, currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(List<UserSavedQuiz> data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getUserSavedQuiz(String quizId, UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/{id}/save",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getSavedQuizzes(@CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/save\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getSavedQuizzes(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getSavedQuizzes(currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(List<Quiz> data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getSavedQuizzes(UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/save",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.attemptQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@PostMapping(\"/{id}/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<?> attemptQuiz(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.startQuiz(id, currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(BaseCreateUpdateResponse data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.startQuiz(String quizId, UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/quizzes/{id}/attempts",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getQuizAttempts(@CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/attempts\")\n    @LogsActivityAnnotation\n    BaseResponse<List<Quiz>> getQuizAttempts(@CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getMyQuizAttempts(currentUser.getId().toString()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(List<Quiz> data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getMyQuizAttempts(String string)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/attempts",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.getQuizAttempt(@PathVariable String id, @CurrentUser UserPrincipal currentUser)",
        "body": "@GetMapping(\"/attempts/{id}\")\n    @LogsActivityAnnotation\n    BaseResponse<QuizAttempt> getQuizAttempt(@PathVariable String id, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.getAttempt(id, currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(QuizAttempt data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.getAttempt(String attemptId, UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/v1/quizzes/attempts/{id}",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.submitQuizQuestion(@PathVariable String attempt_id, @RequestBody SubmitAnswerRequest request, @CurrentUser UserPrincipal currentUser)",
        "body": "@PostMapping(\"/attempts/{attempt_id}/submit-question\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizQuestion(@PathVariable String attempt_id, @RequestBody SubmitAnswerRequest request, @CurrentUser UserPrincipal currentUser) {\n        return baseService.ofSucceeded(quizService.submitQuizQuestion(attempt_id, request, currentUser.getId()));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(BaseCreateUpdateResponse data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.QuizService.submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/quizzes/attempts/{attempt_id}/submit-question",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.controller.external.QuizController.submitQuizComplete(@PathVariable String attempt_id, @CurrentUser UserPrincipal currentUser)",
        "body": "@PostMapping(\"/attempts/{attempt_id}/complete\")\n    @LogsActivityAnnotation\n    BaseResponse<?> submitQuizComplete(@PathVariable String attempt_id, @CurrentUser UserPrincipal currentUser) {\n        quizService.submitQuizComplete(attempt_id, currentUser.getId());\n        return baseService.ofSucceeded(null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.QuizService.submitQuizComplete(String attemptId, UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.UserPrincipal.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofSucceeded(Object data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/v1/quizzes/attempts/{attempt_id}/complete",
            "produces": "",
            "consumes": ""
          }
        ]
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service.impl",
    "class_name": "QuestionServiceImpl",
    "full_class_name": "com.edu.onestudy.service.impl.QuestionServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\impl\\QuestionServiceImpl.java",
    "content": "@Service\npublic class QuestionServiceImpl implements QuestionService {\n\n    private final QuestionRepository questionRepository;\n\n    public QuestionServiceImpl(QuestionRepository questionRepository) {\n        this.questionRepository = questionRepository;\n    }\n\n    @Override\n    public BaseCreateUpdateResponse createQuestion(QuestionDto request, UUID authorId) {\n        return null;\n    }\n\n    @Override\n    public BaseCreateUpdateResponse updateQuestion(QuestionDto request) {\n        return null;\n    }\n\n    @Override\n    public List<Question> getAllQuestions() {\n        return List.of();\n    }\n\n    @Override\n    public List<Question> getMyQuestions(UUID id) {\n        return List.of();\n    }\n\n    @Override\n    public Question getById(String id) {\n        return null;\n    }\n\n    @Override\n    public void deleteQuestion(String id) {\n\n    }\n}",
    "implements": [
      "com.edu.onestudy.service.QuestionService"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.QuestionServiceImpl(QuestionRepository questionRepository)",
        "body": "public QuestionServiceImpl(QuestionRepository questionRepository) {\n        this.questionRepository = questionRepository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "QuestionRepository questionRepository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.QuestionServiceImpl(QuestionRepository questionRepository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.createQuestion(QuestionDto request, UUID authorId)",
        "body": "@Override\n    public BaseCreateUpdateResponse createQuestion(QuestionDto request, UUID authorId) {\n        return null;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.createQuestion(QuestionDto request, UUID authorId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.updateQuestion(QuestionDto request)",
        "body": "@Override\n    public BaseCreateUpdateResponse updateQuestion(QuestionDto request) {\n        return null;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.updateQuestion(QuestionDto request)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.getAllQuestions()",
        "body": "@Override\n    public List<Question> getAllQuestions() {\n        return List.of();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.getAllQuestions()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.getMyQuestions(UUID id)",
        "body": "@Override\n    public List<Question> getMyQuestions(UUID id) {\n        return List.of();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.getMyQuestions(UUID id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.getById(String id)",
        "body": "@Override\n    public Question getById(String id) {\n        return null;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.getById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuestionServiceImpl.deleteQuestion(String id)",
        "body": "@Override\n    public void deleteQuestion(String id) {\n\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuestionService.deleteQuestion(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.dto",
    "class_name": "BaseResponse",
    "full_class_name": "com.edu.onestudy.dto.BaseResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\dto\\BaseResponse.java",
    "content": "@Data\n@Accessors(chain = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Slf4j\n@NoArgsConstructor\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@SuperBuilder\npublic class BaseResponse<T> {\n\n    private Meta meta = new Meta();\n\n    private T data;\n\n    public BaseResponse(Meta meta, T data) {\n        this.meta = meta;\n        this.data = data;\n    }\n\n    public static void verifyMetaResponse(BaseResponse<?> baseResponse, HttpStatus httpStatus, int status) {\n        if (Objects.isNull(baseResponse) || Objects.isNull(baseResponse.meta)) {\n            return;\n        }\n\n        Meta meta = baseResponse.meta;\n        if (status != meta.getCode()) {\n            throw new BusinessException(meta.getCode(), meta.getMessage(), httpStatus);\n        }\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded(T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.data = data;\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        response.meta.setMessage(\"OK\");\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded() {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        return response;\n    }\n\n    public static BaseResponse ofFailed(BusinessError error) {\n        return ofFailed(error, null);\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessError error, T data) {\n        return ofFailed(error, null, data);\n    }\n\n    public static BaseResponse ofFailed(BusinessError error, String message) {\n        return ofFailed(error, message, null);\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return ofFailed(error, message, null, data);\n    }\n\n    public static BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        response.data = data;\n        return response;\n    }\n\n    public static BaseResponse ofFailed(BusinessException exception) {\n        return ofFailed(exception.getError(), exception.getMessage());\n    }\n\n    public static <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return ofFailed(exception.getError(), exception.getMessage(), data);\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded(String requestId, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n    public static <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestList.getRequestId());\n        response.meta.setPageSize(requestList.getPageSize());\n        response.meta.setPageIndex(requestList.getPageIndex());\n        response.meta.setTotalItems(requestList.getTotalItems());\n        response.data = data;\n        return response;\n    }\n    public static <T> BaseResponse<T> ofSucceeded(BasicRequest request, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(request.getRequestId());\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofSucceeded(String requestId) {\n        BaseResponse<T> response = ofSucceeded();\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessError error) {\n        BaseResponse response = ofFailed(error);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessError error, String message) {\n        BaseResponse response = ofFailed(error, message);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, T data) {\n        BaseResponse<T> response = ofFailed(error, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, T data) {\n        BaseResponse<T> response = ofFailed(error, message, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = ofFailed(error, message, errors);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = ofFailed(error, message, errors, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n\n    public static BaseResponse ofFailed(String requestId, BusinessException exception) {\n        BaseResponse response = ofFailed(exception);\n        response.meta.setRequestId(requestId);\n        return response;\n    }\n\n    public static <T> BaseResponse<T> ofFailed(String requestId, BusinessException exception, T data) {\n        BaseResponse<T> response = ofFailed(exception, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.dto.BaseResponse.BaseResponse(Meta meta, T data)",
        "body": "public BaseResponse(Meta meta, T data) {\n        this.meta = meta;\n        this.data = data;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.verifyMetaResponse(BaseResponse<?> baseResponse, HttpStatus httpStatus, int status)",
        "body": "public static void verifyMetaResponse(BaseResponse<?> baseResponse, HttpStatus httpStatus, int status) {\n        if (Objects.isNull(baseResponse) || Objects.isNull(baseResponse.meta)) {\n            return;\n        }\n\n        Meta meta = baseResponse.meta;\n        if (status != meta.getCode()) {\n            throw new BusinessException(meta.getCode(), meta.getMessage(), httpStatus);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.Meta.getCode()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.getMessage()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.Meta"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(T data)",
        "body": "public static <T> BaseResponse<T> ofSucceeded(T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.data = data;\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        response.meta.setMessage(\"OK\");\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.Meta.setCode(Integer code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setMessage(String message)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta",
          "int SUCCESS = 200000"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded()",
        "body": "public static <T> BaseResponse<T> ofSucceeded() {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(ErrorConstant.SUCCESS);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.Meta.setCode(Integer code)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta",
          "int SUCCESS = 200000"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error)",
        "body": "public static BaseResponse ofFailed(BusinessError error) {\n        return ofFailed(error, null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(BusinessError error, T data) {\n        return ofFailed(error, null, data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, T data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message)",
        "body": "public static BaseResponse ofFailed(BusinessError error, String message) {\n        return ofFailed(error, message, null);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, List<ErrorViolation> errors)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, T data) {\n        return ofFailed(error, message, null, data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, List<ErrorViolation> errors)",
        "body": "public static BaseResponse ofFailed(BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.Meta.setCode(Integer code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getCode()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setMessage(String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getMessage()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setErrors(List<ErrorViolation> errors)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.getDescription()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = new BaseResponse<>();\n        response.meta.setCode(error.getCode());\n        response.meta.setMessage((message != null) ? message : error.getMessage());\n        response.meta.setErrors((errors != null) ? new ArrayList<>(errors) : null);\n        if(errors != null && errors.size() > 0) {\n            response.meta.setMessage(errors.get(0).getDescription());\n        }\n        response.data = data;\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.Meta.setCode(Integer code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getCode()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setMessage(String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getMessage()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setErrors(List<ErrorViolation> errors)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.getDescription()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessException exception)",
        "body": "public static BaseResponse ofFailed(BusinessException exception) {\n        return ofFailed(exception.getError(), exception.getMessage());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessException.getError()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessException exception, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(BusinessException exception, T data) {\n        return ofFailed(exception.getError(), exception.getMessage(), data);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessException.getError()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(String requestId, T data)",
        "body": "public static <T> BaseResponse<T> ofSucceeded(String requestId, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofGetListSucceeded(T data, BasicRequestList requestList)",
        "body": "public static <T> BaseResponse<T> ofGetListSucceeded(T data, BasicRequestList requestList) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(requestList.getRequestId());\n        response.meta.setPageSize(requestList.getPageSize());\n        response.meta.setPageIndex(requestList.getPageIndex());\n        response.meta.setTotalItems(requestList.getTotalItems());\n        response.data = data;\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BasicRequest.getRequestId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setPageSize(Long pageSize)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BasicRequestList.getPageSize()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setPageIndex(Long pageIndex)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BasicRequestList.getPageIndex()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setTotalItems(Long totalItems)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BasicRequestList.getTotalItems()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(BasicRequest request, T data)",
        "body": "public static <T> BaseResponse<T> ofSucceeded(BasicRequest request, T data) {\n        BaseResponse<T> response = ofSucceeded(data);\n        response.meta.setRequestId(request.getRequestId());\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BasicRequest.getRequestId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded(String requestId)",
        "body": "public static <T> BaseResponse<T> ofSucceeded(String requestId) {\n        BaseResponse<T> response = ofSucceeded();\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofSucceeded()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error)",
        "body": "public static BaseResponse ofFailed(String requestId, BusinessError error) {\n        BaseResponse response = ofFailed(error);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message)",
        "body": "public static BaseResponse ofFailed(String requestId, BusinessError error, String message) {\n        BaseResponse response = ofFailed(error, message);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, T data) {\n        BaseResponse<T> response = ofFailed(error, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, T data) {\n        BaseResponse<T> response = ofFailed(error, message, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors)",
        "body": "public static BaseResponse ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors) {\n        BaseResponse response = ofFailed(error, message, errors);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, List<ErrorViolation> errors)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessError error, String message, List<ErrorViolation> errors, T data) {\n        BaseResponse<T> response = ofFailed(error, message, errors, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessError error, String message, List<ErrorViolation> errors, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessException exception)",
        "body": "public static BaseResponse ofFailed(String requestId, BusinessException exception) {\n        BaseResponse response = ofFailed(exception);\n        response.meta.setRequestId(requestId);\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessException exception)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(String requestId, BusinessException exception, T data)",
        "body": "public static <T> BaseResponse<T> ofFailed(String requestId, BusinessException exception, T data) {\n        BaseResponse<T> response = ofFailed(exception, data);\n        response.meta.setRequestId(requestId);\n        response.data = data;\n        return response;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.BaseResponse.ofFailed(BusinessException exception, T data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setRequestId(String requestId)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "T data",
          "Meta meta"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.pronunciation_svc",
    "class_name": "PronunciationFeignClient",
    "full_class_name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationFeignClient",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\pronunciation_svc\\PronunciationFeignClient.java",
    "content": "@FeignClient(\n        name = \"pronunciation-service\",\n        url = \"${thirdparty.pronunciation.service.url}\"\n)\npublic interface PronunciationFeignClient {\n\n    @PostMapping(value = \"/GetAccuracyFromRecordedAudio\", produces = \"application/json\")\n    PronunciationAccuracyResponse getAccuracyFromRecordedAudio(@RequestBody PronunciationAccuracyRequest request);\n\n    @PostMapping(value = \"/getSample\", produces = \"application/json\")\n    GetSampleResponse getSample(@RequestBody GetSampleRequest request);\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationFeignClient.getAccuracyFromRecordedAudio(@RequestBody PronunciationAccuracyRequest request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/GetAccuracyFromRecordedAudio",
            "produces": "",
            "consumes": ""
          }
        ]
      },
      {
        "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationFeignClient.getSample(@RequestBody GetSampleRequest request)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/getSample",
            "produces": "",
            "consumes": ""
          }
        ]
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.repository.impl",
    "class_name": "UserRepositoryImpl",
    "full_class_name": "com.edu.onestudy.repository.impl.UserRepositoryImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\repository\\impl\\UserRepositoryImpl.java",
    "content": "@Repository\npublic class UserRepositoryImpl implements UserRepository {\n\n    private final JpaUserRepository repository;\n\n    private final JpaUserCredentialRepository userCredentialRepository;\n\n    public UserRepositoryImpl(JpaUserRepository repository, JpaUserCredentialRepository userCredentialRepository) {\n        this.repository = repository;\n        this.userCredentialRepository = userCredentialRepository;\n    }\n\n    @Override\n    public Optional<User> getUserById(String userId) {\n        return repository.findById(UUID.fromString(userId));\n    }\n\n    @Override\n    public Optional<User> getByUsername(String username) {\n        return repository.findByUsername(username);\n    }\n\n    @Override\n    public Optional<User> getByUsernameForAuth(String username) {\n        Optional<User> user = repository.findByUsername(username);\n        if (user.isPresent()) {\n            UserCredential credentials = userCredentialRepository.findByUserId(user.get().getId());\n            user.get().setCredentials(credentials);\n            return user;\n        }\n        return Optional.empty();\n    }\n\n    @Override\n    public User persist(User user) {\n        User userRes = repository.save(user);\n        UserCredential credentials = user.getCredentials();\n        credentials.setUserId(userRes.getId());\n        userCredentialRepository.save(credentials);\n        return userRes;\n    }\n\n    @Override\n    public List<User> getByUserIdList(List<UUID> studentIds) {\n        return repository.findAllById(studentIds);\n    }\n\n    @Override\n    public List<BasicUserDto> basicSearch(String keyword) {\n        return List.of();\n    }\n\n    @Override\n    public Optional<User> getByEmail(String email) {\n        return repository.findByEmail(email);\n    }\n}",
    "implements": [
      "com.edu.onestudy.repository.UserRepository"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.UserRepositoryImpl(JpaUserRepository repository, JpaUserCredentialRepository userCredentialRepository)",
        "body": "public UserRepositoryImpl(JpaUserRepository repository, JpaUserCredentialRepository userCredentialRepository) {\n        this.repository = repository;\n        this.userCredentialRepository = userCredentialRepository;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "JpaUserRepository repository",
          "JpaUserCredentialRepository userCredentialRepository"
        ],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.UserRepositoryImpl(JpaUserRepository repository, JpaUserCredentialRepository userCredentialRepository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.getUserById(String userId)",
        "body": "@Override\n    public Optional<User> getUserById(String userId) {\n        return repository.findById(UUID.fromString(userId));\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.getUserById(String userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.getByUsername(String username)",
        "body": "@Override\n    public Optional<User> getByUsername(String username) {\n        return repository.findByUsername(username);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaUserRepository.findByUsername(String username)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.getByUsername(String username)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.getByUsernameForAuth(String username)",
        "body": "@Override\n    public Optional<User> getByUsernameForAuth(String username) {\n        Optional<User> user = repository.findByUsername(username);\n        if (user.isPresent()) {\n            UserCredential credentials = userCredentialRepository.findByUserId(user.get().getId());\n            user.get().setCredentials(credentials);\n            return user;\n        }\n        return Optional.empty();\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaUserRepository.findByUsername(String username)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.impl.JpaUserCredentialRepository.findByUserId(UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.setCredentials(UserCredential credentials)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserCredential",
          "com.edu.onestudy.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.getByUsernameForAuth(String username)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.persist(User user)",
        "body": "@Override\n    public User persist(User user) {\n        User userRes = repository.save(user);\n        UserCredential credentials = user.getCredentials();\n        credentials.setUserId(userRes.getId());\n        userCredentialRepository.save(credentials);\n        return userRes;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.entity.User.getCredentials()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserCredential.setUserId(UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserCredential",
          "com.edu.onestudy.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.persist(User user)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.getByUserIdList(List<UUID> studentIds)",
        "body": "@Override\n    public List<User> getByUserIdList(List<UUID> studentIds) {\n        return repository.findAllById(studentIds);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.getByUserIdList(List<UUID> studentIds)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.basicSearch(String keyword)",
        "body": "@Override\n    public List<BasicUserDto> basicSearch(String keyword) {\n        return List.of();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.basicSearch(String keyword)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.repository.impl.UserRepositoryImpl.getByEmail(String email)",
        "body": "@Override\n    public Optional<User> getByEmail(String email) {\n        return repository.findByEmail(email);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.impl.JpaUserRepository.findByEmail(String email)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.repository.UserRepository.getByEmail(String email)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.exception",
    "class_name": "CommonExceptionHandler",
    "full_class_name": "com.edu.onestudy.exception.CommonExceptionHandler",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\exception\\CommonExceptionHandler.java",
    "content": "@Controller\n@ControllerAdvice\n@Slf4j\npublic class CommonExceptionHandler extends BaseService {\n\n    @ExceptionHandler(BusinessException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleBusinessException(BusinessException exception) {\n        exception.getError().setMessage(getMessage(exception.getError()));\n        Object dataException = exception.getError().getData();\n        BaseResponse<?> data = ofFailed(exception);\n        if(!ObjectUtils.isEmpty(dataException) && dataException instanceof String) {\n            data.getMeta().setErrors(Collections.singletonList(\n                ErrorViolation.builder().description((String) dataException).build()));\n        }\n        return new ResponseEntity<>(data, exception.getError().getHttpStatus() == null\n                ? HttpStatus.OK : exception.getError().getHttpStatus());\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MethodArgumentNotValidException exception) {\n        List<ErrorViolation> errors = exception.getBindingResult().getFieldErrors().stream()\n            .map(e -> ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField()))\n                .code(Integer.toString(getErrorCode(e.getDefaultMessage(), ErrorConstant.INVALID_PARAMETERS)))\n                .description(getMessage(e.getDefaultMessage()))\n                .build())\n            .collect(Collectors.toList());\n\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), errors);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(MissingServletRequestParameterException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MissingServletRequestParameterException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"Param \" + exception.getParameterName() + \" is required\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(Exception.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(Exception exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), null);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(HttpMessageNotReadableException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"invalid parameter\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleIllegalArgumentException(IllegalArgumentException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }\n\n    @ExceptionHandler(HttpStatusCodeException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleHttpStatusCodeException(HttpStatusCodeException exception) {\n        HttpStatus statusCode = (HttpStatus) exception.getStatusCode();\n\n        if (statusCode.value() == HttpStatus.BAD_REQUEST.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.UNAUTHORIZED.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.UNAUTHORIZED);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.FORBIDDEN.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.FORBIDDEN_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.NOT_FOUND.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.NOT_FOUND);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.INTERNAL_SERVER_ERROR.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        throw exception;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleBusinessException(BusinessException exception)",
        "body": "@ExceptionHandler(BusinessException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleBusinessException(BusinessException exception) {\n        exception.getError().setMessage(getMessage(exception.getError()));\n        Object dataException = exception.getError().getData();\n        BaseResponse<?> data = ofFailed(exception);\n        if(!ObjectUtils.isEmpty(dataException) && dataException instanceof String) {\n            data.getMeta().setErrors(Collections.singletonList(\n                ErrorViolation.builder().description((String) dataException).build()));\n        }\n        return new ResponseEntity<>(data, exception.getError().getHttpStatus() == null\n                ? HttpStatus.OK : exception.getError().getHttpStatus());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.exception.BusinessException.getError()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.setMessage(String message)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(BusinessError error)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getData()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessException exception)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.BaseResponse.getMeta()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.Meta.setErrors(List<ErrorViolation> errors)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.ErrorViolationBuilder.description(String description)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.ErrorViolationBuilder.build()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getHttpStatus()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "OK"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleMethodArgumentNotValidException(MethodArgumentNotValidException exception)",
        "body": "@ExceptionHandler(MethodArgumentNotValidException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MethodArgumentNotValidException exception) {\n        List<ErrorViolation> errors = exception.getBindingResult().getFieldErrors().stream()\n            .map(e -> ErrorViolation.builder()\n                .field(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, e.getField()))\n                .code(Integer.toString(getErrorCode(e.getDefaultMessage(), ErrorConstant.INVALID_PARAMETERS)))\n                .description(getMessage(e.getDefaultMessage()))\n                .build())\n            .collect(Collectors.toList());\n\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), errors);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.ErrorViolationBuilder.field(String field)",
            "params": []
          },
          {
            "name": "com.google.common.base.CaseFormat.to(CaseFormat format, String str)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.ErrorViolationBuilder.code(String code)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getErrorCode(String errorCode, int errorCodeDefault)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.ErrorViolationBuilder.description(String description)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(String key)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.ErrorViolation.ErrorViolationBuilder.build()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message, List<ErrorViolation> errors)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(BusinessError error)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.exception.BusinessError",
          "com.edu.onestudy.dto.ErrorViolation",
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "int INVALID_PARAMETERS = 4000001",
          "UPPER_CAMEL",
          "OK",
          "LOWER_UNDERSCORE"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleMethodArgumentNotValidException(MissingServletRequestParameterException exception)",
        "body": "@ExceptionHandler(MissingServletRequestParameterException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleMethodArgumentNotValidException(MissingServletRequestParameterException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"Param \" + exception.getParameterName() + \" is required\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.exception.BusinessError",
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "int INVALID_PARAMETERS = 4000001",
          "OK"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleException(Exception exception)",
        "body": "@ExceptionHandler(Exception.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(Exception exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), null);\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
        "method_calls": [],
        "used_types": [
          "com.edu.onestudy.exception.BusinessError",
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "int INTERNAL_SERVER_ERROR = 5001001",
          "OK"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleException(HttpMessageNotReadableException exception)",
        "body": "@ExceptionHandler(HttpMessageNotReadableException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleException(HttpMessageNotReadableException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error,\"invalid parameter\");\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.exception.BusinessError",
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "int INVALID_PARAMETERS = 4000001",
          "OK"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleIllegalArgumentException(IllegalArgumentException exception)",
        "body": "@ExceptionHandler(IllegalArgumentException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleIllegalArgumentException(IllegalArgumentException exception) {\n        BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n        BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n        return new ResponseEntity<>(data, HttpStatus.OK);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message, String data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(BusinessError error)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.exception.BusinessError",
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "int INVALID_PARAMETERS = 4000001",
          "OK"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.exception.CommonExceptionHandler.handleHttpStatusCodeException(HttpStatusCodeException exception)",
        "body": "@ExceptionHandler(HttpStatusCodeException.class)\n    @LogsActivityAnnotation\n    public ResponseEntity<BaseResponse<?>> handleHttpStatusCodeException(HttpStatusCodeException exception) {\n        HttpStatus statusCode = (HttpStatus) exception.getStatusCode();\n\n        if (statusCode.value() == HttpStatus.BAD_REQUEST.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INVALID_PARAMETERS);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.UNAUTHORIZED.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.UNAUTHORIZED);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.FORBIDDEN.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.FORBIDDEN_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.NOT_FOUND.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.NOT_FOUND);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        if (statusCode.value() == HttpStatus.INTERNAL_SERVER_ERROR.value()) {\n            BusinessError error = getBusinessError(ErrorConstant.INTERNAL_SERVER_ERROR);\n            BaseResponse<?> data = ofFailed(error, getMessage(error), exception.getMessage());\n            return new ResponseEntity<>(data, HttpStatus.OK);\n        }\n\n        throw exception;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getBusinessError(int errorCode)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.ofFailed(BusinessError error, String message, String data)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getMessage(BusinessError error)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.2.7.jar\\org.springframework.http\\HttpStatus.class",
          "com.edu.onestudy.exception.BusinessError",
          "com.edu.onestudy.dto.BaseResponse"
        ],
        "field_access": [
          "BAD_REQUEST",
          "int UNAUTHORIZED = 4010001",
          "UNAUTHORIZED",
          "OK",
          "FORBIDDEN",
          "NOT_FOUND",
          "int INTERNAL_SERVER_ERROR = 5001001",
          "int NOT_FOUND = 4040001",
          "int INVALID_PARAMETERS = 4000001",
          "int FORBIDDEN_ERROR = 4030001",
          "INTERNAL_SERVER_ERROR"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.pronunciation_svc",
    "class_name": "PronunciationServiceImpl",
    "full_class_name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\pronunciation_svc\\PronunciationServiceImpl.java",
    "content": "@Service\npublic class PronunciationServiceImpl implements PronunciationService {\n\n    private final PronunciationFeignClient pronunciationFeignClient;\n\n    private final PronunciationMapper pronunciationMapper;\n\n    public PronunciationServiceImpl(PronunciationFeignClient pronunciationFeignClient, PronunciationMapper pronunciationMapper) {\n        this.pronunciationFeignClient = pronunciationFeignClient;\n        this.pronunciationMapper = pronunciationMapper;\n    }\n\n    @Override\n    public GetPronunciationSampleResponseDto getSample(GetSampleRequestDto request) {\n        GetSampleRequest req = pronunciationMapper.toSampleRequest(request);\n        req.setCategory(request.getLevel().getValue());\n        req.setLanguage(\"en\");\n        GetSampleResponse response = pronunciationFeignClient.getSample(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_SAMPLE_ERROR);\n        }\n\n        return pronunciationMapper.toGetPronunciationSampleResponseDto(response);\n    }\n\n    @Override\n    public PronunciationAccuracyResponseDto getAccuracy(PronunciationAccuracyRequestDto request) {\n        PronunciationAccuracyRequest req = pronunciationMapper.toPronunciationAccuracyRequest(request);\n        req.setLanguage(\"en\");\n        PronunciationAccuracyResponse response = pronunciationFeignClient.getAccuracyFromRecordedAudio(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_ACCURACY_ERROR);\n        }\n\n        return pronunciationMapper.toPronunciationAccuracyResponseDto(response);\n    }\n}",
    "implements": [
      "com.edu.onestudy.service.PronunciationService"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationServiceImpl.PronunciationServiceImpl(PronunciationFeignClient pronunciationFeignClient, PronunciationMapper pronunciationMapper)",
        "body": "public PronunciationServiceImpl(PronunciationFeignClient pronunciationFeignClient, PronunciationMapper pronunciationMapper) {\n        this.pronunciationFeignClient = pronunciationFeignClient;\n        this.pronunciationMapper = pronunciationMapper;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "PronunciationMapper pronunciationMapper",
          "PronunciationFeignClient pronunciationFeignClient"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.PronunciationService.PronunciationServiceImpl(PronunciationFeignClient pronunciationFeignClient, PronunciationMapper pronunciationMapper)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationServiceImpl.getSample(GetSampleRequestDto request)",
        "body": "@Override\n    public GetPronunciationSampleResponseDto getSample(GetSampleRequestDto request) {\n        GetSampleRequest req = pronunciationMapper.toSampleRequest(request);\n        req.setCategory(request.getLevel().getValue());\n        req.setLanguage(\"en\");\n        GetSampleResponse response = pronunciationFeignClient.getSample(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_SAMPLE_ERROR);\n        }\n\n        return pronunciationMapper.toGetPronunciationSampleResponseDto(response);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.mapper.PronunciationMapper.toSampleRequest(GetSampleRequestDto req)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.pronunciation_svc.request.GetSampleRequest.setCategory(String category)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.pronunciation.GetSampleRequestDto.getLevel()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.constant.PronunciationLevel.getValue()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.pronunciation_svc.request.GetSampleRequest.setLanguage(String language)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationFeignClient.getSample(@RequestBody GetSampleRequest request)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.PronunciationMapper.toGetPronunciationSampleResponseDto(GetSampleResponse response)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.thirdparty.pronunciation_svc.request.GetSampleRequest",
          "com.edu.onestudy.thirdparty.pronunciation_svc.response.GetSampleResponse"
        ],
        "field_access": [
          "int GET_PRONUNCIATION_SAMPLE_ERROR = 4040010"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.PronunciationService.getSample(GetSampleRequestDto request)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationServiceImpl.getAccuracy(PronunciationAccuracyRequestDto request)",
        "body": "@Override\n    public PronunciationAccuracyResponseDto getAccuracy(PronunciationAccuracyRequestDto request) {\n        PronunciationAccuracyRequest req = pronunciationMapper.toPronunciationAccuracyRequest(request);\n        req.setLanguage(\"en\");\n        PronunciationAccuracyResponse response = pronunciationFeignClient.getAccuracyFromRecordedAudio(req);\n\n        if (response == null) {\n            throw new BusinessException(ErrorConstant.GET_PRONUNCIATION_ACCURACY_ERROR);\n        }\n\n        return pronunciationMapper.toPronunciationAccuracyResponseDto(response);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.mapper.PronunciationMapper.toPronunciationAccuracyRequest(PronunciationAccuracyRequestDto req)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.pronunciation_svc.request.PronunciationAccuracyRequest.setLanguage(String language)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationFeignClient.getAccuracyFromRecordedAudio(@RequestBody PronunciationAccuracyRequest request)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.PronunciationMapper.toPronunciationAccuracyResponseDto(PronunciationAccuracyResponse response)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.thirdparty.pronunciation_svc.response.PronunciationAccuracyResponse",
          "com.edu.onestudy.thirdparty.pronunciation_svc.request.PronunciationAccuracyRequest"
        ],
        "field_access": [
          "int GET_PRONUNCIATION_ACCURACY_ERROR = 4040011"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.PronunciationService.getAccuracy(PronunciationAccuracyRequestDto request)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service.impl",
    "class_name": "AuthServiceImpl",
    "full_class_name": "com.edu.onestudy.service.impl.AuthServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\impl\\AuthServiceImpl.java",
    "content": "@Service\n@Slf4j\npublic class AuthServiceImpl implements AuthService {\n\n    private final AuthenticationManager authenticationManager;\n\n    private final JwtProvider jwtProvider;\n\n    private final UserRepository userRepository;\n\n    private final PasswordEncoder passwordEncoder;\n\n    private final UserMapper userMapper;\n\n    public AuthServiceImpl(AuthenticationManager authenticationManager,\n                           JwtProvider jwtProvider,\n                           UserRepository userRepository,\n                           PasswordEncoder passwordEncoder,\n                           UserMapper userMapper) {\n        this.authenticationManager = authenticationManager;\n        this.jwtProvider = jwtProvider;\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.userMapper = userMapper;\n    }\n\n    @Override\n    public AuthRegisterResponse register(AuthRegisterRequest request) {\n        Optional<User> user = userRepository.getByUsername(request.getUsername());\n        if (user.isPresent()) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n\n        User userData = userMapper.authRegisterRequestToUser(request);\n        userData.setRole(UserRole.USER);\n        UserCredential credentials = UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword()))\n                .userId(userData.getId())\n                .build();\n        userData.setCredentials(credentials);\n        userRepository.persist(userData);\n        return new AuthRegisterResponse(userData.getId().toString());\n    }\n\n    @Override\n    public AuthProfileResponse getAuthProfile(String id) {\n        User user = userRepository.getUserById(id).orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n        return userMapper.userToAuthProfileResponse(user);\n    }\n\n    @Override\n    public AuthLoginResponse login(AuthLoginRequest request) {\n        try {\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(\n                    request.getUsername(),\n                    request.getPassword()\n            );\n            Authentication authentication = authenticationManager.authenticate(authenticationToken);\n\n            return new AuthLoginResponse(\n                    jwtProvider.generateAccessToken(authentication),\n                    jwtProvider.generateRefreshToken(authentication));\n        } catch (Exception ex) {\n            log.error(\"Login failed for user {}: {}\", request.getUsername(), ex.getMessage());\n            throw new BusinessException(ErrorConstant.USERNAME_PASSWORD_WRONG);\n        }\n    }\n\n}",
    "implements": [
      "com.edu.onestudy.service.AuthService"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.impl.AuthServiceImpl.AuthServiceImpl(AuthenticationManager authenticationManager,\n                           JwtProvider jwtProvider,\n                           UserRepository userRepository,\n                           PasswordEncoder passwordEncoder,\n                           UserMapper userMapper)",
        "body": "public AuthServiceImpl(AuthenticationManager authenticationManager,\n                           JwtProvider jwtProvider,\n                           UserRepository userRepository,\n                           PasswordEncoder passwordEncoder,\n                           UserMapper userMapper) {\n        this.authenticationManager = authenticationManager;\n        this.jwtProvider = jwtProvider;\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.userMapper = userMapper;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "AuthenticationManager authenticationManager",
          "JwtProvider jwtProvider",
          "UserRepository userRepository",
          "PasswordEncoder passwordEncoder",
          "UserMapper userMapper"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.AuthService.AuthServiceImpl(AuthenticationManager authenticationManager,\n                           JwtProvider jwtProvider,\n                           UserRepository userRepository,\n                           PasswordEncoder passwordEncoder,\n                           UserMapper userMapper)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.AuthServiceImpl.register(AuthRegisterRequest request)",
        "body": "@Override\n    public AuthRegisterResponse register(AuthRegisterRequest request) {\n        Optional<User> user = userRepository.getByUsername(request.getUsername());\n        if (user.isPresent()) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n\n        User userData = userMapper.authRegisterRequestToUser(request);\n        userData.setRole(UserRole.USER);\n        UserCredential credentials = UserCredential\n                .builder()\n                .passwordHash(passwordEncoder.encode(request.getPassword()))\n                .userId(userData.getId())\n                .build();\n        userData.setCredentials(credentials);\n        userRepository.persist(userData);\n        return new AuthRegisterResponse(userData.getId().toString());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.UserRepository.getByUsername(String username)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.auth.AuthRegisterRequest.getUsername()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.UserMapper.authRegisterRequestToUser(AuthRegisterRequest request)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.setRole(UserRole role)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserCredential.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserCredential.UserCredentialBuilder.passwordHash(String passwordHash)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.auth.AuthRegisterRequest.getPassword()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserCredential.UserCredentialBuilder.userId(UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserCredential.UserCredentialBuilder.build()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.User.setCredentials(UserCredential credentials)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.UserRepository.persist(User user)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserCredential",
          "com.edu.onestudy.entity.User"
        ],
        "field_access": [
          "USER"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.AuthService.register(AuthRegisterRequest request)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.AuthServiceImpl.getAuthProfile(String id)",
        "body": "@Override\n    public AuthProfileResponse getAuthProfile(String id) {\n        User user = userRepository.getUserById(id).orElseThrow(() -> new RuntimeException(\"User not found\"));\n\n        return userMapper.userToAuthProfileResponse(user);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.UserRepository.getUserById(String userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.UserMapper.userToAuthProfileResponse(User user)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.AuthService.getAuthProfile(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.AuthServiceImpl.login(AuthLoginRequest request)",
        "body": "@Override\n    public AuthLoginResponse login(AuthLoginRequest request) {\n        try {\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(\n                    request.getUsername(),\n                    request.getPassword()\n            );\n            Authentication authentication = authenticationManager.authenticate(authenticationToken);\n\n            return new AuthLoginResponse(\n                    jwtProvider.generateAccessToken(authentication),\n                    jwtProvider.generateRefreshToken(authentication));\n        } catch (Exception ex) {\n            log.error(\"Login failed for user {}: {}\", request.getUsername(), ex.getMessage());\n            throw new BusinessException(ErrorConstant.USERNAME_PASSWORD_WRONG);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.auth.AuthLoginRequest.getUsername()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.auth.AuthLoginRequest.getPassword()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.generateAccessToken(Authentication authentication)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.security.JwtProvider.generateRefreshToken(Authentication authentication)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.core\\Authentication.class",
          "F:\\_side_projects\\source_atlas\\.contents.spring-security-core-6.5.0.jar\\org.springframework.security.authentication\\UsernamePasswordAuthenticationToken.class"
        ],
        "field_access": [
          "int USERNAME_PASSWORD_WRONG = 4010002"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.AuthService.login(AuthLoginRequest request)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service.test",
    "class_name": "ResourceServiceImpl",
    "full_class_name": "com.edu.onestudy.service.test.ResourceServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\test\\ResourceServiceImpl.java",
    "content": "@Service\n@Slf4j\npublic class ResourceServiceImpl {\n\n    private final ResourceRepository resourceRepository;\n\n    private final StorageService storageService;\n\n    public ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository) {\n        this.resourceRepository = resourceRepository;\n        this.storageService = storageFactory.getStorageService(Constant.STORAGE_AWS);\n    }\n\n    public Resource uploadResource(MultipartFile file, UUID requestId) {\n\n        String url = storageService.uploadFile(file);\n        List<Resource> lst = new ArrayList<>();\n        List<String> test2 = lst.stream().map(Resource::getId).map(UUID::toString).collect(Collectors.toList());\n\n        Resource resource = Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName())\n                .build();\n        int test = resource.getLastModifiedAt().getDayOfMonth();\n        resourceRepository.save(resource);\n        return resource;\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.test.ResourceServiceImpl.ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository)",
        "body": "public ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository) {\n        this.resourceRepository = resourceRepository;\n        this.storageService = storageFactory.getStorageService(Constant.STORAGE_AWS);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageFactory.getStorageService(String providerName)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "StorageService storageService",
          "ResourceRepository resourceRepository",
          "String STORAGE_AWS = \"AWS_S3_NORMAL\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.test.ResourceServiceImpl.uploadResource(MultipartFile file, UUID requestId)",
        "body": "public Resource uploadResource(MultipartFile file, UUID requestId) {\n\n        String url = storageService.uploadFile(file);\n        List<Resource> lst = new ArrayList<>();\n        List<String> test2 = lst.stream().map(Resource::getId).map(UUID::toString).collect(Collectors.toList());\n\n        Resource resource = Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName())\n                .build();\n        int test = resource.getLastModifiedAt().getDayOfMonth();\n        resourceRepository.save(resource);\n        return resource;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.uploadFile(MultipartFile file)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.name(String name)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.url(String url)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.ownerId(UUID ownerId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.extension(String extension)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.sizeBytes(Long sizeBytes)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.cloudId(String cloudId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.getProviderName()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.build()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.getLastModifiedAt()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.ResourceRepository.save(Resource resource)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Resource"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.pronunciation_svc.request",
    "class_name": "GetSampleRequest",
    "full_class_name": "com.edu.onestudy.thirdparty.pronunciation_svc.request.GetSampleRequest",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\pronunciation_svc\\request\\GetSampleRequest.java",
    "content": "@Data\npublic class GetSampleRequest {\n\n    private String category;\n\n    private String language;\n\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    private String transcript;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.pronunciation_svc.request",
    "class_name": "PronunciationAccuracyRequest",
    "full_class_name": "com.edu.onestudy.thirdparty.pronunciation_svc.request.PronunciationAccuracyRequest",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\pronunciation_svc\\request\\PronunciationAccuracyRequest.java",
    "content": "@Data\npublic class PronunciationAccuracyRequest {\n\n    private String base64Audio;\n\n    private String language;\n\n    @JsonProperty(\"title\")\n    private String text;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.pronunciation_svc.response",
    "class_name": "GetSampleResponse",
    "full_class_name": "com.edu.onestudy.thirdparty.pronunciation_svc.response.GetSampleResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\pronunciation_svc\\response\\GetSampleResponse.java",
    "content": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GetSampleResponse {\n\n    @JsonProperty(\"ipa_transcript\")\n    private String ipaTranscript;\n\n    @JsonProperty(\"real_transcript\")\n    private String realTranscript;\n\n    @JsonProperty(\"transcript_translation\")\n    private String transcriptTranslation;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.pronunciation_svc.response",
    "class_name": "PronunciationAccuracyResponse",
    "full_class_name": "com.edu.onestudy.thirdparty.pronunciation_svc.response.PronunciationAccuracyResponse",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\pronunciation_svc\\response\\PronunciationAccuracyResponse.java",
    "content": "@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n@Data\npublic class PronunciationAccuracyResponse {\n\n    private String startTime;\n\n    private String endTime;\n\n    private String ipaScript;\n\n    private String isLetterCorrectAllWords;\n\n    private String matchedTranscripts;\n\n    private String matchedTranscriptsIpa;\n\n    private String pairAccuracyCategory;\n\n    private Integer pronunciationAccuracy;\n\n    private String realTranscript;\n\n    private String realTranscripts;\n\n    private String realTranscriptsIpa;\n\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy",
    "class_name": "OnestudyApplicationTests",
    "full_class_name": "com.edu.onestudy.OnestudyApplicationTests",
    "file_path": "F:\\01_projects\\onestudy\\src\\test\\java\\com\\edu\\onestudy\\OnestudyApplicationTests.java",
    "content": "@SpringBootTest\nclass OnestudyApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.OnestudyApplicationTests.contextLoads()",
        "body": "@Test\n    void contextLoads() {\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.storage",
    "class_name": "StorageFactory",
    "full_class_name": "com.edu.onestudy.thirdparty.storage.StorageFactory",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\storage\\StorageFactory.java",
    "content": "@Component\npublic class StorageFactory {\n\n    private final List<StorageService> services;\n\n    public StorageFactory(List<StorageService> services) {\n        this.services = services;\n    }\n\n    public StorageService getStorageService(String providerName) {\n        return services.stream()\n                .filter(service -> service.getProviderName().equalsIgnoreCase(providerName))\n                .findFirst()\n                .orElseThrow(() -> new IllegalArgumentException(\"No storage service found for provider: \" + providerName));\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageFactory.StorageFactory(List<StorageService> services)",
        "body": "public StorageFactory(List<StorageService> services) {\n        this.services = services;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "List<StorageService> services"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageFactory.getStorageService(String providerName)",
        "body": "public StorageService getStorageService(String providerName) {\n        return services.stream()\n                .filter(service -> service.getProviderName().equalsIgnoreCase(providerName))\n                .findFirst()\n                .orElseThrow(() -> new IllegalArgumentException(\"No storage service found for provider: \" + providerName));\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.getProviderName()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.storage",
    "class_name": "StorageService",
    "full_class_name": "com.edu.onestudy.thirdparty.storage.StorageService",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\storage\\StorageService.java",
    "content": "@Slf4j\npublic abstract class StorageService {\n\n    public abstract String getFileUrl(String fileName);\n\n    public abstract String uploadFile(MultipartFile file);\n\n    public abstract String getProviderName();\n\n    public abstract byte[] downloadFile(String fileName);\n\n    public abstract String deleteFile(String fileName);\n\n    protected File convertMultiPartFileToFile(MultipartFile file) throws IOException {\n        String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n        String name = originalFilename;\n        String extension = \"\";\n        int lastDotIndex = originalFilename.lastIndexOf(\".\");\n        if (lastDotIndex != -1) {\n            name = originalFilename.substring(0, lastDotIndex);\n            extension = originalFilename.substring(lastDotIndex);\n        }\n\n        Path tempFilePath = Files.createTempFile(name + \"_\", extension);\n\n        file.transferTo(tempFilePath.toFile());\n\n        log.debug(\"Created temporary file: {}\", tempFilePath.toAbsolutePath());\n        return tempFilePath.toFile();\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageService.getFileUrl(String fileName)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageService.uploadFile(MultipartFile file)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageService.getProviderName()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageService.downloadFile(String fileName)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageService.deleteFile(String fileName)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.StorageService.convertMultiPartFileToFile(MultipartFile file)",
        "body": "protected File convertMultiPartFileToFile(MultipartFile file) throws IOException {\n        String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n        String name = originalFilename;\n        String extension = \"\";\n        int lastDotIndex = originalFilename.lastIndexOf(\".\");\n        if (lastDotIndex != -1) {\n            name = originalFilename.substring(0, lastDotIndex);\n            extension = originalFilename.substring(lastDotIndex);\n        }\n\n        Path tempFilePath = Files.createTempFile(name + \"_\", extension);\n\n        file.transferTo(tempFilePath.toFile());\n\n        log.debug(\"Created temporary file: {}\", tempFilePath.toAbsolutePath());\n        return tempFilePath.toFile();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service.impl",
    "class_name": "ResourceServiceImpl",
    "full_class_name": "com.edu.onestudy.service.impl.ResourceServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\impl\\ResourceServiceImpl.java",
    "content": "@Service\n@Slf4j\npublic class ResourceServiceImpl implements ResourceService {\n\n    private final ResourceRepository resourceRepository;\n\n    private final StorageService storageService;\n\n    public ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository) {\n        this.resourceRepository = resourceRepository;\n        this.storageService = storageFactory.getStorageService(Constant.STORAGE_AWS);\n    }\n\n    @Override\n    public Resource uploadResource(MultipartFile file, UUID requestId) {\n\n        String url = storageService.uploadFile(file);\n\n        Resource resource = Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName())\n                .build();\n        int test = resource.getLastModifiedAt().getDayOfMonth();\n        resourceRepository.save(resource);\n        return resource;\n    }\n\n    @Override\n    public GetResourceResponse getResource(String id, UUID requestId) {\n        Resource resource = resourceRepository.findById(requestId.toString());\n\n        if (Objects.isNull(resource)) {\n            throw new RuntimeException(\"Resource not found\");\n        }\n\n        try {\n            if (!requestId.equals(resource.getOwnerId())) {\n                throw new RuntimeException(\"You are not allowed to access this resource\");\n            }\n\n            String url = storageService.getFileUrl(resource.getUrl());\n\n            return GetResourceResponse.builder()\n                    .name(resource.getName())\n                    .url(url)\n                    .build();\n\n        } catch (Exception e) {\n            log.info(\"Generate url failed {}\", e.getMessage());\n            throw new RuntimeException(\"Generate url failed\");\n        }\n    }\n\n    @Override\n    public File downloadResourceFromUrl(String urlString) {\n        try {\n            URI uri = URI.create(urlString);\n            URL url = uri.toURL();\n\n            String fileName = Path.of(uri.getPath()).getFileName().toString();\n            File outputFile = File.createTempFile(\"download_\", \"_\" + fileName);\n\n            try (InputStream in = url.openStream();\n                 FileOutputStream out = new FileOutputStream(outputFile)) {\n                byte[] buffer = new byte[8192];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            }\n\n            return outputFile;\n\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to download file from URL: \" + urlString, e);\n        }\n    }\n}",
    "implements": [
      "com.edu.onestudy.service.ResourceService"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.impl.ResourceServiceImpl.ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository)",
        "body": "public ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository) {\n        this.resourceRepository = resourceRepository;\n        this.storageService = storageFactory.getStorageService(Constant.STORAGE_AWS);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageFactory.getStorageService(String providerName)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "StorageService storageService",
          "ResourceRepository resourceRepository",
          "String STORAGE_AWS = \"AWS_S3_NORMAL\""
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.ResourceService.ResourceServiceImpl(StorageFactory storageFactory, ResourceRepository resourceRepository)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.ResourceServiceImpl.uploadResource(MultipartFile file, UUID requestId)",
        "body": "@Override\n    public Resource uploadResource(MultipartFile file, UUID requestId) {\n\n        String url = storageService.uploadFile(file);\n\n        Resource resource = Resource.builder()\n                .name(file.getOriginalFilename())\n                .url(url)\n                .ownerId(requestId)\n                .extension(file.getContentType())\n                .sizeBytes(file.getSize())\n                .cloudId(storageService.getProviderName())\n                .build();\n        int test = resource.getLastModifiedAt().getDayOfMonth();\n        resourceRepository.save(resource);\n        return resource;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.uploadFile(MultipartFile file)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.name(String name)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.url(String url)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.ownerId(UUID ownerId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.extension(String extension)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.sizeBytes(Long sizeBytes)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.cloudId(String cloudId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.getProviderName()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.ResourceBuilder.build()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.getLastModifiedAt()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.ResourceRepository.save(Resource resource)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Resource"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.ResourceService.uploadResource(MultipartFile file, UUID requestId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.ResourceServiceImpl.getResource(String id, UUID requestId)",
        "body": "@Override\n    public GetResourceResponse getResource(String id, UUID requestId) {\n        Resource resource = resourceRepository.findById(requestId.toString());\n\n        if (Objects.isNull(resource)) {\n            throw new RuntimeException(\"Resource not found\");\n        }\n\n        try {\n            if (!requestId.equals(resource.getOwnerId())) {\n                throw new RuntimeException(\"You are not allowed to access this resource\");\n            }\n\n            String url = storageService.getFileUrl(resource.getUrl());\n\n            return GetResourceResponse.builder()\n                    .name(resource.getName())\n                    .url(url)\n                    .build();\n\n        } catch (Exception e) {\n            log.info(\"Generate url failed {}\", e.getMessage());\n            throw new RuntimeException(\"Generate url failed\");\n        }\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.ResourceRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.getOwnerId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.getFileUrl(String fileName)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.getUrl()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.resource.GetResourceResponse.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.resource.GetResourceResponse.GetResourceResponseBuilder.name(String name)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Resource.getName()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.resource.GetResourceResponse.GetResourceResponseBuilder.url(String url)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.resource.GetResourceResponse.GetResourceResponseBuilder.build()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Resource"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.ResourceService.getResource(String id, UUID requestId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.ResourceServiceImpl.downloadResourceFromUrl(String urlString)",
        "body": "@Override\n    public File downloadResourceFromUrl(String urlString) {\n        try {\n            URI uri = URI.create(urlString);\n            URL url = uri.toURL();\n\n            String fileName = Path.of(uri.getPath()).getFileName().toString();\n            File outputFile = File.createTempFile(\"download_\", \"_\" + fileName);\n\n            try (InputStream in = url.openStream();\n                 FileOutputStream out = new FileOutputStream(outputFile)) {\n                byte[] buffer = new byte[8192];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            }\n\n            return outputFile;\n\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to download file from URL: \" + urlString, e);\n        }\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.ResourceService.downloadResourceFromUrl(String urlString)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.storage",
    "class_name": "AwsStorageServiceImpl",
    "full_class_name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\storage\\AwsStorageServiceImpl.java",
    "content": "@Component(\"awsStorageService\")\n@Slf4j\npublic class AwsStorageServiceImpl extends StorageService {\n    private final S3Client s3Client;\n\n    @Value(\"${aws.s3.bucket.name}\")\n    private String bucketName;\n\n    @Value(\"${aws.s3.bucket.domain}\")\n    private String domain;\n\n    public AwsStorageServiceImpl(S3Client s3Client) {\n        this.s3Client = s3Client;\n    }\n\n    @Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }\n\n    @Override\n    public String uploadFile(MultipartFile file) {\n        File fileObj = null;\n        try {\n            fileObj = convertMultiPartFileToFile(file);\n            String fileName = Objects.requireNonNull(file.getOriginalFilename()).replace(\" \", \"\") + \"_\" + System.currentTimeMillis() + \".\"\n                    + Objects.requireNonNull(file.getContentType()).split(\"/\")[1];\n\n            PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .contentType(file.getContentType())\n                    .build();\n\n            s3Client.putObject(putObjectRequest, RequestBody.fromFile(fileObj));\n\n            return getFileUrl(fileName);\n        } catch (IOException e) {\n            log.error(\"Error during file processing (conversion or deletion): {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for S3 upload\", e);\n        }\n        catch (Exception e) {\n            log.error(\"Error while uploading file to S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while uploading file to S3\", e);\n        } finally {\n            if (fileObj != null && fileObj.exists()) {\n                if (!fileObj.delete()) {\n                    log.warn(\"Failed to delete temporary file: {}\", fileObj.getAbsolutePath());\n                }\n            }\n        }\n    }\n\n    @Override\n    public String getProviderName() {\n        return Constant.STORAGE_AWS;\n    }\n\n    @Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            \n            GetObjectRequest getObjectRequest = GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n\n            \n            ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(getObjectRequest);\n            return s3Object.readAllBytes();\n        } catch (IOException e) {\n            log.error(\"Error reading downloaded file content: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while reading downloaded file content\", e);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from S3\", e);\n        }\n    }\n\n    @Override\n    public String deleteFile(String fileName) {\n        try {\n            \n            DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n            s3Client.deleteObject(deleteObjectRequest);\n            return fileName + \" removed ...\";\n        } catch (Exception e) {\n            log.error(\"Error while deleting file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from S3\", e);\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.AwsStorageServiceImpl(S3Client s3Client)",
        "body": "public AwsStorageServiceImpl(S3Client s3Client) {\n        this.s3Client = s3Client;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "S3Client s3Client"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.getFileUrl(String fileName)",
        "body": "@Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.uploadFile(MultipartFile file)",
        "body": "@Override\n    public String uploadFile(MultipartFile file) {\n        File fileObj = null;\n        try {\n            fileObj = convertMultiPartFileToFile(file);\n            String fileName = Objects.requireNonNull(file.getOriginalFilename()).replace(\" \", \"\") + \"_\" + System.currentTimeMillis() + \".\"\n                    + Objects.requireNonNull(file.getContentType()).split(\"/\")[1];\n\n            PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .contentType(file.getContentType())\n                    .build();\n\n            s3Client.putObject(putObjectRequest, RequestBody.fromFile(fileObj));\n\n            return getFileUrl(fileName);\n        } catch (IOException e) {\n            log.error(\"Error during file processing (conversion or deletion): {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for S3 upload\", e);\n        }\n        catch (Exception e) {\n            log.error(\"Error while uploading file to S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while uploading file to S3\", e);\n        } finally {\n            if (fileObj != null && fileObj.exists()) {\n                if (!fileObj.delete()) {\n                    log.warn(\"Failed to delete temporary file: {}\", fileObj.getAbsolutePath());\n                }\n            }\n        }\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.thirdparty.storage.StorageService.convertMultiPartFileToFile(MultipartFile file)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.PutObjectRequest.builder()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.PutObjectRequest.Builder.bucket(String bucket)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.PutObjectRequest.Builder.key(String key)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.PutObjectRequest.Builder.contentType(String contentType)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.utils.builder.SdkBuilder.build()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.S3Client.putObject(PutObjectRequest putObjectRequest, RequestBody requestBody)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.core.sync.RequestBody.fromFile(File file)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.getFileUrl(String fileName)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.s3-2.25.10.jar\\software.amazon.awssdk.services.s3.model\\PutObjectRequest.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.getProviderName()",
        "body": "@Override\n    public String getProviderName() {\n        return Constant.STORAGE_AWS;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String STORAGE_AWS = \"AWS_S3_NORMAL\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.downloadFile(String fileName)",
        "body": "@Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            \n            GetObjectRequest getObjectRequest = GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n\n            \n            ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(getObjectRequest);\n            return s3Object.readAllBytes();\n        } catch (IOException e) {\n            log.error(\"Error reading downloaded file content: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while reading downloaded file content\", e);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from S3\", e);\n        }\n    }",
        "method_calls": [
          {
            "name": "software.amazon.awssdk.services.s3.model.GetObjectRequest.builder()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.GetObjectRequest.Builder.bucket(String bucket)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.GetObjectRequest.Builder.key(String key)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.utils.builder.SdkBuilder.build()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.S3Client.getObject(GetObjectRequest getObjectRequest)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.sdk-core-2.25.10.jar\\software.amazon.awssdk.core\\ResponseInputStream.class",
          "F:\\_side_projects\\source_atlas\\.contents.s3-2.25.10.jar\\software.amazon.awssdk.services.s3.model\\GetObjectResponse.class",
          "F:\\_side_projects\\source_atlas\\.contents.s3-2.25.10.jar\\software.amazon.awssdk.services.s3.model\\GetObjectRequest.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.AwsStorageServiceImpl.deleteFile(String fileName)",
        "body": "@Override\n    public String deleteFile(String fileName) {\n        try {\n            \n            DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(fileName)\n                    .build();\n            s3Client.deleteObject(deleteObjectRequest);\n            return fileName + \" removed ...\";\n        } catch (Exception e) {\n            log.error(\"Error while deleting file from S3: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from S3\", e);\n        }\n    }",
        "method_calls": [
          {
            "name": "software.amazon.awssdk.services.s3.model.DeleteObjectRequest.builder()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.DeleteObjectRequest.Builder.bucket(String bucket)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.model.DeleteObjectRequest.Builder.key(String key)",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.utils.builder.SdkBuilder.build()",
            "params": []
          },
          {
            "name": "software.amazon.awssdk.services.s3.S3Client.deleteObject(DeleteObjectRequest deleteObjectRequest)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.s3-2.25.10.jar\\software.amazon.awssdk.services.s3.model\\DeleteObjectRequest.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.annotations.handler",
    "class_name": "LogsActivityAOPHandler",
    "full_class_name": "com.edu.onestudy.annotations.handler.LogsActivityAOPHandler",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\annotations\\handler\\LogsActivityAOPHandler.java",
    "content": "@Aspect\n@Component\n@Order(value = 1)\n@Slf4j\npublic class LogsActivityAOPHandler extends BaseService {\n\n    private final HttpServletRequest httpServletRequest;\n\n    public static final String service_name = \"service_name\";\n\n    public static final String request_path = \"request_path\";\n\n    public static final String query_string = \"query_string\";\n\n    public static final String code_file = \"code_file\";\n\n    public static final String method_name = \"method_name\";\n\n    public static final String message_type = \"message_type\";\n\n    public static final String request_id = \"request_id\";\n\n    public static final String request = \"request\";\n\n    public static final String response = \"response\";\n\n    public static final String execution_time = \"execution_time\";\n\n    public static final String status_code = \"status_code\";\n\n    public static final String error_code = \"error_code\";\n\n    public static final String headers = \"headers\";\n\n    public LogsActivityAOPHandler(HttpServletRequest httpServletRequest) {\n        this.httpServletRequest = httpServletRequest;\n    }\n\n    @Around(\"execution(* *(..)) && @annotation(logsActivityAnnotation)\")\n    @SneakyThrows\n    public Object logsActivityAnnotation(ProceedingJoinPoint point, LogsActivityAnnotation logsActivityAnnotation) {\n        \n        Object objectRequest = point.getArgs().length > 0 ? point.getArgs()[0] : httpServletRequest.getParameterMap();\n        String requestId = getRequestId();\n        \n        Map<String, Object> mapCustomizeLog = new HashMap<>();\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_path, httpServletRequest.getRequestURI());\n        mapCustomizeLog.put(LogsActivityAOPHandler.query_string, httpServletRequest.getQueryString());\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.request);\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n        displayLog(objectRequest, mapCustomizeLog);\n\n        \n        long timeStart = new Date().getTime();\n        Object objectResponse = point.proceed();\n\n        \n        long timeHandle = new Date().getTime() - timeStart;\n        mapCustomizeLog.put(LogsActivityAOPHandler.execution_time, timeHandle);\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.response);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n\n        displayLog(objectResponse, mapCustomizeLog);\n        return objectResponse;\n    }\n\n    private void displayLog(Object messageObject, Map<String, Object> mapCustomizeLog) throws JsonProcessingException {\n        if (messageObject instanceof Exception) {\n            Exception e = (Exception) messageObject;\n            if (e instanceof MethodArgumentNotValidException) {\n                log.info(Utils.redact(objectMapper.writeValueAsString(getRequestBody())), entries(mapCustomizeLog));\n                return;\n            } else if (e instanceof BusinessException) {\n                BusinessException businessException = (BusinessException) e;\n                if (!ObjectUtils.isEmpty(businessException.getError())) {\n                    if (!ObjectUtils.isEmpty(businessException.getError().getMessage())) {\n                        log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n                        return;\n                    } else if (!ObjectUtils.isEmpty(businessException.getError().getData())) {\n                        log.info(Utils.redact(objectMapper.writeValueAsString(businessException.getError().getData())),\n                                entries(mapCustomizeLog));\n                        return;\n                    }\n                }\n            } else if (!ObjectUtils.isEmpty(e.getMessage())) {\n                log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n            }\n\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.request)) {\n                log.error(\"Request_id: {}, Exception: \", getRequestId(), e);\n            }\n        } else {\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.response)) {\n                if (messageObject instanceof ResponseEntity) {\n                    ResponseEntity responseEntity = (ResponseEntity) messageObject;\n                    BaseResponse baseResponse = JsonUtils.getGenericObject(responseEntity.getBody(), BaseResponse.class);\n                    log.info(Utils.redact(objectMapper.writeValueAsString(baseResponse)), entries(mapCustomizeLog));\n                    return;\n                }\n            }\n\n            log.info(Utils.redact(objectMapper.writeValueAsString(messageObject)), entries(mapCustomizeLog));\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.annotations.handler.LogsActivityAOPHandler.LogsActivityAOPHandler(HttpServletRequest httpServletRequest)",
        "body": "public LogsActivityAOPHandler(HttpServletRequest httpServletRequest) {\n        this.httpServletRequest = httpServletRequest;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "HttpServletRequest httpServletRequest"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.annotations.handler.LogsActivityAOPHandler.logsActivityAnnotation(ProceedingJoinPoint point, LogsActivityAnnotation logsActivityAnnotation)",
        "body": "@Around(\"execution(* *(..)) && @annotation(logsActivityAnnotation)\")\n    @SneakyThrows\n    public Object logsActivityAnnotation(ProceedingJoinPoint point, LogsActivityAnnotation logsActivityAnnotation) {\n        \n        Object objectRequest = point.getArgs().length > 0 ? point.getArgs()[0] : httpServletRequest.getParameterMap();\n        String requestId = getRequestId();\n        \n        Map<String, Object> mapCustomizeLog = new HashMap<>();\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_path, httpServletRequest.getRequestURI());\n        mapCustomizeLog.put(LogsActivityAOPHandler.query_string, httpServletRequest.getQueryString());\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.request);\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n        displayLog(objectRequest, mapCustomizeLog);\n\n        \n        long timeStart = new Date().getTime();\n        Object objectResponse = point.proceed();\n\n        \n        long timeHandle = new Date().getTime() - timeStart;\n        mapCustomizeLog.put(LogsActivityAOPHandler.execution_time, timeHandle);\n        mapCustomizeLog.put(LogsActivityAOPHandler.code_file, point.getSignature().getDeclaringTypeName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.method_name, point.getSignature().getName());\n        mapCustomizeLog.put(LogsActivityAOPHandler.request_id, requestId);\n        mapCustomizeLog.put(LogsActivityAOPHandler.message_type, LogsActivityAOPHandler.response);\n        mapCustomizeLog.put(LogsActivityAOPHandler.headers, Utils.redact(JsonUtils.convertObjectToString(getHeaders())));\n\n        displayLog(objectResponse, mapCustomizeLog);\n        return objectResponse;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          },
          {
            "name": "org.aspectj.lang.JoinPoint.getSignature()",
            "params": []
          },
          {
            "name": "org.aspectj.lang.Signature.getDeclaringTypeName()",
            "params": []
          },
          {
            "name": "org.aspectj.lang.Signature.getName()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.utils.Utils.redact(@NonNull String string)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.utils.JsonUtils.convertObjectToString(Object obj)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.annotations.handler.LogsActivityAOPHandler.displayLog(Object messageObject, Map<String, Object> mapCustomizeLog)",
            "params": []
          },
          {
            "name": "org.aspectj.lang.ProceedingJoinPoint.proceed()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getHeaders()",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [
          "String query_string",
          "String request_id",
          "String request_path",
          "String execution_time",
          "String request",
          "String headers",
          "String message_type",
          "String method_name",
          "String response = \"response\"",
          "String code_file"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.annotations.handler.LogsActivityAOPHandler.displayLog(Object messageObject, Map<String, Object> mapCustomizeLog)",
        "body": "private void displayLog(Object messageObject, Map<String, Object> mapCustomizeLog) throws JsonProcessingException {\n        if (messageObject instanceof Exception) {\n            Exception e = (Exception) messageObject;\n            if (e instanceof MethodArgumentNotValidException) {\n                log.info(Utils.redact(objectMapper.writeValueAsString(getRequestBody())), entries(mapCustomizeLog));\n                return;\n            } else if (e instanceof BusinessException) {\n                BusinessException businessException = (BusinessException) e;\n                if (!ObjectUtils.isEmpty(businessException.getError())) {\n                    if (!ObjectUtils.isEmpty(businessException.getError().getMessage())) {\n                        log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n                        return;\n                    } else if (!ObjectUtils.isEmpty(businessException.getError().getData())) {\n                        log.info(Utils.redact(objectMapper.writeValueAsString(businessException.getError().getData())),\n                                entries(mapCustomizeLog));\n                        return;\n                    }\n                }\n            } else if (!ObjectUtils.isEmpty(e.getMessage())) {\n                log.info(Utils.redact(e.getMessage()), entries(mapCustomizeLog));\n            }\n\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.request)) {\n                log.error(\"Request_id: {}, Exception: \", getRequestId(), e);\n            }\n        } else {\n            if (mapCustomizeLog.get(LogsActivityAOPHandler.message_type).toString().equals(LogsActivityAOPHandler.response)) {\n                if (messageObject instanceof ResponseEntity) {\n                    ResponseEntity responseEntity = (ResponseEntity) messageObject;\n                    BaseResponse baseResponse = JsonUtils.getGenericObject(responseEntity.getBody(), BaseResponse.class);\n                    log.info(Utils.redact(objectMapper.writeValueAsString(baseResponse)), entries(mapCustomizeLog));\n                    return;\n                }\n            }\n\n            log.info(Utils.redact(objectMapper.writeValueAsString(messageObject)), entries(mapCustomizeLog));\n        }\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.utils.Utils.redact(@NonNull String string)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestBody()",
            "params": []
          },
          {
            "name": "net.logstash.logback.argument.StructuredArguments.entries(Map<?, ?> map)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessException.getError()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getMessage()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.exception.BusinessError.getData()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.BaseService.getRequestId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.utils.JsonUtils.getGenericObject(Object input, Class<BaseResponse> clazz)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.2.7.jar\\org.springframework.http\\ResponseEntity.class",
          "com.edu.onestudy.dto.BaseResponse",
          "com.edu.onestudy.exception.BusinessException"
        ],
        "field_access": [
          "String message_type",
          "String response",
          "String request"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.thirdparty.storage",
    "class_name": "GoogleStorageServiceImpl",
    "full_class_name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\thirdparty\\storage\\GoogleStorageServiceImpl.java",
    "content": "@Component(\"googleStorageService\")\n@Slf4j\npublic class GoogleStorageServiceImpl extends StorageService {\n\n    @Value(\"${gcp.bucket.name}\")\n    private String bucketName;\n\n    @Value(\"${gcp.project.id}\")\n    private String projectId;\n\n    @Value(\"${gcp.bucket.domain}\")\n    private String domain;\n\n    @Value(\"${gcp.credentials.file}\")\n    private String gcpCredentials;\n\n    \n    public GoogleStorageServiceImpl() {\n\n    }\n\n    @Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }\n\n    @Override\n    public String uploadFile(MultipartFile file) {\n        File tempFile = null;\n        String uploadedFileName = null;\n        try {\n            \n            if (file.isEmpty()) {\n                throw new IllegalArgumentException(\"Cannot upload empty file.\");\n            }\n\n            String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n            String fileExtension = \"\";\n            int dotIndex = originalFilename.lastIndexOf('.');\n            if (dotIndex > 0 && dotIndex < originalFilename.length() - 1) {\n                fileExtension = originalFilename.substring(dotIndex);\n            }\n            \n            uploadedFileName = UUID.randomUUID().toString() + fileExtension;\n\n            \n            tempFile = File.createTempFile(\"upload-\", fileExtension);\n            file.transferTo(tempFile);\n\n            InputStream inputStream = new ClassPathResource(gcpCredentials).getInputStream();\n\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build().getService();\n            BlobId blobId = BlobId.of(bucketName, uploadedFileName);\n            String contentType = file.getContentType() != null ? file.getContentType() : \"application/octet-stream\";\n            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)\n                    .setContentType(contentType)\n                    .build();\n\n            storage.createFrom(blobInfo, Files.newInputStream(tempFile.toPath()));\n\n            log.info(\"File {} uploaded to Google Cloud Storage bucket {} as {}\", originalFilename, bucketName, uploadedFileName);\n            return uploadedFileName;\n\n        } catch (IOException e) {\n            log.error(\"Error during file processing or upload to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for Google Cloud Storage upload\", e);\n        } catch (Exception e) {\n            log.error(\"An unexpected error occurred while uploading file to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"An unexpected error occurred during Google Cloud Storage upload\", e);\n        } finally {\n            \n            if (tempFile != null && tempFile.exists()) {\n                try {\n                    Files.delete(tempFile.toPath());\n                    log.debug(\"Temporary file deleted: {}\", tempFile.getAbsolutePath());\n                } catch (IOException e) {\n                    log.warn(\"Failed to delete temporary file: {}\", tempFile.getAbsolutePath(), e);\n                }\n            }\n        }\n    }\n\n    @Override\n    public String getProviderName() {\n        return Constant.STORAGE_GCP;\n    }\n\n    @Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            return storage.readAllBytes(blobId);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from Google Cloud Storage\", e);\n        }\n    }\n\n    @Override\n    public String deleteFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            boolean deleted = storage.delete(blobId);\n\n            if (deleted) {\n                log.info(\"File {} deleted from Google Cloud Storage bucket {}\", fileName, bucketName);\n                return fileName + \" removed ...\";\n            } else {\n                log.warn(\"File {} not found in Google Cloud Storage bucket {} for deletion.\", fileName, bucketName);\n                return fileName + \" not found or could not be deleted.\";\n            }\n        } catch (Exception e) {\n            log.error(\"Error while deleting file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from Google Cloud Storage\", e);\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl.GoogleStorageServiceImpl()",
        "body": "public GoogleStorageServiceImpl() {\n\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl.getFileUrl(String fileName)",
        "body": "@Override\n    public String getFileUrl(String fileName) {\n        return String.format(\"%s/%s\", domain, fileName);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl.uploadFile(MultipartFile file)",
        "body": "@Override\n    public String uploadFile(MultipartFile file) {\n        File tempFile = null;\n        String uploadedFileName = null;\n        try {\n            \n            if (file.isEmpty()) {\n                throw new IllegalArgumentException(\"Cannot upload empty file.\");\n            }\n\n            String originalFilename = Objects.requireNonNull(file.getOriginalFilename());\n            String fileExtension = \"\";\n            int dotIndex = originalFilename.lastIndexOf('.');\n            if (dotIndex > 0 && dotIndex < originalFilename.length() - 1) {\n                fileExtension = originalFilename.substring(dotIndex);\n            }\n            \n            uploadedFileName = UUID.randomUUID().toString() + fileExtension;\n\n            \n            tempFile = File.createTempFile(\"upload-\", fileExtension);\n            file.transferTo(tempFile);\n\n            InputStream inputStream = new ClassPathResource(gcpCredentials).getInputStream();\n\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).setCredentials(GoogleCredentials.fromStream(inputStream)).build().getService();\n            BlobId blobId = BlobId.of(bucketName, uploadedFileName);\n            String contentType = file.getContentType() != null ? file.getContentType() : \"application/octet-stream\";\n            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)\n                    .setContentType(contentType)\n                    .build();\n\n            storage.createFrom(blobInfo, Files.newInputStream(tempFile.toPath()));\n\n            log.info(\"File {} uploaded to Google Cloud Storage bucket {} as {}\", originalFilename, bucketName, uploadedFileName);\n            return uploadedFileName;\n\n        } catch (IOException e) {\n            log.error(\"Error during file processing or upload to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Error processing file for Google Cloud Storage upload\", e);\n        } catch (Exception e) {\n            log.error(\"An unexpected error occurred while uploading file to Google Cloud Storage: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"An unexpected error occurred during Google Cloud Storage upload\", e);\n        } finally {\n            \n            if (tempFile != null && tempFile.exists()) {\n                try {\n                    Files.delete(tempFile.toPath());\n                    log.debug(\"Temporary file deleted: {}\", tempFile.getAbsolutePath());\n                } catch (IOException e) {\n                    log.warn(\"Failed to delete temporary file: {}\", tempFile.getAbsolutePath(), e);\n                }\n            }\n        }\n    }",
        "method_calls": [
          {
            "name": "com.google.cloud.storage.StorageOptions.newBuilder()",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.Builder.setProjectId(String projectId)",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.Builder.setCredentials(Credentials credentials)",
            "params": []
          },
          {
            "name": "com.google.auth.oauth2.GoogleCredentials.fromStream(InputStream credentialsStream)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.StorageOptions.Builder.build()",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.getService()",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.BlobId.of(String bucket, String name)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.BlobInfo.newBuilder(BlobId blobId)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.BlobInfo.Builder.setContentType(String contentType)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.BlobInfo.Builder.build()",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.Storage.createFrom(BlobInfo blobInfo, InputStream content, BlobWriteOption... options)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\BlobId.class",
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\Storage.class",
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\BlobInfo.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl.getProviderName()",
        "body": "@Override\n    public String getProviderName() {\n        return Constant.STORAGE_GCP;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String STORAGE_GCP = \"STORAGE_GCP\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl.downloadFile(String fileName)",
        "body": "@Override\n    public byte[] downloadFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            return storage.readAllBytes(blobId);\n        } catch (Exception e) {\n            log.error(\"Error while downloading file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while downloading file from Google Cloud Storage\", e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.google.cloud.storage.StorageOptions.newBuilder()",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.Builder.setProjectId(String projectId)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.StorageOptions.Builder.build()",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.getService()",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.BlobId.of(String bucket, String name)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\BlobId.class",
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\Storage.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.thirdparty.storage.GoogleStorageServiceImpl.deleteFile(String fileName)",
        "body": "@Override\n    public String deleteFile(String fileName) {\n        try {\n            Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\n            BlobId blobId = BlobId.of(bucketName, fileName);\n            boolean deleted = storage.delete(blobId);\n\n            if (deleted) {\n                log.info(\"File {} deleted from Google Cloud Storage bucket {}\", fileName, bucketName);\n                return fileName + \" removed ...\";\n            } else {\n                log.warn(\"File {} not found in Google Cloud Storage bucket {} for deletion.\", fileName, bucketName);\n                return fileName + \" not found or could not be deleted.\";\n            }\n        } catch (Exception e) {\n            log.error(\"Error while deleting file {} from Google Cloud Storage: {}\", fileName, e.getMessage(), e);\n            throw new RuntimeException(\"Error while deleting file from Google Cloud Storage\", e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.google.cloud.storage.StorageOptions.newBuilder()",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.Builder.setProjectId(String projectId)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.StorageOptions.Builder.build()",
            "params": []
          },
          {
            "name": "com.google.cloud.ServiceOptions.getService()",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.BlobId.of(String bucket, String name)",
            "params": []
          },
          {
            "name": "com.google.cloud.storage.Storage.delete(BlobId blob)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\BlobId.class",
          "F:\\_side_projects\\source_atlas\\.contents.google-cloud-storage-2.52.3.jar\\com.google.cloud.storage\\Storage.class"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  },
  {
    "package": "com.edu.onestudy.service.impl",
    "class_name": "QuizServiceImpl",
    "full_class_name": "com.edu.onestudy.service.impl.QuizServiceImpl",
    "file_path": "F:\\01_projects\\onestudy\\src\\main\\java\\com\\edu\\onestudy\\service\\impl\\QuizServiceImpl.java",
    "content": "@Service\n@Slf4j\npublic class QuizServiceImpl implements QuizService {\n\n    private final QuizMapper quizMapper;\n\n    private final QuestionMapper questionMapper;\n\n    private final QuizRepository quizRepository;\n\n    private final QuestionRepository questionRepository;\n\n    private final QuizAttemptRepository quizAttemptRepository;\n\n    private final QuizAnswerRepository quizAnswerRepository;\n\n    private final UserRepository userRepository;\n\n    private final SavedQuizRepository savedQuizRepository;\n\n    private final PronunciationServiceImpl pronunciationService;\n\n    private final ResourceService resourceService;\n\n    public QuizServiceImpl(QuizMapper quizMapper,\n                           QuestionMapper questionMapper,\n                           QuizRepository quizRepository,\n                           QuestionRepository questionRepository,\n                           QuizAttemptRepository quizAttemptRepository,\n                           QuizAnswerRepository quizAnswerRepository,\n                           UserRepository userRepository,\n                           SavedQuizRepository savedQuizRepository,\n                           PronunciationServiceImpl pronunciationService,\n                           ResourceService resourceService) {\n        this.quizMapper = quizMapper;\n        this.questionMapper = questionMapper;\n        this.quizRepository = quizRepository;\n        this.questionRepository = questionRepository;\n        this.quizAttemptRepository = quizAttemptRepository;\n        this.quizAnswerRepository = quizAnswerRepository;\n        this.userRepository = userRepository;\n        this.savedQuizRepository = savedQuizRepository;\n        this.pronunciationService = pronunciationService;\n        this.resourceService = resourceService;\n    }\n\n    @Override\n    public BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId) {\n        Quiz q = quizMapper.createQuizDtoToQuiz(request);\n        q.setAuthorId(authorId);\n        quizRepository.save(q);\n        return new BaseCreateUpdateResponse(q.getId().toString());\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public BaseCreateUpdateResponse updateQuiz(CreateQuizDto request) {\n        if (request.getId() == null) {\n            throw new IllegalArgumentException(\"Quiz ID must be provided for update operation.\");\n        }\n        \n        log.info(\"Updating quiz with ID: {}\", UrlConstant.TransactionLogClientServiceApi.GET_TRANSACTION);\n        log.info(\"Updating quiz with ID: {}\", GET_LIST_TRANSACTION);\n        UUID quizId = UUID.fromString(request.getId());\n        Quiz existingQuiz = quizRepository.findById(request.getId())\n                .orElseThrow(() -> new EntityNotFoundException(\"Quiz with ID \" + request.getId() + \" not found.\"));\n\n        quizMapper.updateQuizFromDto(request, existingQuiz);\n        existingQuiz.setUpdatedAt(LocalDateTime.now());\n        if (request.getIsPublic()) {\n            existingQuiz.setStatus(QuizStatus.PUBLIC);\n        } else {\n            existingQuiz.setStatus(QuizStatus.DRAFT);\n        }\n\n        List<Question> existingQuestions = questionRepository.findByQuizId(request.getId());\n        Map<UUID, Question> existingQuestionMap = existingQuestions.stream()\n                .collect(Collectors.toMap(Question::getId, q -> q));\n\n        List<Question> questionsToSaveOrUpdate = new ArrayList<>();\n        Set<UUID> questionIdsInDto = request.getQuestions().stream()\n                .filter(qDto -> qDto.getId() != null)\n                .map(qDto -> UUID.fromString(qDto.getId()))\n                .collect(Collectors.toSet());\n\n        for (QuestionDto qDto : request.getQuestions()) {\n            if (qDto.getId() == null) {\n                Question newQuestion = questionMapper.questionDtoToQuestion(qDto);\n                newQuestion.setQuizId(quizId);\n                newQuestion.setCreatedAt(LocalDateTime.now());\n                newQuestion.setUpdatedAt(LocalDateTime.now());\n                if (!CollectionUtils.isEmpty(newQuestion.getOptions())) {\n                    for (QuestionOption option : newQuestion.getOptions()) {\n                        option.setId(UUID.randomUUID());\n                    }\n                }\n                questionsToSaveOrUpdate.add(newQuestion);\n            } else {\n                UUID qId = UUID.fromString(qDto.getId());\n                Question questionToUpdate = existingQuestionMap.get(qId);\n                if (questionToUpdate != null) {\n                    questionMapper.updateQuestionFromDto(qDto, questionToUpdate);\n                    questionToUpdate.setUpdatedAt(LocalDateTime.now());\n                    \n                    if (!CollectionUtils.isEmpty(questionToUpdate.getOptions())) {\n                        for (QuestionOption option : questionToUpdate.getOptions()) {\n                            if (option.getId() == null) {\n                                option.setId(UUID.randomUUID());\n                            }\n                        }\n                    }\n                    questionsToSaveOrUpdate.add(questionToUpdate);\n                }\n            }\n        }\n\n        List<Question> questionsToDelete = existingQuestions.stream()\n                .filter(eq -> !questionIdsInDto.contains(eq.getId()))\n                .collect(Collectors.toList());\n\n        if (!questionsToDelete.isEmpty()) {\n            questionRepository.deleteAll(questionsToDelete);\n        }\n        if (!questionsToSaveOrUpdate.isEmpty()) {\n            questionRepository.saveAll(questionsToSaveOrUpdate);\n        }\n\n        existingQuiz.setQuestionCount(questionRepository.countByQuizId(quizId.toString()));\n\n        quizRepository.save(existingQuiz);\n        return new BaseCreateUpdateResponse(existingQuiz.getId().toString());\n    }\n\n    @Override\n    public List<Quiz> getAllPublicQuizzes() {\n        List<Quiz> quizzes = quizRepository.findAllPublic();\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n\n    @Override\n    public List<Quiz> getMyQuizzes(UUID id) {\n        List<Quiz> quizzes = quizRepository.findByUserId(id);\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n\n    @Override\n    public Quiz getById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        Set<Question> questions = new HashSet<>(questionRepository.findByQuizId(id));\n        quiz.setQuestions(questions);\n        getQuizAuthor(Collections.singletonList(quiz));\n        return quiz;\n    }\n\n    @Override\n    public void deleteQuiz(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        quiz.setDeletedAt(LocalDateTime.now());\n        quizRepository.save(quiz);\n    }\n\n    @Override\n    @Transactional\n    public BaseCreateUpdateResponse startQuiz(String quizId, UUID userId) {\n        quizRepository.findById(quizId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        QuizAttempt quizAttempt = new QuizAttempt();\n        quizAttempt.setQuizId(UUID.fromString(quizId));\n        quizAttempt.setUserId(userId);\n        quizAttempt.setScore(BigDecimal.ZERO);\n        quizAttempt.setCorrectAnswers(0);\n        quizAttempt.setTimeSpent(0L);\n        quizAttempt.setCompletedAt(null);\n        quizAttempt.setPassed(false);\n\n        QuizAttempt savedAttempt = quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(savedAttempt.getId().toString());\n    }\n\n    @Override\n    @Transactional\n    public BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id) {\n        UUID questionId = UUID.fromString(request.getQuestionId());\n\n        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n\n        \n        if (quizAttempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n\n        Quiz quiz = quizRepository.findById(quizAttempt.getQuizId().toString()).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        \n        if (quiz.getTimeLimit() != null && quizAttempt.getCreatedAt() != null) {\n            LocalDateTime start = quizAttempt.getCreatedAt();\n            LocalDateTime end = LocalDateTime.now();\n            long timeSpent = Duration.between(start, end).toMinutes();\n            if (timeSpent > quiz.getTimeLimit()) {\n                quizAttempt.setTimeSpent(timeSpent);\n                quizAttempt.setCompletedAt(quizAttempt.getCreatedAt().plusMinutes(timeSpent));\n                quizAttemptRepository.save(quizAttempt);\n                throw new BusinessException(ErrorConstant.QUIZ_TIME_LIMIT_EXCEEDED);\n            }\n        }\n\n        Question question = questionRepository.findById(request.getQuestionId())\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUESTION_NOT_FOUND));\n\n        if (!Objects.equals(question.getQuizId(), quizAttempt.getQuizId())) {\n            throw new BusinessException(ErrorConstant.QUESTION_DOES_NOT_BELONG_TO_QUIZ);\n        }\n\n        \n        QuizAnswer quizAnswer = new QuizAnswer();\n        quizAnswer.setQuestionId(questionId);\n\n        if (QuestionType.MULTIPLE_CHOICE.name().equals(question.getType()) && !CollectionUtils.isEmpty(question.getOptions())) {\n            List<QuestionOption> options = question.getOptions().stream()\n                    .filter(option -> option.getId() != null && request.getSelectedOptions().contains(option.getId().toString()))\n                    .collect(Collectors.toList());\n            quizAnswer.setSelectedAnswers(options);\n        }\n        quizAnswer.setFillInBlanksAnswers(request.getFillInBlanksAnswers());\n        quizAnswer.setAnswerText(request.getAnswerText());\n        quizAnswer.setTimeTaken(request.getTimeTaken());\n        quizAnswer.setAudioUrl(request.getAudioUrl());\n\n        boolean isCorrect = false;\n        Integer scoreAchieved = 0;\n\n        \n        switch (question.getType().toLowerCase()) {\n            case \"multiple_choice\":\n                List<String> userSelectedValues = request.getSelectedOptions() != null ?\n                        request.getSelectedOptions().stream()\n                                .filter(Objects::nonNull)\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctOptionValues = question.getCorrectAnswer() != null ?\n                        question.getOptions().stream().filter(QuestionOption::getIsCorrect).map(i -> i.getId().toString()).sorted().toList() : new ArrayList<>();\n                userSelectedValues.sort(String::compareTo);\n\n                isCorrect = userSelectedValues.equals(correctOptionValues);\n                break;\n            case \"true_false\":\n                isCorrect = (request.getUserAnswerTrueFalse() != null &&\n                        request.getUserAnswerTrueFalse().equals(question.getTrueFalseAnswer()));\n                break;\n            case \"fill_in_the_blank\":\n                List<String> userFillInBlanks = request.getFillInBlanksAnswers() != null ?\n                        request.getFillInBlanksAnswers().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctBlanks = question.getCorrectBlanks() != null ?\n                        question.getCorrectBlanks().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                Collections.sort(userFillInBlanks);\n                Collections.sort(correctBlanks);\n\n                isCorrect = userFillInBlanks.equals(correctBlanks);\n                break;\n            case \"short_answer\":\n                isCorrect = (request.getAnswerText() != null &&\n                        question.getCorrectAnswer() != null &&\n                        !question.getCorrectAnswer().isEmpty() &&\n                        question.getCorrectAnswer().getFirst().equalsIgnoreCase(request.getAnswerText().trim()));\n                break;\n            case \"pronunciation\":\n                if (request.getAudioUrl() == null || request.getAudioUrl().isEmpty()) {\n                    break;\n                }\n                File audioFile = resourceService.downloadResourceFromUrl(request.getAudioUrl());\n                if (audioFile == null || !audioFile.exists()) {\n                    break;\n                }\n                String base64File = \"data:audio/ogg;;base64,\" + FileUtils.convertToBase64(audioFile);\n                if (base64File == null) {\n                    break;\n                }\n                try {\n                    PronunciationAccuracyResponseDto pronunAccuracy = pronunciationService.getAccuracy(\n                            PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText())\n                                    .build()\n                    );\n                    isCorrect = pronunAccuracy.getPronunciationAccuracy() >= question.getAcceptRate();\n                    quizAnswer.setAnswerText(JsonUtils.toJsonString(pronunAccuracy));\n                } catch (Exception e) {\n                    log.error(\"Error while checking pronunciation accuracy: {}\", e.getMessage());\n                }\n                break;\n\n            default:\n                System.err.println(\"Unknown question type: \" + question.getType());\n        }\n\n        if (isCorrect) {\n            scoreAchieved = question.getPoints() != null ? question.getPoints() : 0;\n        }\n\n        quizAnswer.setCorrect(isCorrect);\n        quizAnswer.setScoreAchieved(scoreAchieved);\n\n        List<QuizAnswer> currentAnswers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n\n        for (int i = 0; i < currentAnswers.size(); i++) {\n            if (currentAnswers.get(i).getQuestionId().equals(questionId)) {\n                QuizAnswer oldAnswer = currentAnswers.get(i);\n                quizAttempt.setScore(quizAttempt.getScore().subtract(BigDecimal.valueOf(oldAnswer.getScoreAchieved())));\n                if (oldAnswer.isCorrect()) {\n                    quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() - 1);\n                }\n                quizAnswerRepository.delete(oldAnswer);\n                break;\n            }\n        }\n\n        quizAnswer.setQuizAttemptId(UUID.fromString(attemptId));\n        \n        quizAnswerRepository.save(quizAnswer);\n\n        quizAttempt.setScore(quizAttempt.getScore().add(BigDecimal.valueOf(scoreAchieved)));\n        if (isCorrect) {\n            quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() + 1);\n        }\n\n        \n        quizAttemptRepository.save(quizAttempt);\n\n        return new BaseCreateUpdateResponse(quizAnswer.getId().toString());\n    }\n\n    @Override\n    public List<Quiz> getMyQuizAttempts(String userId) {\n        List<QuizAttempt> attempts = quizAttemptRepository.findByUserId(UUID.fromString(userId));\n        if (CollectionUtils.isEmpty(attempts)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizId = attempts.stream()\n                .map(QuizAttempt::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizId);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        Map<UUID, List<QuizAttempt>> attemptMap = attempts.stream()\n                .collect(Collectors.groupingBy(QuizAttempt::getQuizId));\n        for (Quiz quiz : quizzes) {\n            quiz.setQuizAttempts(new HashSet<>(attemptMap.get(quiz.getId())));\n        }\n\n        return quizzes;\n    }\n\n    @Override\n    public QuizAttempt getAttempt(String attemptId, UUID userId) {\n        \n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        Quiz quiz = this.getById(attempt.getQuizId().toString());\n        getQuizAuthor(Collections.singletonList(quiz));\n        attempt.setQuiz(quiz);\n        List<QuizAnswer> answers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        attempt.setAnswers(answers);\n\n        return attempt;\n    }\n\n    @Override\n    public void submitQuizComplete(String attemptId, UUID id) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (!id.equals(attempt.getUserId())) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_BELONG_TO_USER);\n        }\n\n        if (attempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        attempt.setCompletedAt(LocalDateTime.now());\n        quizAttemptRepository.save(attempt);\n        log.info(\"saved quiz attempt with id: {}\", attemptId);\n    }\n\n    @Override\n    public Quiz getQuizStatsById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        getQuizAuthor(Collections.singletonList(quiz));\n        List<Question> questions = questionRepository.findByQuizId(id);\n        quiz.setQuestions(new HashSet<>(questions));\n        List<QuizAttempt> attempts = quizAttemptRepository.findByQuizId(quiz.getId().toString());\n\n        attempts.forEach(attempt -> {\n            userRepository.getUserById(attempt.getUserId().toString()).ifPresent(attempt::setUser);\n        });\n\n        quiz.setQuizAttempts(new HashSet<>(attempts));\n        List<User> savedUsers = savedQuizRepository.findAllByQuizId(id)\n                .stream()\n                .map(savedQuiz -> userRepository.getUserById(savedQuiz.getUserId().toString()).orElse(null))\n                .filter(Objects::nonNull)\n                .toList();\n        quiz.setSavedByUsers(new HashSet<>(savedUsers));\n\n        return quiz;\n    }\n\n    @Override\n    public void saveQuiz(String quizId, UUID userId) {\n        savedQuizRepository.saveQuiz(quizId, userId.toString());\n    }\n\n    @Override\n    public List<Quiz> getSavedQuizzes(UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        if (CollectionUtils.isEmpty(savedQuizzes)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizIds = savedQuizzes.stream()\n                .map(UserSavedQuiz::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        if (CollectionUtils.isEmpty(quizIds)) {\n            return Collections.emptyList();\n        }\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizIds);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        return quizzes;\n    }\n\n    @Override\n    public void unsaveQuiz(String quizId, UUID userId) {\n        UserSavedQuiz savedQuiz = savedQuizRepository.findAllByQuizId(quizId)\n                .stream()\n                .filter(q -> q.getUserId().equals(userId))\n                .findFirst()\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_SAVED));\n\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setDeletedAt(null);\n        savedQuizRepository.update(savedQuiz);\n    }\n\n    @Override\n    public List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        savedQuizzes.forEach(savedQuiz -> {\n            userRepository.getUserById(savedQuiz.getUserId().toString()).ifPresent(savedQuiz::setUser);\n        });\n        return savedQuizzes;\n    }\n\n    private void getQuizAuthor(List<Quiz> quizzes) {\n        quizzes.forEach(q -> {\n            if (q.getAuthorId() != null) {\n                q.setAuthor(userRepository.getUserById(q.getAuthorId().toString()).orElse(null));\n            }\n        });\n    }\n\n}",
    "implements": [
      "com.edu.onestudy.service.QuizService"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.QuizServiceImpl(QuizMapper quizMapper,\n                           QuestionMapper questionMapper,\n                           QuizRepository quizRepository,\n                           QuestionRepository questionRepository,\n                           QuizAttemptRepository quizAttemptRepository,\n                           QuizAnswerRepository quizAnswerRepository,\n                           UserRepository userRepository,\n                           SavedQuizRepository savedQuizRepository,\n                           PronunciationServiceImpl pronunciationService,\n                           ResourceService resourceService)",
        "body": "public QuizServiceImpl(QuizMapper quizMapper,\n                           QuestionMapper questionMapper,\n                           QuizRepository quizRepository,\n                           QuestionRepository questionRepository,\n                           QuizAttemptRepository quizAttemptRepository,\n                           QuizAnswerRepository quizAnswerRepository,\n                           UserRepository userRepository,\n                           SavedQuizRepository savedQuizRepository,\n                           PronunciationServiceImpl pronunciationService,\n                           ResourceService resourceService) {\n        this.quizMapper = quizMapper;\n        this.questionMapper = questionMapper;\n        this.quizRepository = quizRepository;\n        this.questionRepository = questionRepository;\n        this.quizAttemptRepository = quizAttemptRepository;\n        this.quizAnswerRepository = quizAnswerRepository;\n        this.userRepository = userRepository;\n        this.savedQuizRepository = savedQuizRepository;\n        this.pronunciationService = pronunciationService;\n        this.resourceService = resourceService;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "QuestionMapper questionMapper",
          "QuestionRepository questionRepository",
          "SavedQuizRepository savedQuizRepository",
          "ResourceService resourceService",
          "QuizMapper quizMapper",
          "UserRepository userRepository",
          "QuizAttemptRepository quizAttemptRepository",
          "QuizAnswerRepository quizAnswerRepository",
          "QuizRepository quizRepository",
          "PronunciationServiceImpl pronunciationService"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.QuizServiceImpl(QuizMapper quizMapper,\n                           QuestionMapper questionMapper,\n                           QuizRepository quizRepository,\n                           QuestionRepository questionRepository,\n                           QuizAttemptRepository quizAttemptRepository,\n                           QuizAnswerRepository quizAnswerRepository,\n                           UserRepository userRepository,\n                           SavedQuizRepository savedQuizRepository,\n                           PronunciationServiceImpl pronunciationService,\n                           ResourceService resourceService)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.createQuiz(CreateQuizDto request, UUID authorId)",
        "body": "@Override\n    public BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId) {\n        Quiz q = quizMapper.createQuizDtoToQuiz(request);\n        q.setAuthorId(authorId);\n        quizRepository.save(q);\n        return new BaseCreateUpdateResponse(q.getId().toString());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.mapper.QuizMapper.createQuizDtoToQuiz(CreateQuizDto request)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setAuthorId(UUID authorId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.save(Quiz quiz)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.createQuiz(CreateQuizDto request, UUID authorId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.updateQuiz(CreateQuizDto request)",
        "body": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public BaseCreateUpdateResponse updateQuiz(CreateQuizDto request) {\n        if (request.getId() == null) {\n            throw new IllegalArgumentException(\"Quiz ID must be provided for update operation.\");\n        }\n        \n        log.info(\"Updating quiz with ID: {}\", UrlConstant.TransactionLogClientServiceApi.GET_TRANSACTION);\n        log.info(\"Updating quiz with ID: {}\", GET_LIST_TRANSACTION);\n        UUID quizId = UUID.fromString(request.getId());\n        Quiz existingQuiz = quizRepository.findById(request.getId())\n                .orElseThrow(() -> new EntityNotFoundException(\"Quiz with ID \" + request.getId() + \" not found.\"));\n\n        quizMapper.updateQuizFromDto(request, existingQuiz);\n        existingQuiz.setUpdatedAt(LocalDateTime.now());\n        if (request.getIsPublic()) {\n            existingQuiz.setStatus(QuizStatus.PUBLIC);\n        } else {\n            existingQuiz.setStatus(QuizStatus.DRAFT);\n        }\n\n        List<Question> existingQuestions = questionRepository.findByQuizId(request.getId());\n        Map<UUID, Question> existingQuestionMap = existingQuestions.stream()\n                .collect(Collectors.toMap(Question::getId, q -> q));\n\n        List<Question> questionsToSaveOrUpdate = new ArrayList<>();\n        Set<UUID> questionIdsInDto = request.getQuestions().stream()\n                .filter(qDto -> qDto.getId() != null)\n                .map(qDto -> UUID.fromString(qDto.getId()))\n                .collect(Collectors.toSet());\n\n        for (QuestionDto qDto : request.getQuestions()) {\n            if (qDto.getId() == null) {\n                Question newQuestion = questionMapper.questionDtoToQuestion(qDto);\n                newQuestion.setQuizId(quizId);\n                newQuestion.setCreatedAt(LocalDateTime.now());\n                newQuestion.setUpdatedAt(LocalDateTime.now());\n                if (!CollectionUtils.isEmpty(newQuestion.getOptions())) {\n                    for (QuestionOption option : newQuestion.getOptions()) {\n                        option.setId(UUID.randomUUID());\n                    }\n                }\n                questionsToSaveOrUpdate.add(newQuestion);\n            } else {\n                UUID qId = UUID.fromString(qDto.getId());\n                Question questionToUpdate = existingQuestionMap.get(qId);\n                if (questionToUpdate != null) {\n                    questionMapper.updateQuestionFromDto(qDto, questionToUpdate);\n                    questionToUpdate.setUpdatedAt(LocalDateTime.now());\n                    \n                    if (!CollectionUtils.isEmpty(questionToUpdate.getOptions())) {\n                        for (QuestionOption option : questionToUpdate.getOptions()) {\n                            if (option.getId() == null) {\n                                option.setId(UUID.randomUUID());\n                            }\n                        }\n                    }\n                    questionsToSaveOrUpdate.add(questionToUpdate);\n                }\n            }\n        }\n\n        List<Question> questionsToDelete = existingQuestions.stream()\n                .filter(eq -> !questionIdsInDto.contains(eq.getId()))\n                .collect(Collectors.toList());\n\n        if (!questionsToDelete.isEmpty()) {\n            questionRepository.deleteAll(questionsToDelete);\n        }\n        if (!questionsToSaveOrUpdate.isEmpty()) {\n            questionRepository.saveAll(questionsToSaveOrUpdate);\n        }\n\n        existingQuiz.setQuestionCount(questionRepository.countByQuizId(quizId.toString()));\n\n        quizRepository.save(existingQuiz);\n        return new BaseCreateUpdateResponse(existingQuiz.getId().toString());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.quiz.CreateQuizDto.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.QuizMapper.updateQuizFromDto(CreateQuizDto dto, @MappingTarget Quiz entity)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setUpdatedAt(LocalDateTime updatedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.CreateQuizDto.getIsPublic()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setStatus(QuizStatus status)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.findByQuizId(String quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.CreateQuizDto.getQuestions()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.QuestionDto.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.QuestionMapper.questionDtoToQuestion(QuestionDto dto)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.setQuizId(UUID quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.setCreatedAt(LocalDateTime createdAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.setUpdatedAt(LocalDateTime updatedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getOptions()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuestionOption.setId(UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.mapper.QuestionMapper.updateQuestionFromDto(QuestionDto dto, @MappingTarget Question entity)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuestionOption.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.deleteAll(List<Question> questions)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.saveAll(List<Question> questions)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setQuestionCount(Integer questionCount)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.countByQuizId(String quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.save(Quiz quiz)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Question",
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [
          "PUBLIC",
          "DRAFT",
          "GET_TRANSACTION",
          "com.edu.onestudy.constant.UrlConstant.TransactionLogClientServiceApi"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.updateQuiz(CreateQuizDto request)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getAllPublicQuizzes()",
        "body": "@Override\n    public List<Quiz> getAllPublicQuizzes() {\n        List<Quiz> quizzes = quizRepository.findAllPublic();\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findAllPublic()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getAllPublicQuizzes()"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getMyQuizzes(UUID id)",
        "body": "@Override\n    public List<Quiz> getMyQuizzes(UUID id) {\n        List<Quiz> quizzes = quizRepository.findByUserId(id);\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findByUserId(UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getMyQuizzes(UUID id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getById(String id)",
        "body": "@Override\n    public Quiz getById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        Set<Question> questions = new HashSet<>(questionRepository.findByQuizId(id));\n        quiz.setQuestions(questions);\n        getQuizAuthor(Collections.singletonList(quiz));\n        return quiz;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.findByQuizId(String quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setQuestions(Set<Question> questions)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Quiz",
          "com.edu.onestudy.entity.Question"
        ],
        "field_access": [
          "int QUIZ_NOT_FOUND = 4040002"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.deleteQuiz(String id)",
        "body": "@Override\n    public void deleteQuiz(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        quiz.setDeletedAt(LocalDateTime.now());\n        quizRepository.save(quiz);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setDeletedAt(LocalDateTime deletedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.save(Quiz quiz)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [
          "int QUIZ_NOT_FOUND = 4040002"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.deleteQuiz(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.startQuiz(String quizId, UUID userId)",
        "body": "@Override\n    @Transactional\n    public BaseCreateUpdateResponse startQuiz(String quizId, UUID userId) {\n        quizRepository.findById(quizId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        QuizAttempt quizAttempt = new QuizAttempt();\n        quizAttempt.setQuizId(UUID.fromString(quizId));\n        quizAttempt.setUserId(userId);\n        quizAttempt.setScore(BigDecimal.ZERO);\n        quizAttempt.setCorrectAnswers(0);\n        quizAttempt.setTimeSpent(0L);\n        quizAttempt.setCompletedAt(null);\n        quizAttempt.setPassed(false);\n\n        QuizAttempt savedAttempt = quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(savedAttempt.getId().toString());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setQuizId(UUID quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setUserId(UUID userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setScore(BigDecimal score)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setCorrectAnswers(Integer correctAnswers)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setTimeSpent(Long timeSpent)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setCompletedAt(LocalDateTime completedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setPassed(Boolean passed)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.save(QuizAttempt attempt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.QuizAttempt"
        ],
        "field_access": [
          "int QUIZ_NOT_FOUND = 4040002",
          "BigDecimal ZERO"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.startQuiz(String quizId, UUID userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id)",
        "body": "@Override\n    @Transactional\n    public BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id) {\n        UUID questionId = UUID.fromString(request.getQuestionId());\n\n        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n\n        \n        if (quizAttempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n\n        Quiz quiz = quizRepository.findById(quizAttempt.getQuizId().toString()).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n\n        \n        if (quiz.getTimeLimit() != null && quizAttempt.getCreatedAt() != null) {\n            LocalDateTime start = quizAttempt.getCreatedAt();\n            LocalDateTime end = LocalDateTime.now();\n            long timeSpent = Duration.between(start, end).toMinutes();\n            if (timeSpent > quiz.getTimeLimit()) {\n                quizAttempt.setTimeSpent(timeSpent);\n                quizAttempt.setCompletedAt(quizAttempt.getCreatedAt().plusMinutes(timeSpent));\n                quizAttemptRepository.save(quizAttempt);\n                throw new BusinessException(ErrorConstant.QUIZ_TIME_LIMIT_EXCEEDED);\n            }\n        }\n\n        Question question = questionRepository.findById(request.getQuestionId())\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUESTION_NOT_FOUND));\n\n        if (!Objects.equals(question.getQuizId(), quizAttempt.getQuizId())) {\n            throw new BusinessException(ErrorConstant.QUESTION_DOES_NOT_BELONG_TO_QUIZ);\n        }\n\n        \n        QuizAnswer quizAnswer = new QuizAnswer();\n        quizAnswer.setQuestionId(questionId);\n\n        if (QuestionType.MULTIPLE_CHOICE.name().equals(question.getType()) && !CollectionUtils.isEmpty(question.getOptions())) {\n            List<QuestionOption> options = question.getOptions().stream()\n                    .filter(option -> option.getId() != null && request.getSelectedOptions().contains(option.getId().toString()))\n                    .collect(Collectors.toList());\n            quizAnswer.setSelectedAnswers(options);\n        }\n        quizAnswer.setFillInBlanksAnswers(request.getFillInBlanksAnswers());\n        quizAnswer.setAnswerText(request.getAnswerText());\n        quizAnswer.setTimeTaken(request.getTimeTaken());\n        quizAnswer.setAudioUrl(request.getAudioUrl());\n\n        boolean isCorrect = false;\n        Integer scoreAchieved = 0;\n\n        \n        switch (question.getType().toLowerCase()) {\n            case \"multiple_choice\":\n                List<String> userSelectedValues = request.getSelectedOptions() != null ?\n                        request.getSelectedOptions().stream()\n                                .filter(Objects::nonNull)\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctOptionValues = question.getCorrectAnswer() != null ?\n                        question.getOptions().stream().filter(QuestionOption::getIsCorrect).map(i -> i.getId().toString()).sorted().toList() : new ArrayList<>();\n                userSelectedValues.sort(String::compareTo);\n\n                isCorrect = userSelectedValues.equals(correctOptionValues);\n                break;\n            case \"true_false\":\n                isCorrect = (request.getUserAnswerTrueFalse() != null &&\n                        request.getUserAnswerTrueFalse().equals(question.getTrueFalseAnswer()));\n                break;\n            case \"fill_in_the_blank\":\n                List<String> userFillInBlanks = request.getFillInBlanksAnswers() != null ?\n                        request.getFillInBlanksAnswers().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                List<String> correctBlanks = question.getCorrectBlanks() != null ?\n                        question.getCorrectBlanks().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n\n                Collections.sort(userFillInBlanks);\n                Collections.sort(correctBlanks);\n\n                isCorrect = userFillInBlanks.equals(correctBlanks);\n                break;\n            case \"short_answer\":\n                isCorrect = (request.getAnswerText() != null &&\n                        question.getCorrectAnswer() != null &&\n                        !question.getCorrectAnswer().isEmpty() &&\n                        question.getCorrectAnswer().getFirst().equalsIgnoreCase(request.getAnswerText().trim()));\n                break;\n            case \"pronunciation\":\n                if (request.getAudioUrl() == null || request.getAudioUrl().isEmpty()) {\n                    break;\n                }\n                File audioFile = resourceService.downloadResourceFromUrl(request.getAudioUrl());\n                if (audioFile == null || !audioFile.exists()) {\n                    break;\n                }\n                String base64File = \"data:audio/ogg;;base64,\" + FileUtils.convertToBase64(audioFile);\n                if (base64File == null) {\n                    break;\n                }\n                try {\n                    PronunciationAccuracyResponseDto pronunAccuracy = pronunciationService.getAccuracy(\n                            PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText())\n                                    .build()\n                    );\n                    isCorrect = pronunAccuracy.getPronunciationAccuracy() >= question.getAcceptRate();\n                    quizAnswer.setAnswerText(JsonUtils.toJsonString(pronunAccuracy));\n                } catch (Exception e) {\n                    log.error(\"Error while checking pronunciation accuracy: {}\", e.getMessage());\n                }\n                break;\n\n            default:\n                System.err.println(\"Unknown question type: \" + question.getType());\n        }\n\n        if (isCorrect) {\n            scoreAchieved = question.getPoints() != null ? question.getPoints() : 0;\n        }\n\n        quizAnswer.setCorrect(isCorrect);\n        quizAnswer.setScoreAchieved(scoreAchieved);\n\n        List<QuizAnswer> currentAnswers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n\n        for (int i = 0; i < currentAnswers.size(); i++) {\n            if (currentAnswers.get(i).getQuestionId().equals(questionId)) {\n                QuizAnswer oldAnswer = currentAnswers.get(i);\n                quizAttempt.setScore(quizAttempt.getScore().subtract(BigDecimal.valueOf(oldAnswer.getScoreAchieved())));\n                if (oldAnswer.isCorrect()) {\n                    quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() - 1);\n                }\n                quizAnswerRepository.delete(oldAnswer);\n                break;\n            }\n        }\n\n        quizAnswer.setQuizAttemptId(UUID.fromString(attemptId));\n        \n        quizAnswerRepository.save(quizAnswer);\n\n        quizAttempt.setScore(quizAttempt.getScore().add(BigDecimal.valueOf(scoreAchieved)));\n        if (isCorrect) {\n            quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() + 1);\n        }\n\n        \n        quizAttemptRepository.save(quizAttempt);\n\n        return new BaseCreateUpdateResponse(quizAnswer.getId().toString());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getQuestionId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getCompletedAt()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getQuizId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.getTimeLimit()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getCreatedAt()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setTimeSpent(Long timeSpent)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setCompletedAt(LocalDateTime completedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.save(QuizAttempt attempt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getQuizId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setQuestionId(UUID questionId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getType()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getOptions()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuestionOption.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getSelectedOptions()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setSelectedAnswers(List<QuestionOption> selectedAnswers)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setFillInBlanksAnswers(List<String> fillInBlanksAnswers)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getFillInBlanksAnswers()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setAnswerText(String answerText)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getAnswerText()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setTimeTaken(Integer timeTaken)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getTimeTaken()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setAudioUrl(String audioUrl)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getAudioUrl()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getCorrectAnswer()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.quiz.SubmitAnswerRequest.getUserAnswerTrueFalse()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getTrueFalseAnswer()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getCorrectBlanks()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.ResourceService.downloadResourceFromUrl(String url)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.utils.FileUtils.convertToBase64(File file)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.thirdparty.pronunciation_svc.PronunciationServiceImpl.getAccuracy(PronunciationAccuracyRequestDto request)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyRequestDto.builder()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyRequestDto.PronunciationAccuracyRequestDtoBuilder.base64Audio(String base64Audio)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyRequestDto.PronunciationAccuracyRequestDtoBuilder.text(String text)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getPronunciationText()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyRequestDto.PronunciationAccuracyRequestDtoBuilder.build()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyResponseDto.getPronunciationAccuracy()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getAcceptRate()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.utils.JsonUtils.toJsonString(Object input)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Question.getPoints()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setCorrect(boolean isCorrect)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setScoreAchieved(Integer scoreAchieved)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAnswerRepository.findByQuizAttemptId(String attemptId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.getQuestionId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setScore(BigDecimal score)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getScore()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.getScoreAchieved()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.isCorrect()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setCorrectAnswers(Integer correctAnswers)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getCorrectAnswers()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAnswerRepository.delete(QuizAnswer oldAnswer)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.setQuizAttemptId(UUID quizAttemptId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAnswerRepository.save(QuizAnswer answer)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAnswer.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.QuizAttempt",
          "com.edu.onestudy.entity.QuestionOption",
          "com.edu.onestudy.entity.Quiz",
          "com.edu.onestudy.entity.Question",
          "com.edu.onestudy.entity.QuizAnswer",
          "com.edu.onestudy.dto.pronunciation.PronunciationAccuracyResponseDto"
        ],
        "field_access": [
          "MULTIPLE_CHOICE",
          "int QUIZ_TIME_LIMIT_EXCEEDED = 4040008",
          "int QUIZ_NOT_FOUND = 4040002",
          "int QUIZ_ATTEMPT_NOT_FOUND = 4040003",
          "PrintStream err",
          "int QUESTION_DOES_NOT_BELONG_TO_QUIZ = 4040005",
          "int QUESTION_NOT_FOUND = 4040006",
          "int QUIZ_ATTEMPT_SUBMITTED = 4040004"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getMyQuizAttempts(String userId)",
        "body": "@Override\n    public List<Quiz> getMyQuizAttempts(String userId) {\n        List<QuizAttempt> attempts = quizAttemptRepository.findByUserId(UUID.fromString(userId));\n        if (CollectionUtils.isEmpty(attempts)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizId = attempts.stream()\n                .map(QuizAttempt::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizId);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        Map<UUID, List<QuizAttempt>> attemptMap = attempts.stream()\n                .collect(Collectors.groupingBy(QuizAttempt::getQuizId));\n        for (Quiz quiz : quizzes) {\n            quiz.setQuizAttempts(new HashSet<>(attemptMap.get(quiz.getId())));\n        }\n\n        return quizzes;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.findByUserId(UUID id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findByIdIn(Set<String> quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setQuizAttempts(Set<QuizAttempt> quizAttempts)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.QuizAttempt",
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getMyQuizAttempts(String userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getAttempt(String attemptId, UUID userId)",
        "body": "@Override\n    public QuizAttempt getAttempt(String attemptId, UUID userId) {\n        \n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        Quiz quiz = this.getById(attempt.getQuizId().toString());\n        getQuizAuthor(Collections.singletonList(quiz));\n        attempt.setQuiz(quiz);\n        List<QuizAnswer> answers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        attempt.setAnswers(answers);\n\n        return attempt;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getQuizId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setQuiz(Quiz quiz)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAnswerRepository.findByQuizAttemptId(String attemptId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setAnswers(List<QuizAnswer> answers)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.Quiz",
          "com.edu.onestudy.entity.QuizAttempt",
          "com.edu.onestudy.entity.QuizAnswer"
        ],
        "field_access": [
          "int QUIZ_ATTEMPT_NOT_FOUND = 4040003"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getAttempt(String attemptId, UUID userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.submitQuizComplete(String attemptId, UUID id)",
        "body": "@Override\n    public void submitQuizComplete(String attemptId, UUID id) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (!id.equals(attempt.getUserId())) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_BELONG_TO_USER);\n        }\n\n        if (attempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        attempt.setCompletedAt(LocalDateTime.now());\n        quizAttemptRepository.save(attempt);\n        log.info(\"saved quiz attempt with id: {}\", attemptId);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getUserId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getCompletedAt()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.setCompletedAt(LocalDateTime completedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.save(QuizAttempt attempt)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.QuizAttempt"
        ],
        "field_access": [
          "int QUIZ_ATTEMPT_NOT_FOUND = 4040003",
          "int QUIZ_ATTEMPT_NOT_BELONG_TO_USER = 4040007",
          "int QUIZ_ATTEMPT_SUBMITTED = 4040004"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.submitQuizComplete(String attemptId, UUID id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizStatsById(String id)",
        "body": "@Override\n    public Quiz getQuizStatsById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        getQuizAuthor(Collections.singletonList(quiz));\n        List<Question> questions = questionRepository.findByQuizId(id);\n        quiz.setQuestions(new HashSet<>(questions));\n        List<QuizAttempt> attempts = quizAttemptRepository.findByQuizId(quiz.getId().toString());\n\n        attempts.forEach(attempt -> {\n            userRepository.getUserById(attempt.getUserId().toString()).ifPresent(attempt::setUser);\n        });\n\n        quiz.setQuizAttempts(new HashSet<>(attempts));\n        List<User> savedUsers = savedQuizRepository.findAllByQuizId(id)\n                .stream()\n                .map(savedQuiz -> userRepository.getUserById(savedQuiz.getUserId().toString()).orElse(null))\n                .filter(Objects::nonNull)\n                .toList();\n        quiz.setSavedByUsers(new HashSet<>(savedUsers));\n\n        return quiz;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findById(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuestionRepository.findByQuizId(String quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setQuestions(Set<Question> questions)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizAttemptRepository.findByQuizId(String id)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.getId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.UserRepository.getUserById(String userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.QuizAttempt.getUserId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setQuizAttempts(Set<QuizAttempt> quizAttempts)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.SavedQuizRepository.findAllByQuizId(String quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.getUserId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setSavedByUsers(Set<User> savedByUsers)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.QuizAttempt",
          "com.edu.onestudy.entity.Question",
          "com.edu.onestudy.entity.Quiz",
          "com.edu.onestudy.entity.User"
        ],
        "field_access": [
          "int QUIZ_NOT_FOUND = 4040002"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getQuizStatsById(String id)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.saveQuiz(String quizId, UUID userId)",
        "body": "@Override\n    public void saveQuiz(String quizId, UUID userId) {\n        savedQuizRepository.saveQuiz(quizId, userId.toString());\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.SavedQuizRepository.saveQuiz(String quizId, String userId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.saveQuiz(String quizId, UUID userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getSavedQuizzes(UUID userId)",
        "body": "@Override\n    public List<Quiz> getSavedQuizzes(UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        if (CollectionUtils.isEmpty(savedQuizzes)) {\n            return Collections.emptyList();\n        }\n\n        Set<String> quizIds = savedQuizzes.stream()\n                .map(UserSavedQuiz::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        if (CollectionUtils.isEmpty(quizIds)) {\n            return Collections.emptyList();\n        }\n\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizIds);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n\n        getQuizAuthor(quizzes);\n\n        return quizzes;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.SavedQuizRepository.findAllByUserId(String userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.QuizRepository.findByIdIn(Set<String> quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserSavedQuiz",
          "com.edu.onestudy.entity.Quiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getSavedQuizzes(UUID userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.unsaveQuiz(String quizId, UUID userId)",
        "body": "@Override\n    public void unsaveQuiz(String quizId, UUID userId) {\n        UserSavedQuiz savedQuiz = savedQuizRepository.findAllByQuizId(quizId)\n                .stream()\n                .filter(q -> q.getUserId().equals(userId))\n                .findFirst()\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_SAVED));\n\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setDeletedAt(null);\n        savedQuizRepository.update(savedQuiz);\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.SavedQuizRepository.findAllByQuizId(String quizId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.getUserId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.setSavedAt(LocalDateTime savedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.setDeletedAt(LocalDateTime deletedAt)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.SavedQuizRepository.update(UserSavedQuiz savedQuiz)",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserSavedQuiz"
        ],
        "field_access": [
          "int QUIZ_NOT_SAVED = 4040009"
        ],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.unsaveQuiz(String quizId, UUID userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getUserSavedQuiz(String quizId, UUID userId)",
        "body": "@Override\n    public List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        savedQuizzes.forEach(savedQuiz -> {\n            userRepository.getUserById(savedQuiz.getUserId().toString()).ifPresent(savedQuiz::setUser);\n        });\n        return savedQuizzes;\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.repository.SavedQuizRepository.findAllByUserId(String userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.UserRepository.getUserById(String userId)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.UserSavedQuiz.getUserId()",
            "params": []
          }
        ],
        "used_types": [
          "com.edu.onestudy.entity.UserSavedQuiz"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getUserSavedQuiz(String quizId, UUID userId)"
        ],
        "extends_info": [],
        "endpoint": []
      },
      {
        "name": "com.edu.onestudy.service.impl.QuizServiceImpl.getQuizAuthor(List<Quiz> quizzes)",
        "body": "private void getQuizAuthor(List<Quiz> quizzes) {\n        quizzes.forEach(q -> {\n            if (q.getAuthorId() != null) {\n                q.setAuthor(userRepository.getUserById(q.getAuthorId().toString()).orElse(null));\n            }\n        });\n    }",
        "method_calls": [
          {
            "name": "com.edu.onestudy.entity.Quiz.getAuthorId()",
            "params": []
          },
          {
            "name": "com.edu.onestudy.entity.Quiz.setAuthor(User author)",
            "params": []
          },
          {
            "name": "com.edu.onestudy.repository.UserRepository.getUserById(String userId)",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.edu.onestudy.service.QuizService.getQuizAuthor(List<Quiz> quizzes)"
        ],
        "extends_info": [],
        "endpoint": []
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "is_config_file": false
  }
]