[
  {
    "package": "com.example.springdemo.config",
    "class_name": "JpaConfig",
    "full_class_name": "com.example.springdemo.config.JpaConfig",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\config\\JpaConfig.java",
    "content": "@Configuration\n@EnableJpaRepositories(basePackages = \"com.example.springdemo.repository\")\n@EnableJpaAuditing\n@EnableTransactionManagement\npublic class JpaConfig {\n    \n    \n    \n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "configuration"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "Notification",
    "full_class_name": "com.example.springdemo.entity.Notification",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Notification.java",
    "content": "@Entity\n@Table(name = \"notifications\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Notification {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\", nullable = false)\n    private User user;\n    \n    @Column(nullable = false)\n    private String title;\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String message;\n    \n    @Enumerated(EnumType.STRING)\n    private NotificationType type;\n    \n    @Enumerated(EnumType.STRING)\n    private NotificationStatus status;\n    \n    private String metadata;\n    \n    @CreationTimestamp\n    private LocalDateTime createdAt;\n    \n    public enum NotificationType {\n        ORDER_UPDATE, PAYMENT_CONFIRMATION, SHIPMENT_TRACKING, PROMOTION, SYSTEM_ALERT\n    }\n    \n    public enum NotificationStatus {\n        UNREAD, READ, ARCHIVED\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "NotificationType",
    "full_class_name": "com.example.springdemo.entity.Notification.NotificationType",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Notification.java",
    "content": "public enum NotificationType {\n        ORDER_UPDATE, PAYMENT_CONFIRMATION, SHIPMENT_TRACKING, PROMOTION, SYSTEM_ALERT\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.Notification"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "NotificationStatus",
    "full_class_name": "com.example.springdemo.entity.Notification.NotificationStatus",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Notification.java",
    "content": "public enum NotificationStatus {\n        UNREAD, READ, ARCHIVED\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.Notification"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "OrderItem",
    "full_class_name": "com.example.springdemo.entity.OrderItem",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\OrderItem.java",
    "content": "@Entity\n@Table(name = \"order_items\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class OrderItem {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\", nullable = false)\n    private Order order;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"product_id\", nullable = false)\n    private Product product;\n    \n    @Column(nullable = false)\n    private Integer quantity;\n    \n    @Column(precision = 10, scale = 2)\n    private BigDecimal unitPrice;\n    \n    @Column(precision = 10, scale = 2)\n    private BigDecimal totalPrice;\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "OrderEvent",
    "full_class_name": "com.example.springdemo.entity.OrderEvent",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\OrderEvent.java",
    "content": "@Entity\n@Table(name = \"order_events\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class OrderEvent {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"order_id\", nullable = false)\n    private Order order;\n    \n    @Enumerated(EnumType.STRING)\n    private EventType eventType;\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String eventData;\n    \n    private String source;\n    \n    @CreationTimestamp\n    private LocalDateTime timestamp;\n    \n    public enum EventType {\n        ORDER_CREATED, ORDER_CONFIRMED, PAYMENT_PROCESSED, \n        ORDER_SHIPPED, ORDER_DELIVERED, ORDER_CANCELLED, \n        ORDER_REFUNDED, STATUS_CHANGED\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "EventType",
    "full_class_name": "com.example.springdemo.entity.OrderEvent.EventType",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\OrderEvent.java",
    "content": "public enum EventType {\n        ORDER_CREATED, ORDER_CONFIRMED, PAYMENT_PROCESSED, \n        ORDER_SHIPPED, ORDER_DELIVERED, ORDER_CANCELLED, \n        ORDER_REFUNDED, STATUS_CHANGED\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.OrderEvent"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "User",
    "full_class_name": "com.example.springdemo.entity.User",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\User.java",
    "content": "@Entity\n@Table(name = \"users\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false)\n    private String username;\n    \n    @Column(unique = true, nullable = false)\n    private String email;\n    \n    private String firstName;\n    private String lastName;\n    \n    @Enumerated(EnumType.STRING)\n    private UserRole role;\n    \n    @Enumerated(EnumType.STRING)\n    private UserStatus status;\n    \n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Order> orders = new ArrayList<>();\n    \n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Notification> notifications = new ArrayList<>();\n    \n    @CreationTimestamp\n    private LocalDateTime createdAt;\n    \n    @UpdateTimestamp\n    private LocalDateTime updatedAt;\n    \n    public enum UserRole {\n        ADMIN, MANAGER, CUSTOMER, GUEST\n    }\n    \n    public enum UserStatus {\n        ACTIVE, INACTIVE, SUSPENDED, PENDING\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "UserRole",
    "full_class_name": "com.example.springdemo.entity.User.UserRole",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\User.java",
    "content": "public enum UserRole {\n        ADMIN, MANAGER, CUSTOMER, GUEST\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.User"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "UserStatus",
    "full_class_name": "com.example.springdemo.entity.User.UserStatus",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\User.java",
    "content": "public enum UserStatus {\n        ACTIVE, INACTIVE, SUSPENDED, PENDING\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.User"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "Order",
    "full_class_name": "com.example.springdemo.entity.Order",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Order.java",
    "content": "@Entity\n@Table(name = \"orders\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Order {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false)\n    private String orderNumber;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\", nullable = false)\n    private User user;\n    \n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<OrderItem> orderItems = new ArrayList<>();\n    \n    @Column(precision = 10, scale = 2)\n    private BigDecimal totalAmount;\n    \n    @Enumerated(EnumType.STRING)\n    private OrderStatus status;\n    \n    @Enumerated(EnumType.STRING)\n    private PaymentStatus paymentStatus;\n    \n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<OrderEvent> events = new ArrayList<>();\n    \n    @CreationTimestamp\n    private LocalDateTime createdAt;\n    \n    @UpdateTimestamp\n    private LocalDateTime updatedAt;\n    \n    public enum OrderStatus {\n        PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED\n    }\n    \n    public enum PaymentStatus {\n        PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "OrderStatus",
    "full_class_name": "com.example.springdemo.entity.Order.OrderStatus",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Order.java",
    "content": "public enum OrderStatus {\n        PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.Order"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "PaymentStatus",
    "full_class_name": "com.example.springdemo.entity.Order.PaymentStatus",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Order.java",
    "content": "public enum PaymentStatus {\n        PENDING, PAID, FAILED, REFUNDED, PARTIALLY_REFUNDED\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.Order"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "Product",
    "full_class_name": "com.example.springdemo.entity.Product",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Product.java",
    "content": "@Entity\n@Table(name = \"products\")\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Product {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    private String description;\n    \n    @Column(nullable = false, precision = 10, scale = 2)\n    private BigDecimal price;\n    \n    @Column(nullable = false)\n    private Integer stockQuantity;\n    \n    @Enumerated(EnumType.STRING)\n    private ProductCategory category;\n    \n    @Enumerated(EnumType.STRING)\n    private ProductStatus status;\n    \n    @OneToMany(mappedBy = \"product\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<OrderItem> orderItems = new ArrayList<>();\n    \n    @ManyToMany(mappedBy = \"products\", fetch = FetchType.LAZY)\n    private List<Order> orders = new ArrayList<>();\n    \n    @CreationTimestamp\n    private LocalDateTime createdAt;\n    \n    @UpdateTimestamp\n    private LocalDateTime updatedAt;\n    \n    public enum ProductCategory {\n        ELECTRONICS, CLOTHING, BOOKS, HOME, SPORTS, FOOD\n    }\n    \n    public enum ProductStatus {\n        AVAILABLE, OUT_OF_STOCK, DISCONTINUED, COMING_SOON\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "ProductCategory",
    "full_class_name": "com.example.springdemo.entity.Product.ProductCategory",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Product.java",
    "content": "public enum ProductCategory {\n        ELECTRONICS, CLOTHING, BOOKS, HOME, SPORTS, FOOD\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.Product"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.entity",
    "class_name": "ProductStatus",
    "full_class_name": "com.example.springdemo.entity.Product.ProductStatus",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\entity\\Product.java",
    "content": "public enum ProductStatus {\n        AVAILABLE, OUT_OF_STOCK, DISCONTINUED, COMING_SOON\n    }",
    "implements": [],
    "extends": null,
    "methods": [],
    "parent_class": [
      "com.example.springdemo.entity.Product"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo",
    "class_name": "SpringDemoApplication",
    "full_class_name": "com.example.springdemo.SpringDemoApplication",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\SpringDemoApplication.java",
    "content": "@SpringBootApplication\n@EnableKafka\npublic class SpringDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringDemoApplication.class, args);\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.SpringDemoApplication.main(String[] args)",
        "body": "public static void main(String[] args) {\n        SpringApplication.run(SpringDemoApplication.class, args);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "configuration"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "OrderEvent",
    "full_class_name": "com.example.springdemo.observer.OrderEvent",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\OrderEvent.java",
    "content": "public class OrderEvent extends ApplicationEvent {\n    \n    private final String eventType;\n    private final Object orderData;\n    \n    public OrderEvent(Object source, String eventType, Object orderData) {\n        super(source);\n        this.eventType = eventType;\n        this.orderData = orderData;\n    }\n    \n    public String getEventType() {\n        return eventType;\n    }\n    \n    public Object getOrderData() {\n        return orderData;\n    }\n}",
    "implements": [],
    "extends": "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class",
    "methods": [
      {
        "name": "com.example.springdemo.observer.OrderEvent.OrderEvent(Object source, String eventType, Object orderData)",
        "body": "public OrderEvent(Object source, String eventType, Object orderData) {\n        super(source);\n        this.eventType = eventType;\n        this.orderData = orderData;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Object orderData",
          "String eventType"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.OrderEvent(Object source, String eventType, Object orderData)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.OrderEvent.getEventType()",
        "body": "public String getEventType() {\n        return eventType;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.getEventType()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.OrderEvent.getOrderData()",
        "body": "public Object getOrderData() {\n        return orderData;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.getOrderData()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "UserEvent",
    "full_class_name": "com.example.springdemo.observer.UserEvent",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\UserEvent.java",
    "content": "public class UserEvent extends ApplicationEvent {\n    \n    private final String eventType;\n    private final Object userData;\n    \n    public UserEvent(Object source, String eventType, Object userData) {\n        super(source);\n        this.eventType = eventType;\n        this.userData = userData;\n    }\n    \n    public String getEventType() {\n        return eventType;\n    }\n    \n    public Object getUserData() {\n        return userData;\n    }\n}",
    "implements": [],
    "extends": "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class",
    "methods": [
      {
        "name": "com.example.springdemo.observer.UserEvent.UserEvent(Object source, String eventType, Object userData)",
        "body": "public UserEvent(Object source, String eventType, Object userData) {\n        super(source);\n        this.eventType = eventType;\n        this.userData = userData;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Object userData",
          "String eventType"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.UserEvent(Object source, String eventType, Object userData)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.UserEvent.getEventType()",
        "body": "public String getEventType() {\n        return eventType;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.getEventType()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.UserEvent.getUserData()",
        "body": "public Object getUserData() {\n        return userData;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.getUserData()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "NotificationEvent",
    "full_class_name": "com.example.springdemo.observer.NotificationEvent",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\NotificationEvent.java",
    "content": "public class NotificationEvent extends ApplicationEvent {\n    \n    private final String eventType;\n    private final Object notificationData;\n    \n    public NotificationEvent(Object source, String eventType, Object notificationData) {\n        super(source);\n        this.eventType = eventType;\n        this.notificationData = notificationData;\n    }\n    \n    public String getEventType() {\n        return eventType;\n    }\n    \n    public Object getNotificationData() {\n        return notificationData;\n    }\n}",
    "implements": [],
    "extends": "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class",
    "methods": [
      {
        "name": "com.example.springdemo.observer.NotificationEvent.NotificationEvent(Object source, String eventType, Object notificationData)",
        "body": "public NotificationEvent(Object source, String eventType, Object notificationData) {\n        super(source);\n        this.eventType = eventType;\n        this.notificationData = notificationData;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Object notificationData",
          "String eventType"
        ],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.NotificationEvent(Object source, String eventType, Object notificationData)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.NotificationEvent.getEventType()",
        "body": "public String getEventType() {\n        return eventType;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.getEventType()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.NotificationEvent.getNotificationData()",
        "body": "public Object getNotificationData() {\n        return notificationData;\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-context-6.1.1.jar\\org.springframework.context\\ApplicationEvent.class.getNotificationData()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "NotificationEventListener",
    "full_class_name": "com.example.springdemo.observer.NotificationEventListener",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\NotificationEventListener.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class NotificationEventListener {\n    \n    @EventListener\n    public void handleNotificationEvent(NotificationEvent notificationEvent) {\n        log.info(\"Received notification event: {} with data: {}\", \n                notificationEvent.getEventType(), notificationEvent.getNotificationData());\n        \n        try {\n            switch (notificationEvent.getEventType()) {\n                case \"NOTIFICATION_CREATED\":\n                    handleNotificationCreated(notificationEvent);\n                    break;\n                case \"NOTIFICATION_READ\":\n                    handleNotificationRead(notificationEvent);\n                    break;\n                default:\n                    log.warn(\"Unknown notification event type: {}\", notificationEvent.getEventType());\n            }\n        } catch (Exception e) {\n            log.error(\"Error handling notification event: {}\", e.getMessage(), e);\n        }\n    }\n    \n    private void handleNotificationCreated(NotificationEvent notificationEvent) {\n        log.info(\"Processing notification created event\");\n        \n    }\n    \n    private void handleNotificationRead(NotificationEvent notificationEvent) {\n        log.info(\"Processing notification read event\");\n        \n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.observer.NotificationEventListener.handleNotificationEvent(NotificationEvent notificationEvent)",
        "body": "@EventListener\n    public void handleNotificationEvent(NotificationEvent notificationEvent) {\n        log.info(\"Received notification event: {} with data: {}\", \n                notificationEvent.getEventType(), notificationEvent.getNotificationData());\n        \n        try {\n            switch (notificationEvent.getEventType()) {\n                case \"NOTIFICATION_CREATED\":\n                    handleNotificationCreated(notificationEvent);\n                    break;\n                case \"NOTIFICATION_READ\":\n                    handleNotificationRead(notificationEvent);\n                    break;\n                default:\n                    log.warn(\"Unknown notification event type: {}\", notificationEvent.getEventType());\n            }\n        } catch (Exception e) {\n            log.error(\"Error handling notification event: {}\", e.getMessage(), e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.observer.NotificationEvent.getEventType()",
            "params": []
          },
          {
            "name": "com.example.springdemo.observer.NotificationEvent.getNotificationData()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.observer.NotificationEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "SPRING_EVENT_CONSUMER",
            "path": "",
            "produces": "",
            "consumes": "NotificationEvent"
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.observer.NotificationEventListener.handleNotificationCreated(NotificationEvent notificationEvent)",
        "body": "private void handleNotificationCreated(NotificationEvent notificationEvent) {\n        log.info(\"Processing notification created event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.NotificationEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.NotificationEventListener.handleNotificationRead(NotificationEvent notificationEvent)",
        "body": "private void handleNotificationRead(NotificationEvent notificationEvent) {\n        log.info(\"Processing notification read event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.NotificationEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "OrderEventListener",
    "full_class_name": "com.example.springdemo.observer.OrderEventListener",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\OrderEventListener.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class OrderEventListener {\n    \n    @EventListener\n    public void handleOrderEvent(OrderEvent orderEvent) {\n        log.info(\"Received order event: {} with data: {}\", \n                orderEvent.getEventType(), orderEvent.getOrderData());\n        \n        try {\n            switch (orderEvent.getEventType()) {\n                case \"ORDER_CREATED\":\n                    handleOrderCreated(orderEvent);\n                    break;\n                case \"ORDER_STATUS_CHANGED\":\n                    handleOrderStatusChanged(orderEvent);\n                    break;\n                case \"PAYMENT_PROCESSED\":\n                    handlePaymentProcessed(orderEvent);\n                    break;\n                default:\n                    log.warn(\"Unknown order event type: {}\", orderEvent.getEventType());\n            }\n        } catch (Exception e) {\n            log.error(\"Error handling order event: {}\", e.getMessage(), e);\n        }\n    }\n    \n    private void handleOrderCreated(OrderEvent orderEvent) {\n        log.info(\"Processing order created event\");\n        \n    }\n    \n    private void handleOrderStatusChanged(OrderEvent orderEvent) {\n        log.info(\"Processing order status changed event\");\n        \n    }\n    \n    private void handlePaymentProcessed(OrderEvent orderEvent) {\n        log.info(\"Processing payment processed event\");\n        \n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.observer.OrderEventListener.handleOrderEvent(OrderEvent orderEvent)",
        "body": "@EventListener\n    public void handleOrderEvent(OrderEvent orderEvent) {\n        log.info(\"Received order event: {} with data: {}\", \n                orderEvent.getEventType(), orderEvent.getOrderData());\n        \n        try {\n            switch (orderEvent.getEventType()) {\n                case \"ORDER_CREATED\":\n                    handleOrderCreated(orderEvent);\n                    break;\n                case \"ORDER_STATUS_CHANGED\":\n                    handleOrderStatusChanged(orderEvent);\n                    break;\n                case \"PAYMENT_PROCESSED\":\n                    handlePaymentProcessed(orderEvent);\n                    break;\n                default:\n                    log.warn(\"Unknown order event type: {}\", orderEvent.getEventType());\n            }\n        } catch (Exception e) {\n            log.error(\"Error handling order event: {}\", e.getMessage(), e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.observer.OrderEvent.getEventType()",
            "params": []
          },
          {
            "name": "com.example.springdemo.observer.OrderEvent.getOrderData()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.observer.OrderEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "SPRING_EVENT_CONSUMER",
            "path": "",
            "produces": "",
            "consumes": "OrderEvent"
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.observer.OrderEventListener.handleOrderCreated(OrderEvent orderEvent)",
        "body": "private void handleOrderCreated(OrderEvent orderEvent) {\n        log.info(\"Processing order created event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.OrderEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.OrderEventListener.handleOrderStatusChanged(OrderEvent orderEvent)",
        "body": "private void handleOrderStatusChanged(OrderEvent orderEvent) {\n        log.info(\"Processing order status changed event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.OrderEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.OrderEventListener.handlePaymentProcessed(OrderEvent orderEvent)",
        "body": "private void handlePaymentProcessed(OrderEvent orderEvent) {\n        log.info(\"Processing payment processed event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.OrderEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "EventPublisher",
    "full_class_name": "com.example.springdemo.observer.EventPublisher",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\EventPublisher.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class EventPublisher {\n    \n    private final ApplicationEventPublisher applicationEventPublisher;\n    \n    public void publishEvent(Object event) {\n        log.info(\"Publishing event: {}\", event.getClass().getSimpleName());\n        applicationEventPublisher.publishEvent(event);\n    }\n    \n    public void publishOrderEvent(String eventType, Object orderData) {\n        OrderEvent orderEvent = new OrderEvent(this, eventType, orderData);\n        publishEvent(orderEvent);\n    }\n    \n    public void publishUserEvent(String eventType, Object userData) {\n        UserEvent userEvent = new UserEvent(this, eventType, userData);\n        publishEvent(userEvent);\n    }\n    \n    public void publishNotificationEvent(String eventType, Object notificationData) {\n        NotificationEvent notificationEvent = new NotificationEvent(this, eventType, notificationData);\n        publishEvent(notificationEvent);\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.observer.EventPublisher.publishEvent(Object event)",
        "body": "public void publishEvent(Object event) {\n        log.info(\"Publishing event: {}\", event.getClass().getSimpleName());\n        applicationEventPublisher.publishEvent(event);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.EventPublisher.publishOrderEvent(String eventType, Object orderData)",
        "body": "public void publishOrderEvent(String eventType, Object orderData) {\n        OrderEvent orderEvent = new OrderEvent(this, eventType, orderData);\n        publishEvent(orderEvent);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.OrderEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.EventPublisher.publishUserEvent(String eventType, Object userData)",
        "body": "public void publishUserEvent(String eventType, Object userData) {\n        UserEvent userEvent = new UserEvent(this, eventType, userData);\n        publishEvent(userEvent);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.UserEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.EventPublisher.publishNotificationEvent(String eventType, Object notificationData)",
        "body": "public void publishNotificationEvent(String eventType, Object notificationData) {\n        NotificationEvent notificationEvent = new NotificationEvent(this, eventType, notificationData);\n        publishEvent(notificationEvent);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.NotificationEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.observer",
    "class_name": "UserEventListener",
    "full_class_name": "com.example.springdemo.observer.UserEventListener",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\observer\\UserEventListener.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class UserEventListener {\n    \n    @EventListener\n    public void handleUserEvent(UserEvent userEvent) {\n        log.info(\"Received user event: {} with data: {}\", \n                userEvent.getEventType(), userEvent.getUserData());\n        \n        try {\n            switch (userEvent.getEventType()) {\n                case \"USER_CREATED\":\n                    handleUserCreated(userEvent);\n                    break;\n                case \"USER_STATUS_CHANGED\":\n                    handleUserStatusChanged(userEvent);\n                    break;\n                case \"USER_ROLE_CHANGED\":\n                    handleUserRoleChanged(userEvent);\n                    break;\n                default:\n                    log.warn(\"Unknown user event type: {}\", userEvent.getEventType());\n            }\n        } catch (Exception e) {\n            log.error(\"Error handling user event: {}\", e.getMessage(), e);\n        }\n    }\n    \n    private void handleUserCreated(UserEvent userEvent) {\n        log.info(\"Processing user created event\");\n        \n    }\n    \n    private void handleUserStatusChanged(UserEvent userEvent) {\n        log.info(\"Processing user status changed event\");\n        \n    }\n    \n    private void handleUserRoleChanged(UserEvent userEvent) {\n        log.info(\"Processing user role changed event\");\n        \n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.observer.UserEventListener.handleUserEvent(UserEvent userEvent)",
        "body": "@EventListener\n    public void handleUserEvent(UserEvent userEvent) {\n        log.info(\"Received user event: {} with data: {}\", \n                userEvent.getEventType(), userEvent.getUserData());\n        \n        try {\n            switch (userEvent.getEventType()) {\n                case \"USER_CREATED\":\n                    handleUserCreated(userEvent);\n                    break;\n                case \"USER_STATUS_CHANGED\":\n                    handleUserStatusChanged(userEvent);\n                    break;\n                case \"USER_ROLE_CHANGED\":\n                    handleUserRoleChanged(userEvent);\n                    break;\n                default:\n                    log.warn(\"Unknown user event type: {}\", userEvent.getEventType());\n            }\n        } catch (Exception e) {\n            log.error(\"Error handling user event: {}\", e.getMessage(), e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.observer.UserEvent.getEventType()",
            "params": []
          },
          {
            "name": "com.example.springdemo.observer.UserEvent.getUserData()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.observer.UserEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "SPRING_EVENT_CONSUMER",
            "path": "",
            "produces": "",
            "consumes": "UserEvent"
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.observer.UserEventListener.handleUserCreated(UserEvent userEvent)",
        "body": "private void handleUserCreated(UserEvent userEvent) {\n        log.info(\"Processing user created event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.UserEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.UserEventListener.handleUserStatusChanged(UserEvent userEvent)",
        "body": "private void handleUserStatusChanged(UserEvent userEvent) {\n        log.info(\"Processing user status changed event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.UserEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.observer.UserEventListener.handleUserRoleChanged(UserEvent userEvent)",
        "body": "private void handleUserRoleChanged(UserEvent userEvent) {\n        log.info(\"Processing user role changed event\");\n        \n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.observer.UserEvent"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.event",
    "class_name": "NotificationEventConsumer",
    "full_class_name": "com.example.springdemo.event.NotificationEventConsumer",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\event\\NotificationEventConsumer.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class NotificationEventConsumer {\n    \n    @KafkaListener(topics = \"notification-events\", groupId = \"notification-consumer-group\")\n    public void handleNotificationEvent(@Payload Notification notification, \n                                       @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                                       @Header(KafkaHeaders.RECEIVED_KEY) String key) {\n        \n        log.info(\"Received notification event: {} for notification: {} from topic: {}\", \n                key, notification.getId(), topic);\n        \n        try {\n            switch (key) {\n                case \"NOTIFICATION_CREATED\":\n                    handleNotificationCreated(notification);\n                    break;\n                case \"NOTIFICATION_READ\":\n                    handleNotificationRead(notification);\n                    break;\n                default:\n                    log.warn(\"Unknown notification event type: {}\", key);\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing notification event: {}\", e.getMessage(), e);\n        }\n    }\n    \n    private void handleNotificationCreated(Notification notification) {\n        log.info(\"Processing notification created event for notification: {}\", notification.getId());\n        \n        \n        \n        \n        log.info(\"Notification creation processing completed for: {}\", notification.getId());\n    }\n    \n    private void handleNotificationRead(Notification notification) {\n        log.info(\"Processing notification read event for notification: {}\", notification.getId());\n        \n        \n        \n        \n        log.info(\"Notification read processing completed for: {}\", notification.getId());\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.event.NotificationEventConsumer.handleNotificationEvent(@Payload Notification notification, \n                                       @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                                       @Header(KafkaHeaders.RECEIVED_KEY) String key)",
        "body": "@KafkaListener(topics = \"notification-events\", groupId = \"notification-consumer-group\")\n    public void handleNotificationEvent(@Payload Notification notification, \n                                       @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                                       @Header(KafkaHeaders.RECEIVED_KEY) String key) {\n        \n        log.info(\"Received notification event: {} for notification: {} from topic: {}\", \n                key, notification.getId(), topic);\n        \n        try {\n            switch (key) {\n                case \"NOTIFICATION_CREATED\":\n                    handleNotificationCreated(notification);\n                    break;\n                case \"NOTIFICATION_READ\":\n                    handleNotificationRead(notification);\n                    break;\n                default:\n                    log.warn(\"Unknown notification event type: {}\", key);\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing notification event: {}\", e.getMessage(), e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Notification.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [
          "String RECEIVED_KEY = \"kafka_receivedMessageKey\"",
          "String RECEIVED_TOPIC = \"kafka_receivedTopic\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "KAFKA_CONSUMER",
            "path": "",
            "produces": "",
            "consumes": "notification-events"
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.event.NotificationEventConsumer.handleNotificationCreated(Notification notification)",
        "body": "private void handleNotificationCreated(Notification notification) {\n        log.info(\"Processing notification created event for notification: {}\", notification.getId());\n        \n        \n        \n        \n        log.info(\"Notification creation processing completed for: {}\", notification.getId());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Notification.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.event.NotificationEventConsumer.handleNotificationRead(Notification notification)",
        "body": "private void handleNotificationRead(Notification notification) {\n        log.info(\"Processing notification read event for notification: {}\", notification.getId());\n        \n        \n        \n        \n        log.info(\"Notification read processing completed for: {}\", notification.getId());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Notification.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.event",
    "class_name": "UserEventConsumer",
    "full_class_name": "com.example.springdemo.event.UserEventConsumer",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\event\\UserEventConsumer.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class UserEventConsumer {\n    \n    @KafkaListener(topics = \"user-events\", groupId = \"user-consumer-group\")\n    public void handleUserEvent(@Payload User user, \n                               @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                               @Header(KafkaHeaders.RECEIVED_KEY) String key) {\n        \n        log.info(\"Received user event: {} for user: {} from topic: {}\", \n                key, user.getUsername(), topic);\n        \n        try {\n            switch (key) {\n                case \"USER_CREATED\":\n                    handleUserCreated(user);\n                    break;\n                case \"USER_STATUS_CHANGED\":\n                    handleUserStatusChanged(user);\n                    break;\n                case \"USER_ROLE_CHANGED\":\n                    handleUserRoleChanged(user);\n                    break;\n                default:\n                    log.warn(\"Unknown user event type: {}\", key);\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing user event: {}\", e.getMessage(), e);\n        }\n    }\n    \n    private void handleUserCreated(User user) {\n        log.info(\"Processing user created event for user: {}\", user.getUsername());\n        \n        \n        \n        \n        log.info(\"User creation processing completed for: {}\", user.getUsername());\n    }\n    \n    private void handleUserStatusChanged(User user) {\n        log.info(\"Processing user status changed event for user: {}\", user.getUsername());\n        \n        \n        \n        \n        log.info(\"User status change processing completed for: {}\", user.getUsername());\n    }\n    \n    private void handleUserRoleChanged(User user) {\n        log.info(\"Processing user role changed event for user: {}\", user.getUsername());\n        \n        \n        \n        \n        log.info(\"User role change processing completed for: {}\", user.getUsername());\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.event.UserEventConsumer.handleUserEvent(@Payload User user, \n                               @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                               @Header(KafkaHeaders.RECEIVED_KEY) String key)",
        "body": "@KafkaListener(topics = \"user-events\", groupId = \"user-consumer-group\")\n    public void handleUserEvent(@Payload User user, \n                               @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                               @Header(KafkaHeaders.RECEIVED_KEY) String key) {\n        \n        log.info(\"Received user event: {} for user: {} from topic: {}\", \n                key, user.getUsername(), topic);\n        \n        try {\n            switch (key) {\n                case \"USER_CREATED\":\n                    handleUserCreated(user);\n                    break;\n                case \"USER_STATUS_CHANGED\":\n                    handleUserStatusChanged(user);\n                    break;\n                case \"USER_ROLE_CHANGED\":\n                    handleUserRoleChanged(user);\n                    break;\n                default:\n                    log.warn(\"Unknown user event type: {}\", key);\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing user event: {}\", e.getMessage(), e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getUsername()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "String RECEIVED_KEY = \"kafka_receivedMessageKey\"",
          "String RECEIVED_TOPIC = \"kafka_receivedTopic\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "KAFKA_CONSUMER",
            "path": "",
            "produces": "",
            "consumes": "user-events"
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.event.UserEventConsumer.handleUserCreated(User user)",
        "body": "private void handleUserCreated(User user) {\n        log.info(\"Processing user created event for user: {}\", user.getUsername());\n        \n        \n        \n        \n        log.info(\"User creation processing completed for: {}\", user.getUsername());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getUsername()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.event.UserEventConsumer.handleUserStatusChanged(User user)",
        "body": "private void handleUserStatusChanged(User user) {\n        log.info(\"Processing user status changed event for user: {}\", user.getUsername());\n        \n        \n        \n        \n        log.info(\"User status change processing completed for: {}\", user.getUsername());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getUsername()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.event.UserEventConsumer.handleUserRoleChanged(User user)",
        "body": "private void handleUserRoleChanged(User user) {\n        log.info(\"Processing user role changed event for user: {}\", user.getUsername());\n        \n        \n        \n        \n        log.info(\"User role change processing completed for: {}\", user.getUsername());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getUsername()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.repository",
    "class_name": "NotificationRepository",
    "full_class_name": "com.example.springdemo.repository.NotificationRepository",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\repository\\NotificationRepository.java",
    "content": "@Repository\npublic interface NotificationRepository extends JpaRepository<Notification, Long> {\n    \n    List<Notification> findByUserId(Long userId);\n    \n    List<Notification> findByType(Notification.NotificationType type);\n    \n    List<Notification> findByStatus(Notification.NotificationStatus status);\n    \n    @Query(\"SELECT n FROM Notification n WHERE n.user.id = :userId AND n.status = :status\")\n    List<Notification> findByUserIdAndStatus(@Param(\"userId\") Long userId, \n                                             @Param(\"status\") Notification.NotificationStatus status);\n    \n    @Query(\"SELECT n FROM Notification n WHERE n.createdAt >= :since\")\n    List<Notification> findNotificationsSince(@Param(\"since\") LocalDateTime since);\n    \n    @Query(\"SELECT COUNT(n) FROM Notification n WHERE n.user.id = :userId AND n.status = 'UNREAD'\")\n    Long countUnreadNotificationsByUserId(@Param(\"userId\") Long userId);\n    \n    @Query(\"SELECT n.type, COUNT(n) FROM Notification n GROUP BY n.type\")\n    List<Object[]> countNotificationsByType();\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.repository.NotificationRepository.findByUserId(Long userId)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.NotificationRepository.findByType(Notification.NotificationType type)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification.NotificationType",
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.NotificationRepository.findByStatus(Notification.NotificationStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification.NotificationStatus",
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.NotificationRepository.findByUserIdAndStatus(@Param(\"userId\") Long userId, \n                                             @Param(\"status\") Notification.NotificationStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification.NotificationStatus",
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.NotificationRepository.findNotificationsSince(@Param(\"since\") LocalDateTime since)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.NotificationRepository.countUnreadNotificationsByUserId(@Param(\"userId\") Long userId)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.NotificationRepository.countNotificationsByType()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service.strategy",
    "class_name": "PricingStrategy",
    "full_class_name": "com.example.springdemo.service.strategy.PricingStrategy",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\strategy\\PricingStrategy.java",
    "content": "public interface PricingStrategy {\n    \n    BigDecimal calculatePrice(Order order, User user);\n    \n    String getStrategyName();\n    \n    boolean isApplicable(User user, Order order);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.strategy.PricingStrategy.calculatePrice(Order order, User user)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.PricingStrategy.getStrategyName()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.PricingStrategy.isApplicable(User user, Order order)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.repository",
    "class_name": "ProductRepository",
    "full_class_name": "com.example.springdemo.repository.ProductRepository",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\repository\\ProductRepository.java",
    "content": "@Repository\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n    \n    List<Product> findByCategory(Product.ProductCategory category);\n    \n    List<Product> findByStatus(Product.ProductStatus status);\n    \n    List<Product> findByPriceBetween(BigDecimal minPrice, BigDecimal maxPrice);\n    \n    @Query(\"SELECT p FROM Product p WHERE p.stockQuantity > 0\")\n    List<Product> findAvailableProducts();\n    \n    @Query(\"SELECT p FROM Product p WHERE p.stockQuantity <= :threshold\")\n    List<Product> findLowStockProducts(@Param(\"threshold\") Integer threshold);\n    \n    @Query(\"SELECT p FROM Product p WHERE p.name LIKE %:keyword% OR p.description LIKE %:keyword%\")\n    List<Product> searchProducts(@Param(\"keyword\") String keyword);\n    \n    @Query(\"SELECT p FROM Product p JOIN p.orderItems oi WHERE oi.order.id = :orderId\")\n    List<Product> findProductsByOrderId(@Param(\"orderId\") Long orderId);\n    \n    @Query(\"SELECT p.category, COUNT(p) FROM Product p GROUP BY p.category\")\n    List<Object[]> countProductsByCategory();\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.repository.ProductRepository.findByCategory(Product.ProductCategory category)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product.ProductCategory",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.findByStatus(Product.ProductStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product.ProductStatus",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.findByPriceBetween(BigDecimal minPrice, BigDecimal maxPrice)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.findAvailableProducts()",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.findLowStockProducts(@Param(\"threshold\") Integer threshold)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.searchProducts(@Param(\"keyword\") String keyword)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.findProductsByOrderId(@Param(\"orderId\") Long orderId)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.ProductRepository.countProductsByCategory()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service.strategy",
    "class_name": "BulkPricingStrategy",
    "full_class_name": "com.example.springdemo.service.strategy.BulkPricingStrategy",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\strategy\\BulkPricingStrategy.java",
    "content": "@Component\npublic class BulkPricingStrategy implements PricingStrategy {\n    \n    private static final BigDecimal BULK_DISCOUNT = new BigDecimal(\"0.10\"); \n    private static final BigDecimal BULK_THRESHOLD = new BigDecimal(\"1000.00\");\n    \n    @Override\n    public BigDecimal calculatePrice(Order order, User user) {\n        BigDecimal originalAmount = order.getTotalAmount();\n        \n        if (originalAmount.compareTo(BULK_THRESHOLD) >= 0) {\n            BigDecimal discount = originalAmount.multiply(BULK_DISCOUNT);\n            return originalAmount.subtract(discount);\n        }\n        \n        return originalAmount;\n    }\n    \n    @Override\n    public String getStrategyName() {\n        return \"BULK\";\n    }\n    \n    @Override\n    public boolean isApplicable(User user, Order order) {\n        return order.getTotalAmount().compareTo(BULK_THRESHOLD) >= 0;\n    }\n}",
    "implements": [
      "com.example.springdemo.service.strategy.PricingStrategy"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.strategy.BulkPricingStrategy.calculatePrice(Order order, User user)",
        "body": "@Override\n    public BigDecimal calculatePrice(Order order, User user) {\n        BigDecimal originalAmount = order.getTotalAmount();\n        \n        if (originalAmount.compareTo(BULK_THRESHOLD) >= 0) {\n            BigDecimal discount = originalAmount.multiply(BULK_DISCOUNT);\n            return originalAmount.subtract(discount);\n        }\n        \n        return originalAmount;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getTotalAmount()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.calculatePrice(Order order, User user)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.BulkPricingStrategy.getStrategyName()",
        "body": "@Override\n    public String getStrategyName() {\n        return \"BULK\";\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.getStrategyName()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.BulkPricingStrategy.isApplicable(User user, Order order)",
        "body": "@Override\n    public boolean isApplicable(User user, Order order) {\n        return order.getTotalAmount().compareTo(BULK_THRESHOLD) >= 0;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getTotalAmount()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.isApplicable(User user, Order order)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.repository",
    "class_name": "UserRepository",
    "full_class_name": "com.example.springdemo.repository.UserRepository",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\repository\\UserRepository.java",
    "content": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    \n    Optional<User> findByUsername(String username);\n    \n    Optional<User> findByEmail(String email);\n    \n    List<User> findByRole(User.UserRole role);\n    \n    List<User> findByStatus(User.UserStatus status);\n    \n    @Query(\"SELECT u FROM User u WHERE u.role = :role AND u.status = :status\")\n    List<User> findByRoleAndStatus(@Param(\"role\") User.UserRole role, \n                                   @Param(\"status\") User.UserStatus status);\n    \n    @Query(\"SELECT u FROM User u JOIN u.orders o WHERE o.status = :orderStatus\")\n    List<User> findUsersWithOrderStatus(@Param(\"orderStatus\") User.UserStatus orderStatus);\n    \n    @Query(\"SELECT COUNT(u) FROM User u WHERE u.role = :role\")\n    Long countByRole(@Param(\"role\") User.UserRole role);\n    \n    boolean existsByUsername(String username);\n    \n    boolean existsByEmail(String email);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.repository.UserRepository.findByUsername(String username)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.findByEmail(String email)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.findByRole(User.UserRole role)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.findByStatus(User.UserStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserStatus",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.findByRoleAndStatus(@Param(\"role\") User.UserRole role, \n                                   @Param(\"status\") User.UserStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole",
          "com.example.springdemo.entity.User.UserStatus",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.findUsersWithOrderStatus(@Param(\"orderStatus\") User.UserStatus orderStatus)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserStatus",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.countByRole(@Param(\"role\") User.UserRole role)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.existsByUsername(String username)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.UserRepository.existsByEmail(String email)",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service.strategy",
    "class_name": "StandardPricingStrategy",
    "full_class_name": "com.example.springdemo.service.strategy.StandardPricingStrategy",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\strategy\\StandardPricingStrategy.java",
    "content": "@Component\npublic class StandardPricingStrategy implements PricingStrategy {\n    \n    @Override\n    public BigDecimal calculatePrice(Order order, User user) {\n        return order.getTotalAmount();\n    }\n    \n    @Override\n    public String getStrategyName() {\n        return \"STANDARD\";\n    }\n    \n    @Override\n    public boolean isApplicable(User user, Order order) {\n        return user.getRole() == User.UserRole.CUSTOMER || user.getRole() == User.UserRole.GUEST;\n    }\n}",
    "implements": [
      "com.example.springdemo.service.strategy.PricingStrategy"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.strategy.StandardPricingStrategy.calculatePrice(Order order, User user)",
        "body": "@Override\n    public BigDecimal calculatePrice(Order order, User user) {\n        return order.getTotalAmount();\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getTotalAmount()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.calculatePrice(Order order, User user)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.StandardPricingStrategy.getStrategyName()",
        "body": "@Override\n    public String getStrategyName() {\n        return \"STANDARD\";\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.getStrategyName()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.StandardPricingStrategy.isApplicable(User user, Order order)",
        "body": "@Override\n    public boolean isApplicable(User user, Order order) {\n        return user.getRole() == User.UserRole.CUSTOMER || user.getRole() == User.UserRole.GUEST;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getRole()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserRole",
          "CUSTOMER",
          "GUEST"
        ],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.isApplicable(User user, Order order)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.event",
    "class_name": "OrderEventConsumer",
    "full_class_name": "com.example.springdemo.event.OrderEventConsumer",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\event\\OrderEventConsumer.java",
    "content": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class OrderEventConsumer {\n    \n    private final NotificationService notificationService;\n    \n    @KafkaListener(topics = \"order-events\", groupId = \"order-consumer-group\")\n    public void handleOrderEvent(@Payload Order order, \n                                @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                                @Header(KafkaHeaders.RECEIVED_KEY) String key) {\n        \n        log.info(\"Received order event: {} for order: {} from topic: {}\", \n                key, order.getOrderNumber(), topic);\n        \n        try {\n            switch (key) {\n                case \"ORDER_CREATED\":\n                    handleOrderCreated(order);\n                    break;\n                case \"ORDER_STATUS_CHANGED\":\n                    handleOrderStatusChanged(order);\n                    break;\n                case \"PAYMENT_PROCESSED\":\n                    handlePaymentProcessed(order);\n                    break;\n                default:\n                    log.warn(\"Unknown order event type: {}\", key);\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing order event: {}\", e.getMessage(), e);\n        }\n    }\n    \n    private void handleOrderCreated(Order order) {\n        log.info(\"Processing order created event for order: {}\", order.getOrderNumber());\n        \n        \n        notificationService.sendOrderNotification(\n                order.getUser(), \n                order, \n                String.format(\"Your order %s has been created successfully\", order.getOrderNumber())\n        );\n        \n        \n        log.info(\"Order creation processing completed for: {}\", order.getOrderNumber());\n    }\n    \n    private void handleOrderStatusChanged(Order order) {\n        log.info(\"Processing order status changed event for order: {}\", order.getOrderNumber());\n        \n        \n        notificationService.sendOrderNotification(\n                order.getUser(), \n                order, \n                String.format(\"Your order %s status has been updated to %s\", \n                        order.getOrderNumber(), order.getStatus())\n        );\n        \n        \n        log.info(\"Order status change processing completed for: {}\", order.getOrderNumber());\n    }\n    \n    private void handlePaymentProcessed(Order order) {\n        log.info(\"Processing payment processed event for order: {}\", order.getOrderNumber());\n        \n        \n        notificationService.sendPaymentNotification(\n                order.getUser(), \n                order, \n                String.format(\"Payment for order %s has been %s\", \n                        order.getOrderNumber(), order.getPaymentStatus())\n        );\n        \n        \n        log.info(\"Payment processing completed for: {}\", order.getOrderNumber());\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.event.OrderEventConsumer.handleOrderEvent(@Payload Order order, \n                                @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                                @Header(KafkaHeaders.RECEIVED_KEY) String key)",
        "body": "@KafkaListener(topics = \"order-events\", groupId = \"order-consumer-group\")\n    public void handleOrderEvent(@Payload Order order, \n                                @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,\n                                @Header(KafkaHeaders.RECEIVED_KEY) String key) {\n        \n        log.info(\"Received order event: {} for order: {} from topic: {}\", \n                key, order.getOrderNumber(), topic);\n        \n        try {\n            switch (key) {\n                case \"ORDER_CREATED\":\n                    handleOrderCreated(order);\n                    break;\n                case \"ORDER_STATUS_CHANGED\":\n                    handleOrderStatusChanged(order);\n                    break;\n                case \"PAYMENT_PROCESSED\":\n                    handlePaymentProcessed(order);\n                    break;\n                default:\n                    log.warn(\"Unknown order event type: {}\", key);\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing order event: {}\", e.getMessage(), e);\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "String RECEIVED_KEY = \"kafka_receivedMessageKey\"",
          "String RECEIVED_TOPIC = \"kafka_receivedTopic\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "KAFKA_CONSUMER",
            "path": "",
            "produces": "",
            "consumes": "order-events"
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.event.OrderEventConsumer.handleOrderCreated(Order order)",
        "body": "private void handleOrderCreated(Order order) {\n        log.info(\"Processing order created event for order: {}\", order.getOrderNumber());\n        \n        \n        notificationService.sendOrderNotification(\n                order.getUser(), \n                order, \n                String.format(\"Your order %s has been created successfully\", order.getOrderNumber())\n        );\n        \n        \n        log.info(\"Order creation processing completed for: {}\", order.getOrderNumber());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.NotificationService.sendOrderNotification(User user, Order order, String message)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getUser()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.event.OrderEventConsumer.handleOrderStatusChanged(Order order)",
        "body": "private void handleOrderStatusChanged(Order order) {\n        log.info(\"Processing order status changed event for order: {}\", order.getOrderNumber());\n        \n        \n        notificationService.sendOrderNotification(\n                order.getUser(), \n                order, \n                String.format(\"Your order %s status has been updated to %s\", \n                        order.getOrderNumber(), order.getStatus())\n        );\n        \n        \n        log.info(\"Order status change processing completed for: {}\", order.getOrderNumber());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.NotificationService.sendOrderNotification(User user, Order order, String message)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getUser()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getStatus()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.event.OrderEventConsumer.handlePaymentProcessed(Order order)",
        "body": "private void handlePaymentProcessed(Order order) {\n        log.info(\"Processing payment processed event for order: {}\", order.getOrderNumber());\n        \n        \n        notificationService.sendPaymentNotification(\n                order.getUser(), \n                order, \n                String.format(\"Payment for order %s has been %s\", \n                        order.getOrderNumber(), order.getPaymentStatus())\n        );\n        \n        \n        log.info(\"Payment processing completed for: {}\", order.getOrderNumber());\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getUser()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getPaymentStatus()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.repository",
    "class_name": "OrderRepository",
    "full_class_name": "com.example.springdemo.repository.OrderRepository",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\repository\\OrderRepository.java",
    "content": "@Repository\npublic interface OrderRepository extends JpaRepository<Order, Long> {\n    \n    Optional<Order> findByOrderNumber(String orderNumber);\n    \n    List<Order> findByUserId(Long userId);\n    \n    List<Order> findByStatus(Order.OrderStatus status);\n    \n    List<Order> findByPaymentStatus(Order.PaymentStatus paymentStatus);\n    \n    @Query(\"SELECT o FROM Order o WHERE o.user.id = :userId AND o.status = :status\")\n    List<Order> findByUserIdAndStatus(@Param(\"userId\") Long userId, \n                                      @Param(\"status\") Order.OrderStatus status);\n    \n    @Query(\"SELECT o FROM Order o WHERE o.totalAmount >= :minAmount\")\n    List<Order> findOrdersAboveAmount(@Param(\"minAmount\") BigDecimal minAmount);\n    \n    @Query(\"SELECT o FROM Order o WHERE o.createdAt BETWEEN :startDate AND :endDate\")\n    List<Order> findOrdersBetweenDates(@Param(\"startDate\") LocalDateTime startDate, \n                                       @Param(\"endDate\") LocalDateTime endDate);\n    \n    @Query(\"SELECT o FROM Order o JOIN o.orderItems oi WHERE oi.product.id = :productId\")\n    List<Order> findOrdersByProductId(@Param(\"productId\") Long productId);\n    \n    @Query(\"SELECT o.status, COUNT(o) FROM Order o GROUP BY o.status\")\n    List<Object[]> countOrdersByStatus();\n    \n    @Query(\"SELECT SUM(o.totalAmount) FROM Order o WHERE o.status = :status\")\n    BigDecimal getTotalRevenueByStatus(@Param(\"status\") Order.OrderStatus status);\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.repository.OrderRepository.findByOrderNumber(String orderNumber)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findByUserId(Long userId)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findByStatus(Order.OrderStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findByPaymentStatus(Order.PaymentStatus paymentStatus)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order.PaymentStatus",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findByUserIdAndStatus(@Param(\"userId\") Long userId, \n                                      @Param(\"status\") Order.OrderStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findOrdersAboveAmount(@Param(\"minAmount\") BigDecimal minAmount)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findOrdersBetweenDates(@Param(\"startDate\") LocalDateTime startDate, \n                                       @Param(\"endDate\") LocalDateTime endDate)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.findOrdersByProductId(@Param(\"productId\") Long productId)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.countOrdersByStatus()",
        "body": "",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.repository.OrderRepository.getTotalRevenueByStatus(@Param(\"status\") Order.OrderStatus status)",
        "body": "",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service.factory",
    "class_name": "ServiceFactory",
    "full_class_name": "com.example.springdemo.service.factory.ServiceFactory",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\factory\\ServiceFactory.java",
    "content": "@Component\npublic class ServiceFactory {\n    \n    private final List<PricingStrategy> pricingStrategies;\n    \n    @Autowired\n    public ServiceFactory(List<PricingStrategy> pricingStrategies) {\n        this.pricingStrategies = pricingStrategies;\n    }\n    \n    public PricingStrategy getPricingStrategy(User user, com.example.springdemo.entity.Order order) {\n        return pricingStrategies.stream()\n                .filter(strategy -> strategy.isApplicable(user, order))\n                .findFirst()\n                .orElse(pricingStrategies.get(0)); \n    }\n    \n    public User.UserRole getUserRole(String roleString) {\n        try {\n            return User.UserRole.valueOf(roleString.toUpperCase());\n        } catch (IllegalArgumentException e) {\n            return User.UserRole.GUEST;\n        }\n    }\n    \n    public String generateOrderNumber() {\n        return \"ORD-\" + System.currentTimeMillis() + \"-\" + (int)(Math.random() * 1000);\n    }\n    \n    public String generateNotificationId() {\n        return \"NOTIF-\" + System.currentTimeMillis();\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.factory.ServiceFactory.ServiceFactory(List<PricingStrategy> pricingStrategies)",
        "body": "@Autowired\n    public ServiceFactory(List<PricingStrategy> pricingStrategies) {\n        this.pricingStrategies = pricingStrategies;\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.service.strategy.PricingStrategy"
        ],
        "field_access": [
          "List<PricingStrategy> pricingStrategies"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.factory.ServiceFactory.getPricingStrategy(User user, com.example.springdemo.entity.Order order)",
        "body": "public PricingStrategy getPricingStrategy(User user, com.example.springdemo.entity.Order order) {\n        return pricingStrategies.stream()\n                .filter(strategy -> strategy.isApplicable(user, order))\n                .findFirst()\n                .orElse(pricingStrategies.get(0)); \n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.service.strategy.PricingStrategy.isApplicable(User user, Order order)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.service.strategy.PricingStrategy",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.factory.ServiceFactory.getUserRole(String roleString)",
        "body": "public User.UserRole getUserRole(String roleString) {\n        try {\n            return User.UserRole.valueOf(roleString.toUpperCase());\n        } catch (IllegalArgumentException e) {\n            return User.UserRole.GUEST;\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserRole",
          "GUEST"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.factory.ServiceFactory.generateOrderNumber()",
        "body": "public String generateOrderNumber() {\n        return \"ORD-\" + System.currentTimeMillis() + \"-\" + (int)(Math.random() * 1000);\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.factory.ServiceFactory.generateNotificationId()",
        "body": "public String generateNotificationId() {\n        return \"NOTIF-\" + System.currentTimeMillis();\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.config",
    "class_name": "KafkaConfig",
    "full_class_name": "com.example.springdemo.config.KafkaConfig",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\config\\KafkaConfig.java",
    "content": "@Configuration\n@EnableKafka\npublic class KafkaConfig {\n    \n    @Value(\"${spring.kafka.bootstrap-servers:localhost:9092}\")\n    private String bootstrapServers;\n    \n    @Value(\"${spring.kafka.consumer.group-id:spring-demo-group}\")\n    private String groupId;\n    \n    @Bean\n    public ProducerFactory<String, Object> producerFactory() {\n        Map<String, Object> configProps = new java.util.HashMap<>();\n        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        configProps.put(ProducerConfig.ACKS_CONFIG, \"all\");\n        configProps.put(ProducerConfig.RETRIES_CONFIG, 3);\n        configProps.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);\n        \n        return new DefaultKafkaProducerFactory<>(configProps);\n    }\n    \n    @Bean\n    public KafkaTemplate<String, Object> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n    \n    @Bean\n    public ConsumerFactory<String, Object> consumerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n        props.put(JsonDeserializer.TRUSTED_PACKAGES, \"*\");\n        \n        return new DefaultKafkaConsumerFactory<>(props);\n    }\n    \n    @Bean\n    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<String, Object> factory = \n                new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        return factory;\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.config.KafkaConfig.producerFactory()",
        "body": "@Bean\n    public ProducerFactory<String, Object> producerFactory() {\n        Map<String, Object> configProps = new java.util.HashMap<>();\n        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        configProps.put(ProducerConfig.ACKS_CONFIG, \"all\");\n        configProps.put(ProducerConfig.RETRIES_CONFIG, 3);\n        configProps.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);\n        \n        return new DefaultKafkaProducerFactory<>(configProps);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-kafka-3.1.0.jar\\org.springframework.kafka.core\\ProducerFactory.class.ProducerFactory<String, Object>"
        ],
        "field_access": [
          "String ENABLE_IDEMPOTENCE_CONFIG = \"enable.idempotence\"",
          "String KEY_SERIALIZER_CLASS_CONFIG = \"key.serializer\"",
          "String ACKS_CONFIG = \"acks\"",
          "String RETRIES_CONFIG = \"retries\"",
          "String BOOTSTRAP_SERVERS_CONFIG = \"bootstrap.servers\"",
          "String VALUE_SERIALIZER_CLASS_CONFIG = \"value.serializer\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "configuration"
      },
      {
        "name": "com.example.springdemo.config.KafkaConfig.kafkaTemplate()",
        "body": "@Bean\n    public KafkaTemplate<String, Object> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-kafka-3.1.0.jar\\org.springframework.kafka.core\\KafkaTemplate.class.KafkaTemplate<String, Object>"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "configuration"
      },
      {
        "name": "com.example.springdemo.config.KafkaConfig.consumerFactory()",
        "body": "@Bean\n    public ConsumerFactory<String, Object> consumerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n        props.put(JsonDeserializer.TRUSTED_PACKAGES, \"*\");\n        \n        return new DefaultKafkaConsumerFactory<>(props);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-kafka-3.1.0.jar\\org.springframework.kafka.core\\ConsumerFactory.class.ConsumerFactory<String, Object>"
        ],
        "field_access": [
          "String VALUE_DESERIALIZER_CLASS_CONFIG = \"value.deserializer\"",
          "String ENABLE_AUTO_COMMIT_CONFIG = \"enable.auto.commit\"",
          "String AUTO_OFFSET_RESET_CONFIG = \"auto.offset.reset\"",
          "String GROUP_ID_CONFIG = \"group.id\"",
          "String BOOTSTRAP_SERVERS_CONFIG = \"bootstrap.servers\"",
          "String TRUSTED_PACKAGES = \"spring.json.trusted.packages\"",
          "String KEY_DESERIALIZER_CLASS_CONFIG = \"key.deserializer\""
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "configuration"
      },
      {
        "name": "com.example.springdemo.config.KafkaConfig.kafkaListenerContainerFactory()",
        "body": "@Bean\n    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<String, Object> factory = \n                new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.setConcurrency(3);\n        return factory;\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-kafka-3.1.0.jar\\org.springframework.kafka.config\\ConcurrentKafkaListenerContainerFactory.class.ConcurrentKafkaListenerContainerFactory<String, Object>"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "configuration"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "configuration"
  },
  {
    "package": "com.example.springdemo.service.strategy",
    "class_name": "VIPPricingStrategy",
    "full_class_name": "com.example.springdemo.service.strategy.VIPPricingStrategy",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\strategy\\VIPPricingStrategy.java",
    "content": "@Component\npublic class VIPPricingStrategy implements PricingStrategy {\n    \n    private static final BigDecimal VIP_DISCOUNT = new BigDecimal(\"0.15\"); \n    \n    @Override\n    public BigDecimal calculatePrice(Order order, User user) {\n        BigDecimal originalAmount = order.getTotalAmount();\n        BigDecimal discount = originalAmount.multiply(VIP_DISCOUNT);\n        return originalAmount.subtract(discount);\n    }\n    \n    @Override\n    public String getStrategyName() {\n        return \"VIP\";\n    }\n    \n    @Override\n    public boolean isApplicable(User user, Order order) {\n        return user.getRole() == User.UserRole.ADMIN || user.getRole() == User.UserRole.MANAGER;\n    }\n}",
    "implements": [
      "com.example.springdemo.service.strategy.PricingStrategy"
    ],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.strategy.VIPPricingStrategy.calculatePrice(Order order, User user)",
        "body": "@Override\n    public BigDecimal calculatePrice(Order order, User user) {\n        BigDecimal originalAmount = order.getTotalAmount();\n        BigDecimal discount = originalAmount.multiply(VIP_DISCOUNT);\n        return originalAmount.subtract(discount);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getTotalAmount()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.calculatePrice(Order order, User user)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.VIPPricingStrategy.getStrategyName()",
        "body": "@Override\n    public String getStrategyName() {\n        return \"VIP\";\n    }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.getStrategyName()"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.strategy.VIPPricingStrategy.isApplicable(User user, Order order)",
        "body": "@Override\n    public boolean isApplicable(User user, Order order) {\n        return user.getRole() == User.UserRole.ADMIN || user.getRole() == User.UserRole.MANAGER;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getRole()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "MANAGER",
          "com.example.springdemo.entity.User.UserRole",
          "ADMIN"
        ],
        "inheritance_info": [
          "com.example.springdemo.service.strategy.PricingStrategy.isApplicable(User user, Order order)"
        ],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "NotificationController",
    "full_class_name": "com.example.springdemo.controller.NotificationController",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\NotificationController.java",
    "content": "@RestController\n@RequestMapping(\"/api/notifications\")\n@RequiredArgsConstructor\n@Slf4j\npublic class NotificationController {\n    \n    private final NotificationService notificationService;\n\n    private final String test = \"ABC\";\n    \n    @PostMapping\n    public ResponseEntity<Notification> createNotification(@RequestBody CreateNotificationRequest request) {\n        log.info(\"Creating notification for user: {}\", request.getUserId());\n        \n        try {\n            \n            \n            com.example.springdemo.entity.User user = new com.example.springdemo.entity.User();\n            user.setId(request.getUserId());\n\n            var name = new User();\n            Notification notification = notificationService.createNotification(\n                    user,\n                    request.getTitle(),\n                    request.getMessage(),\n                    Notification.NotificationType.valueOf(request.getType()),\n                    request.getMetadata()\n            );\n            notification.setTitle(request.getTitle());\n            return ResponseEntity.ok(notification);\n        } catch (Exception e) {\n            log.error(\"Error creating notification: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @PutMapping(\"/{notificationId}/read\")\n    public ResponseEntity<Notification> markAsRead(@PathVariable Long notificationId) {\n        log.info(\"Marking notification as read: {}\", notificationId);\n        \n        try {\n            Notification notification = notificationService.markAsRead(notificationId);\n            return ResponseEntity.ok(notification);\n        } catch (Exception e) {\n            log.error(\"Error marking notification as read: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/user/{userId}\")\n    public ResponseEntity<List<Notification>> getNotificationsByUser(@PathVariable Long userId) {\n        log.info(\"Getting notifications for user: {}\", userId);\n        \n        List<Notification> notifications = notificationService.getNotificationsByUser(userId);\n        return ResponseEntity.ok(notifications);\n    }\n    \n    @GetMapping(\"/user/{userId}/unread\")\n    public ResponseEntity<List<Notification>> getUnreadNotificationsByUser(@PathVariable Long userId) {\n        log.info(\"Getting unread notifications for user: {}\", userId);\n        \n        List<Notification> notifications = notificationService.getUnreadNotificationsByUser(userId);\n        return ResponseEntity.ok(notifications);\n    }\n    \n    @GetMapping(\"/user/{userId}/unread-count\")\n    public ResponseEntity<Long> getUnreadNotificationCount(@PathVariable Long userId) {\n        log.info(\"Getting unread notification count for user: {}\", userId);\n        \n        Long count = notificationService.getUnreadNotificationCount(userId);\n        return ResponseEntity.ok(count);\n    }\n    \n    \n    public static class CreateNotificationRequest {\n        private Long userId;\n        private String title;\n        private String message;\n        private String type;\n        private String metadata;\n        \n        \n        public Long getUserId() { return userId; }\n        public void setUserId(Long userId) { this.userId = userId; }\n        \n        public String getTitle() { return title; }\n        public void setTitle(String title) { this.title = title; }\n        \n        public String getMessage() { return message; }\n        public void setMessage(String message) { this.message = message; }\n        \n        public String getType() { return type; }\n        public void setType(String type) { this.type = type; }\n        \n        public String getMetadata() { return metadata; }\n        public void setMetadata(String metadata) { this.metadata = metadata; }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.NotificationController.createNotification(@RequestBody CreateNotificationRequest request)",
        "body": "@PostMapping\n    public ResponseEntity<Notification> createNotification(@RequestBody CreateNotificationRequest request) {\n        log.info(\"Creating notification for user: {}\", request.getUserId());\n        \n        try {\n            \n            \n            com.example.springdemo.entity.User user = new com.example.springdemo.entity.User();\n            user.setId(request.getUserId());\n\n            var name = new User();\n            Notification notification = notificationService.createNotification(\n                    user,\n                    request.getTitle(),\n                    request.getMessage(),\n                    Notification.NotificationType.valueOf(request.getType()),\n                    request.getMetadata()\n            );\n            notification.setTitle(request.getTitle());\n            return ResponseEntity.ok(notification);\n        } catch (Exception e) {\n            log.error(\"Error creating notification: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getUserId()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.User.setId(Long id)",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.NotificationService.createNotification(User user, String title, String message, NotificationType type, String metadata)",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getTitle()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getMessage()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getType()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getMetadata()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Notification.setTitle(String title)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Notification>",
          "com.example.springdemo.controller.NotificationController.CreateNotificationRequest",
          "com.example.springdemo.entity.User",
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [
          "com.example.springdemo.entity.Notification.NotificationType"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/notifications",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.markAsRead(@PathVariable Long notificationId)",
        "body": "@PutMapping(\"/{notificationId}/read\")\n    public ResponseEntity<Notification> markAsRead(@PathVariable Long notificationId) {\n        log.info(\"Marking notification as read: {}\", notificationId);\n        \n        try {\n            Notification notification = notificationService.markAsRead(notificationId);\n            return ResponseEntity.ok(notification);\n        } catch (Exception e) {\n            log.error(\"Error marking notification as read: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Notification>",
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "PUT",
            "path": "/api/notifications/{notificationId}/read",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.getNotificationsByUser(@PathVariable Long userId)",
        "body": "@GetMapping(\"/user/{userId}\")\n    public ResponseEntity<List<Notification>> getNotificationsByUser(@PathVariable Long userId) {\n        log.info(\"Getting notifications for user: {}\", userId);\n        \n        List<Notification> notifications = notificationService.getNotificationsByUser(userId);\n        return ResponseEntity.ok(notifications);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Notification>>"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/notifications/user/{userId}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.getUnreadNotificationsByUser(@PathVariable Long userId)",
        "body": "@GetMapping(\"/user/{userId}/unread\")\n    public ResponseEntity<List<Notification>> getUnreadNotificationsByUser(@PathVariable Long userId) {\n        log.info(\"Getting unread notifications for user: {}\", userId);\n        \n        List<Notification> notifications = notificationService.getUnreadNotificationsByUser(userId);\n        return ResponseEntity.ok(notifications);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Notification",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Notification>>"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/notifications/user/{userId}/unread",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.getUnreadNotificationCount(@PathVariable Long userId)",
        "body": "@GetMapping(\"/user/{userId}/unread-count\")\n    public ResponseEntity<Long> getUnreadNotificationCount(@PathVariable Long userId) {\n        log.info(\"Getting unread notification count for user: {}\", userId);\n        \n        Long count = notificationService.getUnreadNotificationCount(userId);\n        return ResponseEntity.ok(count);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Long>"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/notifications/user/{userId}/unread-count",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "CreateNotificationRequest",
    "full_class_name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\NotificationController.java",
    "content": "public static class CreateNotificationRequest {\n        private Long userId;\n        private String title;\n        private String message;\n        private String type;\n        private String metadata;\n        \n        \n        public Long getUserId() { return userId; }\n        public void setUserId(Long userId) { this.userId = userId; }\n        \n        public String getTitle() { return title; }\n        public void setTitle(String title) { this.title = title; }\n        \n        public String getMessage() { return message; }\n        public void setMessage(String message) { this.message = message; }\n        \n        public String getType() { return type; }\n        public void setType(String type) { this.type = type; }\n        \n        public String getMetadata() { return metadata; }\n        public void setMetadata(String metadata) { this.metadata = metadata; }\n    }",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getUserId()",
        "body": "public Long getUserId() { return userId; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.setUserId(Long userId)",
        "body": "public void setUserId(Long userId) { this.userId = userId; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Long userId"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getTitle()",
        "body": "public String getTitle() { return title; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.setTitle(String title)",
        "body": "public void setTitle(String title) { this.title = title; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String title"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getMessage()",
        "body": "public String getMessage() { return message; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.setMessage(String message)",
        "body": "public void setMessage(String message) { this.message = message; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String message"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getType()",
        "body": "public String getType() { return type; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.setType(String type)",
        "body": "public void setType(String type) { this.type = type; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String type"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.getMetadata()",
        "body": "public String getMetadata() { return metadata; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.NotificationController.CreateNotificationRequest.setMetadata(String metadata)",
        "body": "public void setMetadata(String metadata) { this.metadata = metadata; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String metadata"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      "com.example.springdemo.controller.NotificationController"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service",
    "class_name": "NotificationService",
    "full_class_name": "com.example.springdemo.service.NotificationService",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\NotificationService.java",
    "content": "@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class NotificationService {\n    \n    private final NotificationRepository notificationRepository;\n    private final KafkaTemplate<String, Object> kafkaTemplate;\n    \n    @Transactional\n    public Notification createNotification(User user, String title, String message, \n                                         Notification.NotificationType type, String metadata) {\n        log.info(\"Creating notification for user: {}\", user.getId());\n        \n        Notification notification = Notification.builder()\n                .user(user)\n                .title(title)\n                .message(message)\n                .type(type)\n                .status(Notification.NotificationStatus.UNREAD)\n                .metadata(metadata)\n                .createdAt(LocalDateTime.now())\n                .build();\n        \n        Notification savedNotification = notificationRepository.save(notification);\n        \n        \n        publishNotificationEvent(savedNotification, \"NOTIFICATION_CREATED\");\n        \n        log.info(\"Notification created: {}\", savedNotification.getId());\n        return savedNotification;\n    }\n    \n    public void sendOrderNotification(User user, Order order, String message) {\n        String title = String.format(\"Order Update - %s\", order.getOrderNumber());\n        String metadata = String.format(\"{\\\"orderId\\\":%d,\\\"orderNumber\\\":\\\"%s\\\",\\\"status\\\":\\\"%s\\\"}\", \n                order.getId(), order.getOrderNumber(), order.getStatus());\n        \n        createNotification(user, title, message, Notification.NotificationType.ORDER_UPDATE, metadata);\n    }\n    \n    public void sendPaymentNotification(User user, Order order, String message) {\n        String title = String.format(\"Payment Update - %s\", order.getOrderNumber());\n        String metadata = String.format(\"{\\\"orderId\\\":%d,\\\"orderNumber\\\":\\\"%s\\\",\\\"paymentStatus\\\":\\\"%s\\\"}\", \n                order.getId(), order.getOrderNumber(), order.getPaymentStatus());\n        \n        createNotification(user, title, message, Notification.NotificationType.PAYMENT_CONFIRMATION, metadata);\n    }\n    \n    public void sendSystemAlert(User user, String title, String message) {\n        createNotification(user, title, message, Notification.NotificationType.SYSTEM_ALERT, null);\n    }\n    \n    @Transactional\n    public Notification markAsRead(Long notificationId) {\n        log.info(\"Marking notification as read: {}\", notificationId);\n        \n        Notification notification = notificationRepository.findById(notificationId)\n                .orElseThrow(() -> new RuntimeException(\"Notification not found\"));\n        \n        notification.setStatus(Notification.NotificationStatus.READ);\n        Notification savedNotification = notificationRepository.save(notification);\n        \n        \n        publishNotificationEvent(savedNotification, \"NOTIFICATION_READ\");\n        \n        return savedNotification;\n    }\n    \n    public List<Notification> getNotificationsByUser(Long userId) {\n        return notificationRepository.findByUserId(userId);\n    }\n    \n    public List<Notification> getUnreadNotificationsByUser(Long userId) {\n        return notificationRepository.findByUserIdAndStatus(userId, Notification.NotificationStatus.UNREAD);\n    }\n    \n    public Long getUnreadNotificationCount(Long userId) {\n        return notificationRepository.countUnreadNotificationsByUserId(userId);\n    }\n    \n    private void publishNotificationEvent(Notification notification, String eventType) {\n        try {\n            kafkaTemplate.send(\"notification-events\", eventType, notification);\n            log.info(\"Published notification event: {} for notification: {}\", eventType, notification.getId());\n        } catch (Exception e) {\n            log.error(\"Failed to publish notification event: {}\", e.getMessage());\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.NotificationService.createNotification(User user, String title, String message, \n                                         Notification.NotificationType type, String metadata)",
        "body": "@Transactional\n    public Notification createNotification(User user, String title, String message, \n                                         Notification.NotificationType type, String metadata) {\n        log.info(\"Creating notification for user: {}\", user.getId());\n        \n        Notification notification = Notification.builder()\n                .user(user)\n                .title(title)\n                .message(message)\n                .type(type)\n                .status(Notification.NotificationStatus.UNREAD)\n                .metadata(metadata)\n                .createdAt(LocalDateTime.now())\n                .build();\n        \n        Notification savedNotification = notificationRepository.save(notification);\n        \n        \n        publishNotificationEvent(savedNotification, \"NOTIFICATION_CREATED\");\n        \n        log.info(\"Notification created: {}\", savedNotification.getId());\n        return savedNotification;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getId()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Notification.builder()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Notification.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification.NotificationType",
          "com.example.springdemo.entity.User",
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [
          "com.example.springdemo.entity.Notification.NotificationStatus",
          "UNREAD"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.sendOrderNotification(User user, Order order, String message)",
        "body": "public void sendOrderNotification(User user, Order order, String message) {\n        String title = String.format(\"Order Update - %s\", order.getOrderNumber());\n        String metadata = String.format(\"{\\\"orderId\\\":%d,\\\"orderNumber\\\":\\\"%s\\\",\\\"status\\\":\\\"%s\\\"}\", \n                order.getId(), order.getOrderNumber(), order.getStatus());\n        \n        createNotification(user, title, message, Notification.NotificationType.ORDER_UPDATE, metadata);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getId()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getStatus()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "com.example.springdemo.entity.Notification.NotificationType",
          "ORDER_UPDATE"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.sendPaymentNotification(User user, Order order, String message)",
        "body": "public void sendPaymentNotification(User user, Order order, String message) {\n        String title = String.format(\"Payment Update - %s\", order.getOrderNumber());\n        String metadata = String.format(\"{\\\"orderId\\\":%d,\\\"orderNumber\\\":\\\"%s\\\",\\\"paymentStatus\\\":\\\"%s\\\"}\", \n                order.getId(), order.getOrderNumber(), order.getPaymentStatus());\n        \n        createNotification(user, title, message, Notification.NotificationType.PAYMENT_CONFIRMATION, metadata);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getId()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getPaymentStatus()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "PAYMENT_CONFIRMATION",
          "com.example.springdemo.entity.Notification.NotificationType"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.sendSystemAlert(User user, String title, String message)",
        "body": "public void sendSystemAlert(User user, String title, String message) {\n        createNotification(user, title, message, Notification.NotificationType.SYSTEM_ALERT, null);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "com.example.springdemo.entity.Notification.NotificationType",
          "SYSTEM_ALERT"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.markAsRead(Long notificationId)",
        "body": "@Transactional\n    public Notification markAsRead(Long notificationId) {\n        log.info(\"Marking notification as read: {}\", notificationId);\n        \n        Notification notification = notificationRepository.findById(notificationId)\n                .orElseThrow(() -> new RuntimeException(\"Notification not found\"));\n        \n        notification.setStatus(Notification.NotificationStatus.READ);\n        Notification savedNotification = notificationRepository.save(notification);\n        \n        \n        publishNotificationEvent(savedNotification, \"NOTIFICATION_READ\");\n        \n        return savedNotification;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Notification.setStatus(NotificationStatus status)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [
          "com.example.springdemo.entity.Notification.NotificationStatus",
          "READ"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.getNotificationsByUser(Long userId)",
        "body": "public List<Notification> getNotificationsByUser(Long userId) {\n        return notificationRepository.findByUserId(userId);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.NotificationRepository.findByUserId(Long userId)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.getUnreadNotificationsByUser(Long userId)",
        "body": "public List<Notification> getUnreadNotificationsByUser(Long userId) {\n        return notificationRepository.findByUserIdAndStatus(userId, Notification.NotificationStatus.UNREAD);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.NotificationRepository.findByUserIdAndStatus(@Param(value=\"userId\")",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [
          "com.example.springdemo.entity.Notification.NotificationStatus",
          "UNREAD"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.getUnreadNotificationCount(Long userId)",
        "body": "public Long getUnreadNotificationCount(Long userId) {\n        return notificationRepository.countUnreadNotificationsByUserId(userId);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.NotificationRepository.countUnreadNotificationsByUserId(@Param(value=\"userId\")",
            "params": []
          }
        ],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.NotificationService.publishNotificationEvent(Notification notification, String eventType)",
        "body": "private void publishNotificationEvent(Notification notification, String eventType) {\n        try {\n            kafkaTemplate.send(\"notification-events\", eventType, notification);\n            log.info(\"Published notification event: {} for notification: {}\", eventType, notification.getId());\n        } catch (Exception e) {\n            log.error(\"Failed to publish notification event: {}\", e.getMessage());\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Notification.getId()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Notification"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service",
    "class_name": "UserService",
    "full_class_name": "com.example.springdemo.service.UserService",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\UserService.java",
    "content": "@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class UserService {\n    \n    private final UserRepository userRepository;\n    private final KafkaTemplate<String, Object> kafkaTemplate;\n    private final NotificationService notificationService;\n    \n    @Transactional\n    public User createUser(String username, String email, String firstName, String lastName, User.UserRole role) {\n        log.info(\"Creating user: {}\", username);\n        \n        if (userRepository.existsByUsername(username)) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n        \n        if (userRepository.existsByEmail(email)) {\n            throw new RuntimeException(\"Email already exists\");\n        }\n        \n        User user = User.builder()\n                .username(username)\n                .email(email)\n                .firstName(firstName)\n                .lastName(lastName)\n                .role(role)\n                .status(User.UserStatus.ACTIVE)\n                .build();\n        \n        User savedUser = userRepository.save(user);\n        \n        \n        publishUserEvent(savedUser, \"USER_CREATED\");\n        \n        \n        notificationService.sendSystemAlert(savedUser, \"Welcome!\", \n                String.format(\"Welcome to our platform, %s!\", savedUser.getFirstName()));\n        \n        log.info(\"User created successfully: {}\", savedUser.getUsername());\n        return savedUser;\n    }\n    \n    @Transactional\n    public User updateUserStatus(Long userId, User.UserStatus status) {\n        log.info(\"Updating user status for user: {} to {}\", userId, status);\n        \n        User user = userRepository.findById(userId)\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        User.UserStatus oldStatus = user.getStatus();\n        user.setStatus(status);\n        \n        User savedUser = userRepository.save(user);\n        \n        \n        publishUserEvent(savedUser, \"USER_STATUS_CHANGED\");\n        \n        \n        notificationService.sendSystemAlert(savedUser, \"Account Status Update\", \n                String.format(\"Your account status has been changed to %s\", status));\n        \n        return savedUser;\n    }\n    \n    @Transactional\n    public User updateUserRole(Long userId, User.UserRole role) {\n        log.info(\"Updating user role for user: {} to {}\", userId, role);\n        \n        User user = userRepository.findById(userId)\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        User.UserRole oldRole = user.getRole();\n        user.setRole(role);\n        \n        User savedUser = userRepository.save(user);\n        \n        \n        publishUserEvent(savedUser, \"USER_ROLE_CHANGED\");\n        \n        \n        notificationService.sendSystemAlert(savedUser, \"Role Update\", \n                String.format(\"Your role has been changed from %s to %s\", oldRole, role));\n        \n        return savedUser;\n    }\n    \n    public Optional<User> getUserByUsername(String username) {\n        return userRepository.findByUsername(username);\n    }\n    \n    public Optional<User> getUserByEmail(String email) {\n        return userRepository.findByEmail(email);\n    }\n    \n    public List<User> getUsersByRole(User.UserRole role) {\n        return userRepository.findByRole(role);\n    }\n    \n    public List<User> getUsersByStatus(User.UserStatus status) {\n        return userRepository.findByStatus(status);\n    }\n    \n    public Long getUserCountByRole(User.UserRole role) {\n        return userRepository.countByRole(role);\n    }\n    \n    private void publishUserEvent(User user, String eventType) {\n        try {\n            kafkaTemplate.send(\"user-events\", eventType, user);\n            log.info(\"Published user event: {} for user: {}\", eventType, user.getUsername());\n        } catch (Exception e) {\n            log.error(\"Failed to publish user event: {}\", e.getMessage());\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.UserService.createUser(String username, String email, String firstName, String lastName, User.UserRole role)",
        "body": "@Transactional\n    public User createUser(String username, String email, String firstName, String lastName, User.UserRole role) {\n        log.info(\"Creating user: {}\", username);\n        \n        if (userRepository.existsByUsername(username)) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n        \n        if (userRepository.existsByEmail(email)) {\n            throw new RuntimeException(\"Email already exists\");\n        }\n        \n        User user = User.builder()\n                .username(username)\n                .email(email)\n                .firstName(firstName)\n                .lastName(lastName)\n                .role(role)\n                .status(User.UserStatus.ACTIVE)\n                .build();\n        \n        User savedUser = userRepository.save(user);\n        \n        \n        publishUserEvent(savedUser, \"USER_CREATED\");\n        \n        \n        notificationService.sendSystemAlert(savedUser, \"Welcome!\", \n                String.format(\"Welcome to our platform, %s!\", savedUser.getFirstName()));\n        \n        log.info(\"User created successfully: {}\", savedUser.getUsername());\n        return savedUser;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.UserRepository.existsByUsername(String username)",
            "params": []
          },
          {
            "name": "com.example.springdemo.repository.UserRepository.existsByEmail(String email)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.User.builder()",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.NotificationService.sendSystemAlert(User user, String title, String message)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.User.getFirstName()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.User.getUsername()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User",
          "com.example.springdemo.entity.User.UserRole"
        ],
        "field_access": [
          "ACTIVE",
          "com.example.springdemo.entity.User.UserStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.updateUserStatus(Long userId, User.UserStatus status)",
        "body": "@Transactional\n    public User updateUserStatus(Long userId, User.UserStatus status) {\n        log.info(\"Updating user status for user: {} to {}\", userId, status);\n        \n        User user = userRepository.findById(userId)\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        User.UserStatus oldStatus = user.getStatus();\n        user.setStatus(status);\n        \n        User savedUser = userRepository.save(user);\n        \n        \n        publishUserEvent(savedUser, \"USER_STATUS_CHANGED\");\n        \n        \n        notificationService.sendSystemAlert(savedUser, \"Account Status Update\", \n                String.format(\"Your account status has been changed to %s\", status));\n        \n        return savedUser;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getStatus()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.User.setStatus(UserStatus status)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserStatus",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.updateUserRole(Long userId, User.UserRole role)",
        "body": "@Transactional\n    public User updateUserRole(Long userId, User.UserRole role) {\n        log.info(\"Updating user role for user: {} to {}\", userId, role);\n        \n        User user = userRepository.findById(userId)\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        User.UserRole oldRole = user.getRole();\n        user.setRole(role);\n        \n        User savedUser = userRepository.save(user);\n        \n        \n        publishUserEvent(savedUser, \"USER_ROLE_CHANGED\");\n        \n        \n        notificationService.sendSystemAlert(savedUser, \"Role Update\", \n                String.format(\"Your role has been changed from %s to %s\", oldRole, role));\n        \n        return savedUser;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getRole()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.User.setRole(UserRole role)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.getUserByUsername(String username)",
        "body": "public Optional<User> getUserByUsername(String username) {\n        return userRepository.findByUsername(username);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.UserRepository.findByUsername(String username)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.getUserByEmail(String email)",
        "body": "public Optional<User> getUserByEmail(String email) {\n        return userRepository.findByEmail(email);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.UserRepository.findByEmail(String email)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.getUsersByRole(User.UserRole role)",
        "body": "public List<User> getUsersByRole(User.UserRole role) {\n        return userRepository.findByRole(role);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.UserRepository.findByRole(UserRole role)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.getUsersByStatus(User.UserStatus status)",
        "body": "public List<User> getUsersByStatus(User.UserStatus status) {\n        return userRepository.findByStatus(status);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.UserRepository.findByStatus(UserStatus status)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserStatus",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.getUserCountByRole(User.UserRole role)",
        "body": "public Long getUserCountByRole(User.UserRole role) {\n        return userRepository.countByRole(role);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.UserRepository.countByRole(@Param(value=\"role\")",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.UserService.publishUserEvent(User user, String eventType)",
        "body": "private void publishUserEvent(User user, String eventType) {\n        try {\n            kafkaTemplate.send(\"user-events\", eventType, user);\n            log.info(\"Published user event: {} for user: {}\", eventType, user.getUsername());\n        } catch (Exception e) {\n            log.error(\"Failed to publish user event: {}\", e.getMessage());\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.User.getUsername()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "OrderController",
    "full_class_name": "com.example.springdemo.controller.OrderController",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\OrderController.java",
    "content": "@RestController\n@RequestMapping(\"/api/orders\")\n@RequiredArgsConstructor\n@Slf4j\npublic class OrderController {\n    \n    private final OrderService orderService;\n    \n    @PostMapping\n    public ResponseEntity<Order> createOrder(@RequestBody CreateOrderRequest request) {\n        log.info(\"Creating order for user: {} with products: {}\", request.getUserId(), request.getProductIds());\n        \n        try {\n            Order order = orderService.createOrder(\n                    request.getUserId(), \n                    request.getProductIds(), \n                    request.getQuantities()\n            );\n            return ResponseEntity.ok(order);\n        } catch (Exception e) {\n            log.error(\"Error creating order: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @PutMapping(\"/{orderId}/status\")\n    public ResponseEntity<Order> updateOrderStatus(@PathVariable Long orderId, \n                                                  @RequestBody Map<String, String> request) {\n        log.info(\"Updating order status for order: {} to {}\", orderId, request.get(\"status\"));\n        \n        try {\n            Order.OrderStatus status = Order.OrderStatus.valueOf(request.get(\"status\"));\n            Order order = orderService.updateOrderStatus(orderId, status);\n            return ResponseEntity.ok(order);\n        } catch (Exception e) {\n            log.error(\"Error updating order status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @PutMapping(\"/{orderId}/payment\")\n    public ResponseEntity<Order> processPayment(@PathVariable Long orderId, \n                                               @RequestBody Map<String, String> request) {\n        log.info(\"Processing payment for order: {} with status: {}\", orderId, request.get(\"paymentStatus\"));\n        \n        try {\n            Order.PaymentStatus paymentStatus = Order.PaymentStatus.valueOf(request.get(\"paymentStatus\"));\n            Order order = orderService.processPayment(orderId, paymentStatus);\n            return ResponseEntity.ok(order);\n        } catch (Exception e) {\n            log.error(\"Error processing payment: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/user/{userId}\")\n    public ResponseEntity<List<Order>> getOrdersByUser(@PathVariable Long userId) {\n        log.info(\"Getting orders for user: {}\", userId);\n        \n        List<Order> orders = orderService.getOrdersByUser(userId);\n        return ResponseEntity.ok(orders);\n    }\n    \n    @GetMapping(\"/status/{status}\")\n    public ResponseEntity<List<Order>> getOrdersByStatus(@PathVariable String status) {\n        log.info(\"Getting orders with status: {}\", status);\n        \n        try {\n            Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status);\n            List<Order> orders = orderService.getOrdersByStatus(orderStatus);\n            return ResponseEntity.ok(orders);\n        } catch (Exception e) {\n            log.error(\"Error getting orders by status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/number/{orderNumber}\")\n    public ResponseEntity<Order> getOrderByNumber(@PathVariable String orderNumber) {\n        log.info(\"Getting order by number: {}\", orderNumber);\n        \n        Optional<Order> order = orderService.getOrderByNumber(orderNumber);\n        return order.map(ResponseEntity::ok)\n                   .orElse(ResponseEntity.notFound().build());\n    }\n    \n    \n    public static class CreateOrderRequest {\n        private Long userId;\n        private List<Long> productIds;\n        private List<Integer> quantities;\n        \n        \n        public Long getUserId() { return userId; }\n        public void setUserId(Long userId) { this.userId = userId; }\n        \n        public List<Long> getProductIds() { return productIds; }\n        public void setProductIds(List<Long> productIds) { this.productIds = productIds; }\n        \n        public List<Integer> getQuantities() { return quantities; }\n        public void setQuantities(List<Integer> quantities) { this.quantities = quantities; }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.OrderController.createOrder(@RequestBody CreateOrderRequest request)",
        "body": "@PostMapping\n    public ResponseEntity<Order> createOrder(@RequestBody CreateOrderRequest request) {\n        log.info(\"Creating order for user: {} with products: {}\", request.getUserId(), request.getProductIds());\n        \n        try {\n            Order order = orderService.createOrder(\n                    request.getUserId(), \n                    request.getProductIds(), \n                    request.getQuantities()\n            );\n            return ResponseEntity.ok(order);\n        } catch (Exception e) {\n            log.error(\"Error creating order: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.getUserId()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.getProductIds()",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.OrderService.createOrder(Long userId, List<Long> productIds, List<Integer> quantities)",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.getQuantities()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Order>",
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.controller.OrderController.CreateOrderRequest"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/orders",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.updateOrderStatus(@PathVariable Long orderId, \n                                                  @RequestBody Map<String, String> request)",
        "body": "@PutMapping(\"/{orderId}/status\")\n    public ResponseEntity<Order> updateOrderStatus(@PathVariable Long orderId, \n                                                  @RequestBody Map<String, String> request) {\n        log.info(\"Updating order status for order: {} to {}\", orderId, request.get(\"status\"));\n        \n        try {\n            Order.OrderStatus status = Order.OrderStatus.valueOf(request.get(\"status\"));\n            Order order = orderService.updateOrderStatus(orderId, status);\n            return ResponseEntity.ok(order);\n        } catch (Exception e) {\n            log.error(\"Error updating order status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.service.OrderService.updateOrderStatus(Long orderId, OrderStatus newStatus)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Order>",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "com.example.springdemo.entity.Order.OrderStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "PUT",
            "path": "/api/orders/{orderId}/status",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.processPayment(@PathVariable Long orderId, \n                                               @RequestBody Map<String, String> request)",
        "body": "@PutMapping(\"/{orderId}/payment\")\n    public ResponseEntity<Order> processPayment(@PathVariable Long orderId, \n                                               @RequestBody Map<String, String> request) {\n        log.info(\"Processing payment for order: {} with status: {}\", orderId, request.get(\"paymentStatus\"));\n        \n        try {\n            Order.PaymentStatus paymentStatus = Order.PaymentStatus.valueOf(request.get(\"paymentStatus\"));\n            Order order = orderService.processPayment(orderId, paymentStatus);\n            return ResponseEntity.ok(order);\n        } catch (Exception e) {\n            log.error(\"Error processing payment: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.service.OrderService.processPayment(Long orderId, PaymentStatus paymentStatus)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order.PaymentStatus",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Order>",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "com.example.springdemo.entity.Order.PaymentStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "PUT",
            "path": "/api/orders/{orderId}/payment",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.getOrdersByUser(@PathVariable Long userId)",
        "body": "@GetMapping(\"/user/{userId}\")\n    public ResponseEntity<List<Order>> getOrdersByUser(@PathVariable Long userId) {\n        log.info(\"Getting orders for user: {}\", userId);\n        \n        List<Order> orders = orderService.getOrdersByUser(userId);\n        return ResponseEntity.ok(orders);\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Order>>"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/orders/user/{userId}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.getOrdersByStatus(@PathVariable String status)",
        "body": "@GetMapping(\"/status/{status}\")\n    public ResponseEntity<List<Order>> getOrdersByStatus(@PathVariable String status) {\n        log.info(\"Getting orders with status: {}\", status);\n        \n        try {\n            Order.OrderStatus orderStatus = Order.OrderStatus.valueOf(status);\n            List<Order> orders = orderService.getOrdersByStatus(orderStatus);\n            return ResponseEntity.ok(orders);\n        } catch (Exception e) {\n            log.error(\"Error getting orders by status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Order>>",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "com.example.springdemo.entity.Order.OrderStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/orders/status/{status}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.getOrderByNumber(@PathVariable String orderNumber)",
        "body": "@GetMapping(\"/number/{orderNumber}\")\n    public ResponseEntity<Order> getOrderByNumber(@PathVariable String orderNumber) {\n        log.info(\"Getting order by number: {}\", orderNumber);\n        \n        Optional<Order> order = orderService.getOrderByNumber(orderNumber);\n        return order.map(ResponseEntity::ok)\n                   .orElse(ResponseEntity.notFound().build());\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Order>",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/orders/number/{orderNumber}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "CreateOrderRequest",
    "full_class_name": "com.example.springdemo.controller.OrderController.CreateOrderRequest",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\OrderController.java",
    "content": "public static class CreateOrderRequest {\n        private Long userId;\n        private List<Long> productIds;\n        private List<Integer> quantities;\n        \n        \n        public Long getUserId() { return userId; }\n        public void setUserId(Long userId) { this.userId = userId; }\n        \n        public List<Long> getProductIds() { return productIds; }\n        public void setProductIds(List<Long> productIds) { this.productIds = productIds; }\n        \n        public List<Integer> getQuantities() { return quantities; }\n        public void setQuantities(List<Integer> quantities) { this.quantities = quantities; }\n    }",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.getUserId()",
        "body": "public Long getUserId() { return userId; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.setUserId(Long userId)",
        "body": "public void setUserId(Long userId) { this.userId = userId; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Long userId"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.getProductIds()",
        "body": "public List<Long> getProductIds() { return productIds; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.setProductIds(List<Long> productIds)",
        "body": "public void setProductIds(List<Long> productIds) { this.productIds = productIds; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "List<Long> productIds"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.getQuantities()",
        "body": "public List<Integer> getQuantities() { return quantities; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.OrderController.CreateOrderRequest.setQuantities(List<Integer> quantities)",
        "body": "public void setQuantities(List<Integer> quantities) { this.quantities = quantities; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "List<Integer> quantities"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      "com.example.springdemo.controller.OrderController"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "ProductController",
    "full_class_name": "com.example.springdemo.controller.ProductController",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\ProductController.java",
    "content": "@RestController\n@RequestMapping(\"/api/products\")\n@RequiredArgsConstructor\n@Slf4j\npublic class ProductController {\n    \n    private final ProductRepository productRepository;\n    \n    @PostMapping\n    public ResponseEntity<Product> createProduct(@RequestBody CreateProductRequest request) {\n        log.info(\"Creating product: {}\", request.getName());\n        \n        try {\n            Product product = Product.builder()\n                    .name(request.getName())\n                    .description(request.getDescription())\n                    .price(request.getPrice())\n                    .stockQuantity(request.getStockQuantity())\n                    .category(Product.ProductCategory.valueOf(request.getCategory()))\n                    .status(Product.ProductStatus.AVAILABLE)\n                    .build();\n            \n            Product savedProduct = productRepository.save(product);\n            return ResponseEntity.ok(savedProduct);\n        } catch (Exception e) {\n            log.error(\"Error creating product: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping\n    public ResponseEntity<List<Product>> getAllProducts() {\n        log.info(\"Getting all products\");\n        \n        List<Product> products = productRepository.findAll();\n        return ResponseEntity.ok(products);\n    }\n    \n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Product> getProductById(@PathVariable Long id) {\n        log.info(\"Getting product by id: {}\", id);\n        \n        Optional<Product> product = productRepository.findById(id);\n        return product.map(ResponseEntity::ok)\n                     .orElse(ResponseEntity.notFound().build());\n    }\n    \n    @GetMapping(\"/category/{category}\")\n    public ResponseEntity<List<Product>> getProductsByCategory(@PathVariable String category) {\n        log.info(\"Getting products by category: {}\", category);\n        \n        try {\n            Product.ProductCategory productCategory = Product.ProductCategory.valueOf(category);\n            List<Product> products = productRepository.findByCategory(productCategory);\n            return ResponseEntity.ok(products);\n        } catch (Exception e) {\n            log.error(\"Error getting products by category: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/status/{status}\")\n    public ResponseEntity<List<Product>> getProductsByStatus(@PathVariable String status) {\n        log.info(\"Getting products by status: {}\", status);\n        \n        try {\n            Product.ProductStatus productStatus = Product.ProductStatus.valueOf(status);\n            List<Product> products = productRepository.findByStatus(productStatus);\n            return ResponseEntity.ok(products);\n        } catch (Exception e) {\n            log.error(\"Error getting products by status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/available\")\n    public ResponseEntity<List<Product>> getAvailableProducts() {\n        log.info(\"Getting available products\");\n        \n        List<Product> products = productRepository.findAvailableProducts();\n        return ResponseEntity.ok(products);\n    }\n    \n    @GetMapping(\"/low-stock\")\n    public ResponseEntity<List<Product>> getLowStockProducts(@RequestParam(defaultValue = \"10\") Integer threshold) {\n        log.info(\"Getting low stock products with threshold: {}\", threshold);\n        \n        List<Product> products = productRepository.findLowStockProducts(threshold);\n        return ResponseEntity.ok(products);\n    }\n    \n    @GetMapping(\"/search\")\n    public ResponseEntity<List<Product>> searchProducts(@RequestParam String keyword) {\n        log.info(\"Searching products with keyword: {}\", keyword);\n        \n        List<Product> products = productRepository.searchProducts(keyword);\n        return ResponseEntity.ok(products);\n    }\n    \n    @GetMapping(\"/price-range\")\n    public ResponseEntity<List<Product>> getProductsByPriceRange(@RequestParam BigDecimal minPrice, \n                                                                @RequestParam BigDecimal maxPrice) {\n        log.info(\"Getting products by price range: {} - {}\", minPrice, maxPrice);\n        \n        List<Product> products = productRepository.findByPriceBetween(minPrice, maxPrice);\n        return ResponseEntity.ok(products);\n    }\n    \n    \n    public static class CreateProductRequest {\n        private String name;\n        private String description;\n        private BigDecimal price;\n        private Integer stockQuantity;\n        private String category;\n        \n        \n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getDescription() { return description; }\n        public void setDescription(String description) { this.description = description; }\n        \n        public BigDecimal getPrice() { return price; }\n        public void setPrice(BigDecimal price) { this.price = price; }\n        \n        public Integer getStockQuantity() { return stockQuantity; }\n        public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }\n        \n        public String getCategory() { return category; }\n        public void setCategory(String category) { this.category = category; }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.ProductController.createProduct(@RequestBody CreateProductRequest request)",
        "body": "@PostMapping\n    public ResponseEntity<Product> createProduct(@RequestBody CreateProductRequest request) {\n        log.info(\"Creating product: {}\", request.getName());\n        \n        try {\n            Product product = Product.builder()\n                    .name(request.getName())\n                    .description(request.getDescription())\n                    .price(request.getPrice())\n                    .stockQuantity(request.getStockQuantity())\n                    .category(Product.ProductCategory.valueOf(request.getCategory()))\n                    .status(Product.ProductStatus.AVAILABLE)\n                    .build();\n            \n            Product savedProduct = productRepository.save(product);\n            return ResponseEntity.ok(savedProduct);\n        } catch (Exception e) {\n            log.error(\"Error creating product: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getName()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Product.builder()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getDescription()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getPrice()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getStockQuantity()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getCategory()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Product>",
          "com.example.springdemo.controller.ProductController.CreateProductRequest",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [
          "com.example.springdemo.entity.Product.ProductStatus",
          "com.example.springdemo.entity.Product.ProductCategory",
          "AVAILABLE"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/products",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getAllProducts()",
        "body": "@GetMapping\n    public ResponseEntity<List<Product>> getAllProducts() {\n        log.info(\"Getting all products\");\n        \n        List<Product> products = productRepository.findAll();\n        return ResponseEntity.ok(products);\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getProductById(@PathVariable Long id)",
        "body": "@GetMapping(\"/{id}\")\n    public ResponseEntity<Product> getProductById(@PathVariable Long id) {\n        log.info(\"Getting product by id: {}\", id);\n        \n        Optional<Product> product = productRepository.findById(id);\n        return product.map(ResponseEntity::ok)\n                     .orElse(ResponseEntity.notFound().build());\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Product>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/{id}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getProductsByCategory(@PathVariable String category)",
        "body": "@GetMapping(\"/category/{category}\")\n    public ResponseEntity<List<Product>> getProductsByCategory(@PathVariable String category) {\n        log.info(\"Getting products by category: {}\", category);\n        \n        try {\n            Product.ProductCategory productCategory = Product.ProductCategory.valueOf(category);\n            List<Product> products = productRepository.findByCategory(productCategory);\n            return ResponseEntity.ok(products);\n        } catch (Exception e) {\n            log.error(\"Error getting products by category: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.ProductRepository.findByCategory(ProductCategory category)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Product.ProductCategory",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [
          "com.example.springdemo.entity.Product.ProductCategory"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/category/{category}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getProductsByStatus(@PathVariable String status)",
        "body": "@GetMapping(\"/status/{status}\")\n    public ResponseEntity<List<Product>> getProductsByStatus(@PathVariable String status) {\n        log.info(\"Getting products by status: {}\", status);\n        \n        try {\n            Product.ProductStatus productStatus = Product.ProductStatus.valueOf(status);\n            List<Product> products = productRepository.findByStatus(productStatus);\n            return ResponseEntity.ok(products);\n        } catch (Exception e) {\n            log.error(\"Error getting products by status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.ProductRepository.findByStatus(ProductStatus status)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Product.ProductStatus",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [
          "com.example.springdemo.entity.Product.ProductStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/status/{status}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getAvailableProducts()",
        "body": "@GetMapping(\"/available\")\n    public ResponseEntity<List<Product>> getAvailableProducts() {\n        log.info(\"Getting available products\");\n        \n        List<Product> products = productRepository.findAvailableProducts();\n        return ResponseEntity.ok(products);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.ProductRepository.findAvailableProducts()",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/available",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getLowStockProducts(@RequestParam(defaultValue = \"10\") Integer threshold)",
        "body": "@GetMapping(\"/low-stock\")\n    public ResponseEntity<List<Product>> getLowStockProducts(@RequestParam(defaultValue = \"10\") Integer threshold) {\n        log.info(\"Getting low stock products with threshold: {}\", threshold);\n        \n        List<Product> products = productRepository.findLowStockProducts(threshold);\n        return ResponseEntity.ok(products);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.ProductRepository.findLowStockProducts(@Param(value=\"threshold\")",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/low-stock",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.searchProducts(@RequestParam String keyword)",
        "body": "@GetMapping(\"/search\")\n    public ResponseEntity<List<Product>> searchProducts(@RequestParam String keyword) {\n        log.info(\"Searching products with keyword: {}\", keyword);\n        \n        List<Product> products = productRepository.searchProducts(keyword);\n        return ResponseEntity.ok(products);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.ProductRepository.searchProducts(@Param(value=\"keyword\")",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/search",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.getProductsByPriceRange(@RequestParam BigDecimal minPrice, \n                                                                @RequestParam BigDecimal maxPrice)",
        "body": "@GetMapping(\"/price-range\")\n    public ResponseEntity<List<Product>> getProductsByPriceRange(@RequestParam BigDecimal minPrice, \n                                                                @RequestParam BigDecimal maxPrice) {\n        log.info(\"Getting products by price range: {} - {}\", minPrice, maxPrice);\n        \n        List<Product> products = productRepository.findByPriceBetween(minPrice, maxPrice);\n        return ResponseEntity.ok(products);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.ProductRepository.findByPriceBetween(BigDecimal minPrice, BigDecimal maxPrice)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<Product>>",
          "com.example.springdemo.entity.Product"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/products/price-range",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "CreateProductRequest",
    "full_class_name": "com.example.springdemo.controller.ProductController.CreateProductRequest",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\ProductController.java",
    "content": "public static class CreateProductRequest {\n        private String name;\n        private String description;\n        private BigDecimal price;\n        private Integer stockQuantity;\n        private String category;\n        \n        \n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getDescription() { return description; }\n        public void setDescription(String description) { this.description = description; }\n        \n        public BigDecimal getPrice() { return price; }\n        public void setPrice(BigDecimal price) { this.price = price; }\n        \n        public Integer getStockQuantity() { return stockQuantity; }\n        public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }\n        \n        public String getCategory() { return category; }\n        public void setCategory(String category) { this.category = category; }\n    }",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getName()",
        "body": "public String getName() { return name; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.setName(String name)",
        "body": "public void setName(String name) { this.name = name; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String name"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getDescription()",
        "body": "public String getDescription() { return description; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.setDescription(String description)",
        "body": "public void setDescription(String description) { this.description = description; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String description"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getPrice()",
        "body": "public BigDecimal getPrice() { return price; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.setPrice(BigDecimal price)",
        "body": "public void setPrice(BigDecimal price) { this.price = price; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "BigDecimal price"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getStockQuantity()",
        "body": "public Integer getStockQuantity() { return stockQuantity; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.setStockQuantity(Integer stockQuantity)",
        "body": "public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "Integer stockQuantity"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.getCategory()",
        "body": "public String getCategory() { return category; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.ProductController.CreateProductRequest.setCategory(String category)",
        "body": "public void setCategory(String category) { this.category = category; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String category"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      "com.example.springdemo.controller.ProductController"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "UserController",
    "full_class_name": "com.example.springdemo.controller.UserController",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\UserController.java",
    "content": "@RestController\n@RequestMapping(\"/api/users\")\n@RequiredArgsConstructor\n@Slf4j\npublic class UserController {\n    \n    private final UserService userService;\n    \n    @PostMapping\n    public ResponseEntity<User> createUser(@RequestBody CreateUserRequest request) {\n        log.info(\"Creating user: {}\", request.getUsername());\n        \n        try {\n            User user = userService.createUser(\n                    request.getUsername(),\n                    request.getEmail(),\n                    request.getFirstName(),\n                    request.getLastName(),\n                    User.UserRole.valueOf(request.getRole())\n            );\n            return ResponseEntity.ok(user);\n        } catch (Exception e) {\n            log.error(\"Error creating user: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @PutMapping(\"/{userId}/status\")\n    public ResponseEntity<User> updateUserStatus(@PathVariable Long userId, \n                                                @RequestBody Map<String, String> request) {\n        log.info(\"Updating user status for user: {} to {}\", userId, request.get(\"status\"));\n        \n        try {\n            User.UserStatus status = User.UserStatus.valueOf(request.get(\"status\"));\n            User user = userService.updateUserStatus(userId, status);\n            return ResponseEntity.ok(user);\n        } catch (Exception e) {\n            log.error(\"Error updating user status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @PutMapping(\"/{userId}/role\")\n    public ResponseEntity<User> updateUserRole(@PathVariable Long userId, \n                                              @RequestBody Map<String, String> request) {\n        log.info(\"Updating user role for user: {} to {}\", userId, request.get(\"role\"));\n        \n        try {\n            User.UserRole role = User.UserRole.valueOf(request.get(\"role\"));\n            User user = userService.updateUserRole(userId, role);\n            return ResponseEntity.ok(user);\n        } catch (Exception e) {\n            log.error(\"Error updating user role: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/username/{username}\")\n    public ResponseEntity<User> getUserByUsername(@PathVariable String username) {\n        log.info(\"Getting user by username: {}\", username);\n        \n        Optional<User> user = userService.getUserByUsername(username);\n        return user.map(ResponseEntity::ok)\n                   .orElse(ResponseEntity.notFound().build());\n    }\n    \n    @GetMapping(\"/email/{email}\")\n    public ResponseEntity<User> getUserByEmail(@PathVariable String email) {\n        log.info(\"Getting user by email: {}\", email);\n        \n        Optional<User> user = userService.getUserByEmail(email);\n        return user.map(ResponseEntity::ok)\n                   .orElse(ResponseEntity.notFound().build());\n    }\n    \n    @GetMapping(\"/role/{role}\")\n    public ResponseEntity<List<User>> getUsersByRole(@PathVariable String role) {\n        log.info(\"Getting users by role: {}\", role);\n        \n        try {\n            User.UserRole userRole = User.UserRole.valueOf(role);\n            List<User> users = userService.getUsersByRole(userRole);\n            return ResponseEntity.ok(users);\n        } catch (Exception e) {\n            log.error(\"Error getting users by role: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/status/{status}\")\n    public ResponseEntity<List<User>> getUsersByStatus(@PathVariable String status) {\n        log.info(\"Getting users by status: {}\", status);\n        \n        try {\n            User.UserStatus userStatus = User.UserStatus.valueOf(status);\n            List<User> users = userService.getUsersByStatus(userStatus);\n            return ResponseEntity.ok(users);\n        } catch (Exception e) {\n            log.error(\"Error getting users by status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    @GetMapping(\"/count/role/{role}\")\n    public ResponseEntity<Long> getUserCountByRole(@PathVariable String role) {\n        log.info(\"Getting user count by role: {}\", role);\n        \n        try {\n            User.UserRole userRole = User.UserRole.valueOf(role);\n            Long count = userService.getUserCountByRole(userRole);\n            return ResponseEntity.ok(count);\n        } catch (Exception e) {\n            log.error(\"Error getting user count by role: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    \n    public static class CreateUserRequest {\n        private String username;\n        private String email;\n        private String firstName;\n        private String lastName;\n        private String role;\n        \n        \n        public String getUsername() { return username; }\n        public void setUsername(String username) { this.username = username; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public String getFirstName() { return firstName; }\n        public void setFirstName(String firstName) { this.firstName = firstName; }\n        \n        public String getLastName() { return lastName; }\n        public void setLastName(String lastName) { this.lastName = lastName; }\n        \n        public String getRole() { return role; }\n        public void setRole(String role) { this.role = role; }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.UserController.createUser(@RequestBody CreateUserRequest request)",
        "body": "@PostMapping\n    public ResponseEntity<User> createUser(@RequestBody CreateUserRequest request) {\n        log.info(\"Creating user: {}\", request.getUsername());\n        \n        try {\n            User user = userService.createUser(\n                    request.getUsername(),\n                    request.getEmail(),\n                    request.getFirstName(),\n                    request.getLastName(),\n                    User.UserRole.valueOf(request.getRole())\n            );\n            return ResponseEntity.ok(user);\n        } catch (Exception e) {\n            log.error(\"Error creating user: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getUsername()",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.UserService.createUser(String username, String email, String firstName, String lastName, UserRole role)",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getEmail()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getFirstName()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getLastName()",
            "params": []
          },
          {
            "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getRole()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.controller.UserController.CreateUserRequest",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<User>",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "POST",
            "path": "/api/users",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.updateUserStatus(@PathVariable Long userId, \n                                                @RequestBody Map<String, String> request)",
        "body": "@PutMapping(\"/{userId}/status\")\n    public ResponseEntity<User> updateUserStatus(@PathVariable Long userId, \n                                                @RequestBody Map<String, String> request) {\n        log.info(\"Updating user status for user: {} to {}\", userId, request.get(\"status\"));\n        \n        try {\n            User.UserStatus status = User.UserStatus.valueOf(request.get(\"status\"));\n            User user = userService.updateUserStatus(userId, status);\n            return ResponseEntity.ok(user);\n        } catch (Exception e) {\n            log.error(\"Error updating user status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.service.UserService.updateUserStatus(Long userId, UserStatus status)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserStatus",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<User>",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "PUT",
            "path": "/api/users/{userId}/status",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.updateUserRole(@PathVariable Long userId, \n                                              @RequestBody Map<String, String> request)",
        "body": "@PutMapping(\"/{userId}/role\")\n    public ResponseEntity<User> updateUserRole(@PathVariable Long userId, \n                                              @RequestBody Map<String, String> request) {\n        log.info(\"Updating user role for user: {} to {}\", userId, request.get(\"role\"));\n        \n        try {\n            User.UserRole role = User.UserRole.valueOf(request.get(\"role\"));\n            User user = userService.updateUserRole(userId, role);\n            return ResponseEntity.ok(user);\n        } catch (Exception e) {\n            log.error(\"Error updating user role: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.service.UserService.updateUserRole(Long userId, UserRole role)",
            "params": []
          }
        ],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<User>",
          "com.example.springdemo.entity.User",
          "com.example.springdemo.entity.User.UserRole"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "PUT",
            "path": "/api/users/{userId}/role",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.getUserByUsername(@PathVariable String username)",
        "body": "@GetMapping(\"/username/{username}\")\n    public ResponseEntity<User> getUserByUsername(@PathVariable String username) {\n        log.info(\"Getting user by username: {}\", username);\n        \n        Optional<User> user = userService.getUserByUsername(username);\n        return user.map(ResponseEntity::ok)\n                   .orElse(ResponseEntity.notFound().build());\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<User>",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/users/username/{username}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.getUserByEmail(@PathVariable String email)",
        "body": "@GetMapping(\"/email/{email}\")\n    public ResponseEntity<User> getUserByEmail(@PathVariable String email) {\n        log.info(\"Getting user by email: {}\", email);\n        \n        Optional<User> user = userService.getUserByEmail(email);\n        return user.map(ResponseEntity::ok)\n                   .orElse(ResponseEntity.notFound().build());\n    }",
        "method_calls": [],
        "used_types": [
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<User>",
          "com.example.springdemo.entity.User"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/users/email/{email}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.getUsersByRole(@PathVariable String role)",
        "body": "@GetMapping(\"/role/{role}\")\n    public ResponseEntity<List<User>> getUsersByRole(@PathVariable String role) {\n        log.info(\"Getting users by role: {}\", role);\n        \n        try {\n            User.UserRole userRole = User.UserRole.valueOf(role);\n            List<User> users = userService.getUsersByRole(userRole);\n            return ResponseEntity.ok(users);\n        } catch (Exception e) {\n            log.error(\"Error getting users by role: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<User>>",
          "com.example.springdemo.entity.User.UserRole"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/users/role/{role}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.getUsersByStatus(@PathVariable String status)",
        "body": "@GetMapping(\"/status/{status}\")\n    public ResponseEntity<List<User>> getUsersByStatus(@PathVariable String status) {\n        log.info(\"Getting users by status: {}\", status);\n        \n        try {\n            User.UserStatus userStatus = User.UserStatus.valueOf(status);\n            List<User> users = userService.getUsersByStatus(userStatus);\n            return ResponseEntity.ok(users);\n        } catch (Exception e) {\n            log.error(\"Error getting users by status: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [],
        "used_types": [
          "com.example.springdemo.entity.User.UserStatus",
          "com.example.springdemo.entity.User",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<List<User>>"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserStatus"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/users/status/{status}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      },
      {
        "name": "com.example.springdemo.controller.UserController.getUserCountByRole(@PathVariable String role)",
        "body": "@GetMapping(\"/count/role/{role}\")\n    public ResponseEntity<Long> getUserCountByRole(@PathVariable String role) {\n        log.info(\"Getting user count by role: {}\", role);\n        \n        try {\n            User.UserRole userRole = User.UserRole.valueOf(role);\n            Long count = userService.getUserCountByRole(userRole);\n            return ResponseEntity.ok(count);\n        } catch (Exception e) {\n            log.error(\"Error getting user count by role: {}\", e.getMessage());\n            return ResponseEntity.badRequest().build();\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.service.UserService.getUserCountByRole(UserRole role)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.User.UserRole",
          "F:\\_side_projects\\source_atlas\\.contents.spring-web-6.1.1.jar\\org.springframework.http\\ResponseEntity.class.ResponseEntity<Long>"
        ],
        "field_access": [
          "com.example.springdemo.entity.User.UserRole"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [
          {
            "type": "GET",
            "path": "/api/users/count/role/{role}",
            "produces": "",
            "consumes": ""
          }
        ],
        "type": "rest_endpoint"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.controller",
    "class_name": "CreateUserRequest",
    "full_class_name": "com.example.springdemo.controller.UserController.CreateUserRequest",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\controller\\UserController.java",
    "content": "public static class CreateUserRequest {\n        private String username;\n        private String email;\n        private String firstName;\n        private String lastName;\n        private String role;\n        \n        \n        public String getUsername() { return username; }\n        public void setUsername(String username) { this.username = username; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public String getFirstName() { return firstName; }\n        public void setFirstName(String firstName) { this.firstName = firstName; }\n        \n        public String getLastName() { return lastName; }\n        public void setLastName(String lastName) { this.lastName = lastName; }\n        \n        public String getRole() { return role; }\n        public void setRole(String role) { this.role = role; }\n    }",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getUsername()",
        "body": "public String getUsername() { return username; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.setUsername(String username)",
        "body": "public void setUsername(String username) { this.username = username; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String username"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getEmail()",
        "body": "public String getEmail() { return email; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.setEmail(String email)",
        "body": "public void setEmail(String email) { this.email = email; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String email"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getFirstName()",
        "body": "public String getFirstName() { return firstName; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.setFirstName(String firstName)",
        "body": "public void setFirstName(String firstName) { this.firstName = firstName; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String firstName"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getLastName()",
        "body": "public String getLastName() { return lastName; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.setLastName(String lastName)",
        "body": "public void setLastName(String lastName) { this.lastName = lastName; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String lastName"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.getRole()",
        "body": "public String getRole() { return role; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.controller.UserController.CreateUserRequest.setRole(String role)",
        "body": "public void setRole(String role) { this.role = role; }",
        "method_calls": [],
        "used_types": [],
        "field_access": [
          "String role"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      "com.example.springdemo.controller.UserController"
    ],
    "is_nested": true,
    "type": "regular"
  },
  {
    "package": "com.example.springdemo.service",
    "class_name": "OrderService",
    "full_class_name": "com.example.springdemo.service.OrderService",
    "file_path": "F:\\01_projects\\spring-demo\\src\\main\\java\\com\\example\\springdemo\\service\\OrderService.java",
    "content": "@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class OrderService {\n    \n    private final OrderRepository orderRepository;\n    private final UserRepository userRepository;\n    private final ProductRepository productRepository;\n    private final ServiceFactory serviceFactory;\n    private final KafkaTemplate<String, Object> kafkaTemplate;\n    private final NotificationService notificationService;\n    \n    @Transactional\n    public Order createOrder(Long userId, List<Long> productIds, List<Integer> quantities) {\n        log.info(\"Creating order for user: {}\", userId);\n        \n        User user = userRepository.findById(userId)\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        Order order = Order.builder()\n                .orderNumber(serviceFactory.generateOrderNumber())\n                .user(user)\n                .status(Order.OrderStatus.PENDING)\n                .paymentStatus(Order.PaymentStatus.PENDING)\n                .totalAmount(BigDecimal.ZERO)\n                .build();\n        \n        BigDecimal totalAmount = BigDecimal.ZERO;\n        \n        for (int i = 0; i < productIds.size(); i++) {\n            Product product = productRepository.findById(productIds.get(i))\n                    .orElseThrow(() -> new RuntimeException(\"Product not found\"));\n            \n            Integer quantity = quantities.get(i);\n            \n            if (product.getStockQuantity() < quantity) {\n                throw new RuntimeException(\"Insufficient stock for product: \" + product.getName());\n            }\n            \n            BigDecimal itemTotal = product.getPrice().multiply(BigDecimal.valueOf(quantity));\n            totalAmount = totalAmount.add(itemTotal);\n            \n            OrderItem orderItem = OrderItem.builder()\n                    .order(order)\n                    .product(product)\n                    .quantity(quantity)\n                    .unitPrice(product.getPrice())\n                    .totalPrice(itemTotal)\n                    .build();\n            \n            order.getOrderItems().add(orderItem);\n            \n            \n            product.setStockQuantity(product.getStockQuantity() - quantity);\n            productRepository.save(product);\n        }\n        \n        order.setTotalAmount(totalAmount);\n        \n        \n        PricingStrategy pricingStrategy = serviceFactory.getPricingStrategy(user, order);\n        BigDecimal finalAmount = pricingStrategy.calculatePrice(order, user);\n        order.setTotalAmount(finalAmount);\n        \n        Order savedOrder = orderRepository.save(order);\n        \n        \n        createOrderEvent(savedOrder, OrderEvent.EventType.ORDER_CREATED, \"Order created successfully\");\n        \n        \n        publishOrderEvent(savedOrder, \"ORDER_CREATED\");\n        \n        \n        notificationService.sendOrderNotification(user, savedOrder, \"Order created successfully\");\n        \n        log.info(\"Order created successfully: {}\", savedOrder.getOrderNumber());\n        return savedOrder;\n    }\n    \n    @Transactional\n    public Order updateOrderStatus(Long orderId, Order.OrderStatus newStatus) {\n        log.info(\"Updating order status for order: {} to {}\", orderId, newStatus);\n        \n        Order order = orderRepository.findById(orderId)\n                .orElseThrow(() -> new RuntimeException(\"Order not found\"));\n        \n        Order.OrderStatus oldStatus = order.getStatus();\n        order.setStatus(newStatus);\n        \n        Order savedOrder = orderRepository.save(order);\n        \n        \n        createOrderEvent(savedOrder, OrderEvent.EventType.STATUS_CHANGED, \n                String.format(\"Status changed from %s to %s\", oldStatus, newStatus));\n        \n        \n        publishOrderEvent(savedOrder, \"ORDER_STATUS_CHANGED\");\n        \n        \n        notificationService.sendOrderNotification(order.getUser(), savedOrder, \n                String.format(\"Order status updated to %s\", newStatus));\n        \n        return savedOrder;\n    }\n    \n    @Transactional\n    public Order processPayment(Long orderId, Order.PaymentStatus paymentStatus) {\n        log.info(\"Processing payment for order: {} with status: {}\", orderId, paymentStatus);\n        \n        Order order = orderRepository.findById(orderId)\n                .orElseThrow(() -> new RuntimeException(\"Order not found\"));\n        \n        order.setPaymentStatus(paymentStatus);\n        \n        if (paymentStatus == Order.PaymentStatus.PAID) {\n            order.setStatus(Order.OrderStatus.CONFIRMED);\n        }\n        \n        Order savedOrder = orderRepository.save(order);\n        \n        \n        createOrderEvent(savedOrder, OrderEvent.EventType.PAYMENT_PROCESSED, \n                String.format(\"Payment status: %s\", paymentStatus));\n        \n        \n        publishOrderEvent(savedOrder, \"PAYMENT_PROCESSED\");\n        \n        \n        notificationService.sendOrderNotification(order.getUser(), savedOrder, \n                String.format(\"Payment %s\", paymentStatus));\n        \n        return savedOrder;\n    }\n    \n    public List<Order> getOrdersByUser(Long userId) {\n        return orderRepository.findByUserId(userId);\n    }\n    \n    public List<Order> getOrdersByStatus(Order.OrderStatus status) {\n        return orderRepository.findByStatus(status);\n    }\n    \n    public Optional<Order> getOrderByNumber(String orderNumber) {\n        return orderRepository.findByOrderNumber(orderNumber);\n    }\n    \n    private void createOrderEvent(Order order, OrderEvent.EventType eventType, String eventData) {\n        OrderEvent event = OrderEvent.builder()\n                .order(order)\n                .eventType(eventType)\n                .eventData(eventData)\n                .source(\"ORDER_SERVICE\")\n                .timestamp(LocalDateTime.now())\n                .build();\n        \n        order.getEvents().add(event);\n    }\n    \n    private void publishOrderEvent(Order order, String eventType) {\n        try {\n            kafkaTemplate.send(\"order-events\", eventType, order);\n            log.info(\"Published order event: {} for order: {}\", eventType, order.getOrderNumber());\n        } catch (Exception e) {\n            log.error(\"Failed to publish order event: {}\", e.getMessage());\n        }\n    }\n}",
    "implements": [],
    "extends": null,
    "methods": [
      {
        "name": "com.example.springdemo.service.OrderService.createOrder(Long userId, List<Long> productIds, List<Integer> quantities)",
        "body": "@Transactional\n    public Order createOrder(Long userId, List<Long> productIds, List<Integer> quantities) {\n        log.info(\"Creating order for user: {}\", userId);\n        \n        User user = userRepository.findById(userId)\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        \n        Order order = Order.builder()\n                .orderNumber(serviceFactory.generateOrderNumber())\n                .user(user)\n                .status(Order.OrderStatus.PENDING)\n                .paymentStatus(Order.PaymentStatus.PENDING)\n                .totalAmount(BigDecimal.ZERO)\n                .build();\n        \n        BigDecimal totalAmount = BigDecimal.ZERO;\n        \n        for (int i = 0; i < productIds.size(); i++) {\n            Product product = productRepository.findById(productIds.get(i))\n                    .orElseThrow(() -> new RuntimeException(\"Product not found\"));\n            \n            Integer quantity = quantities.get(i);\n            \n            if (product.getStockQuantity() < quantity) {\n                throw new RuntimeException(\"Insufficient stock for product: \" + product.getName());\n            }\n            \n            BigDecimal itemTotal = product.getPrice().multiply(BigDecimal.valueOf(quantity));\n            totalAmount = totalAmount.add(itemTotal);\n            \n            OrderItem orderItem = OrderItem.builder()\n                    .order(order)\n                    .product(product)\n                    .quantity(quantity)\n                    .unitPrice(product.getPrice())\n                    .totalPrice(itemTotal)\n                    .build();\n            \n            order.getOrderItems().add(orderItem);\n            \n            \n            product.setStockQuantity(product.getStockQuantity() - quantity);\n            productRepository.save(product);\n        }\n        \n        order.setTotalAmount(totalAmount);\n        \n        \n        PricingStrategy pricingStrategy = serviceFactory.getPricingStrategy(user, order);\n        BigDecimal finalAmount = pricingStrategy.calculatePrice(order, user);\n        order.setTotalAmount(finalAmount);\n        \n        Order savedOrder = orderRepository.save(order);\n        \n        \n        createOrderEvent(savedOrder, OrderEvent.EventType.ORDER_CREATED, \"Order created successfully\");\n        \n        \n        publishOrderEvent(savedOrder, \"ORDER_CREATED\");\n        \n        \n        notificationService.sendOrderNotification(user, savedOrder, \"Order created successfully\");\n        \n        log.info(\"Order created successfully: {}\", savedOrder.getOrderNumber());\n        return savedOrder;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.builder()",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.factory.ServiceFactory.generateOrderNumber()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Product.getStockQuantity()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Product.getName()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Product.getPrice()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.OrderItem.builder()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getOrderItems()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Product.setStockQuantity(Integer stockQuantity)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.setTotalAmount(BigDecimal totalAmount)",
            "params": []
          },
          {
            "name": "com.example.springdemo.service.strategy.PricingStrategy.calculatePrice(Order order, User user)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.service.strategy.PricingStrategy",
          "com.example.springdemo.entity.OrderItem",
          "com.example.springdemo.entity.User",
          "com.example.springdemo.entity.Product",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "com.example.springdemo.entity.Order.PaymentStatus",
          "com.example.springdemo.entity.Order.OrderStatus",
          "BigDecimal ZERO",
          "com.example.springdemo.entity.OrderEvent.EventType",
          "ORDER_CREATED",
          "PENDING"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.updateOrderStatus(Long orderId, Order.OrderStatus newStatus)",
        "body": "@Transactional\n    public Order updateOrderStatus(Long orderId, Order.OrderStatus newStatus) {\n        log.info(\"Updating order status for order: {} to {}\", orderId, newStatus);\n        \n        Order order = orderRepository.findById(orderId)\n                .orElseThrow(() -> new RuntimeException(\"Order not found\"));\n        \n        Order.OrderStatus oldStatus = order.getStatus();\n        order.setStatus(newStatus);\n        \n        Order savedOrder = orderRepository.save(order);\n        \n        \n        createOrderEvent(savedOrder, OrderEvent.EventType.STATUS_CHANGED, \n                String.format(\"Status changed from %s to %s\", oldStatus, newStatus));\n        \n        \n        publishOrderEvent(savedOrder, \"ORDER_STATUS_CHANGED\");\n        \n        \n        notificationService.sendOrderNotification(order.getUser(), savedOrder, \n                String.format(\"Order status updated to %s\", newStatus));\n        \n        return savedOrder;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getStatus()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.setStatus(OrderStatus status)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getUser()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "STATUS_CHANGED",
          "com.example.springdemo.entity.OrderEvent.EventType"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.processPayment(Long orderId, Order.PaymentStatus paymentStatus)",
        "body": "@Transactional\n    public Order processPayment(Long orderId, Order.PaymentStatus paymentStatus) {\n        log.info(\"Processing payment for order: {} with status: {}\", orderId, paymentStatus);\n        \n        Order order = orderRepository.findById(orderId)\n                .orElseThrow(() -> new RuntimeException(\"Order not found\"));\n        \n        order.setPaymentStatus(paymentStatus);\n        \n        if (paymentStatus == Order.PaymentStatus.PAID) {\n            order.setStatus(Order.OrderStatus.CONFIRMED);\n        }\n        \n        Order savedOrder = orderRepository.save(order);\n        \n        \n        createOrderEvent(savedOrder, OrderEvent.EventType.PAYMENT_PROCESSED, \n                String.format(\"Payment status: %s\", paymentStatus));\n        \n        \n        publishOrderEvent(savedOrder, \"PAYMENT_PROCESSED\");\n        \n        \n        notificationService.sendOrderNotification(order.getUser(), savedOrder, \n                String.format(\"Payment %s\", paymentStatus));\n        \n        return savedOrder;\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.setPaymentStatus(PaymentStatus paymentStatus)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.setStatus(OrderStatus status)",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getUser()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order.PaymentStatus",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [
          "CONFIRMED",
          "com.example.springdemo.entity.Order.PaymentStatus",
          "com.example.springdemo.entity.Order.OrderStatus",
          "com.example.springdemo.entity.OrderEvent.EventType",
          "PAYMENT_PROCESSED",
          "PAID"
        ],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.getOrdersByUser(Long userId)",
        "body": "public List<Order> getOrdersByUser(Long userId) {\n        return orderRepository.findByUserId(userId);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.OrderRepository.findByUserId(Long userId)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.getOrdersByStatus(Order.OrderStatus status)",
        "body": "public List<Order> getOrdersByStatus(Order.OrderStatus status) {\n        return orderRepository.findByStatus(status);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.OrderRepository.findByStatus(OrderStatus status)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order.OrderStatus",
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.getOrderByNumber(String orderNumber)",
        "body": "public Optional<Order> getOrderByNumber(String orderNumber) {\n        return orderRepository.findByOrderNumber(orderNumber);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.repository.OrderRepository.findByOrderNumber(String orderNumber)",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.createOrderEvent(Order order, OrderEvent.EventType eventType, String eventData)",
        "body": "private void createOrderEvent(Order order, OrderEvent.EventType eventType, String eventData) {\n        OrderEvent event = OrderEvent.builder()\n                .order(order)\n                .eventType(eventType)\n                .eventData(eventData)\n                .source(\"ORDER_SERVICE\")\n                .timestamp(LocalDateTime.now())\n                .build();\n        \n        order.getEvents().add(event);\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.OrderEvent.builder()",
            "params": []
          },
          {
            "name": "com.example.springdemo.entity.Order.getEvents()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order",
          "com.example.springdemo.entity.OrderEvent",
          "com.example.springdemo.entity.OrderEvent.EventType"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      },
      {
        "name": "com.example.springdemo.service.OrderService.publishOrderEvent(Order order, String eventType)",
        "body": "private void publishOrderEvent(Order order, String eventType) {\n        try {\n            kafkaTemplate.send(\"order-events\", eventType, order);\n            log.info(\"Published order event: {} for order: {}\", eventType, order.getOrderNumber());\n        } catch (Exception e) {\n            log.error(\"Failed to publish order event: {}\", e.getMessage());\n        }\n    }",
        "method_calls": [
          {
            "name": "com.example.springdemo.entity.Order.getOrderNumber()",
            "params": []
          }
        ],
        "used_types": [
          "com.example.springdemo.entity.Order"
        ],
        "field_access": [],
        "inheritance_info": [],
        "extends_info": [],
        "endpoint": [],
        "type": "regular"
      }
    ],
    "parent_class": [
      null
    ],
    "is_nested": false,
    "type": "regular"
  }
]